{"version":3,"file":"src_app_cms_management_management-fleets_management-fleets_module_ts.js","mappings":"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","sources":["./src/app/cms/management/management-fleets/fleet-new/fleet-new.component.ts","./src/app/cms/management/management-fleets/fleet-new/fleet-new.component.html","./src/app/cms/management/management-fleets/fleets-list/fleets-list.component.ts","./src/app/cms/management/management-fleets/fleets-list/fleets-list.component.html","./src/app/cms/management/management-fleets/fleets-list/fleets-list.resolver.ts","./src/app/cms/management/management-fleets/management-fleets-routing.module.ts","./src/app/cms/management/management-fleets/management-fleets.module.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { CreateFleetGQL } from \"@ridy/admin-panel/generated/graphql\";\nimport { COUNTRY_CODE_LIST } from \"@ridy/admin-panel/src/app/country-codes\";\nimport { NzMessageService } from \"ng-zorro-antd/message\";\nimport { firstValueFrom } from \"rxjs\";\n\n@Component({\n  selector: \"app-fleet-new\",\n  templateUrl: \"./fleet-new.component.html\",\n})\nexport class FleetNewComponent {\n  form = this.fb.group({\n    name: [null, Validators.required],\n    phoneNumberPrefix: [\"+1\", Validators.required],\n    phoneNumber: [null, Validators.required],\n    mobileNumberPrefix: [\"+1\", Validators.required],\n    mobileNumber: [null, Validators.required],\n    accountNumber: [null, Validators.required],\n    commissionSharePercent: [0, Validators.required],\n    commissionShareFlat: [0, Validators.required],\n    address: [null],\n  });\n  countryCodes = COUNTRY_CODE_LIST;\n\n  constructor(\n    private fb: FormBuilder,\n    private createRiderGQL: CreateFleetGQL,\n    private messageService: NzMessageService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  async submitForm() {\n    const {\n      phoneNumber,\n      phoneNumberPrefix,\n      mobileNumber,\n      mobileNumberPrefix,\n      ..._formValue\n    } = this.form.value;\n    const result = await firstValueFrom(\n      this.createRiderGQL.mutate({\n        input: {\n          phoneNumber: `${phoneNumberPrefix.substring(1)}${phoneNumber}`,\n          mobileNumber: `${mobileNumberPrefix.substring(1)}${mobileNumber}`,\n          ..._formValue,\n        },\n      })\n    );\n    if ((result.errors?.length ?? 0) > 0) {\n      this.messageService.error(\n        (result.errors ?? []).map((error) => error.message).join(\",\")\n      );\n    } else {\n      this.messageService.success(\"Success\");\n    }\n    this.router.navigateByUrl(\"/management/fleets\");\n  }\n}\n","<nz-page-header\n  [nzGhost]=\"false\"\n  nzBackIcon\n  nzTitle=\"New Fleet\"\n  nzSubtitle=\"Input new Fleet's details below.\"\n>\n</nz-page-header>\n<nz-card style=\"mt-16\">\n  <form nz-form #frm [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"name\">Name</nz-form-label>\n      <nz-form-control nzErrorTip=\"The input is not valid Name\">\n        <input nz-input formControlName=\"name\" id=\"name\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"phoneNumber\" nzRequired>Phone Number</nz-form-label>\n      <nz-form-control>\n        <nz-input-group [nzAddOnBefore]=\"addOnBeforeTemplate\">\n          <ng-template #addOnBeforeTemplate>\n            <nz-select formControlName=\"phoneNumberPrefix\" class=\"phone-select\">\n              <nz-option\n                *ngFor=\"let code of countryCodes\"\n                [nzLabel]=\"code.name + ' (' + code.dial_code + ')'\"\n                [nzValue]=\"code.dial_code\"\n              ></nz-option>\n            </nz-select>\n          </ng-template>\n          <nz-input-number\n            formControlName=\"phoneNumber\"\n            id=\"phoneNumber\"\n            class=\"w-full\"\n          ></nz-input-number>\n        </nz-input-group>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"mobileNumber\" nzRequired\n        >Mobile Number</nz-form-label\n      >\n      <nz-form-control>\n        <nz-input-group [nzAddOnBefore]=\"addOnBeforeTemplate\">\n          <ng-template #addOnBeforeTemplate>\n            <nz-select\n              formControlName=\"mobileNumberPrefix\"\n              class=\"phone-select\"\n            >\n              <nz-option\n                *ngFor=\"let code of countryCodes\"\n                [nzLabel]=\"code.name + ' (' + code.dial_code + ')'\"\n                [nzValue]=\"code.dial_code\"\n              ></nz-option>\n            </nz-select>\n          </ng-template>\n          <nz-input-number\n            formControlName=\"mobileNumber\"\n            id=\"mobileNumber\"\n            class=\"w-full\"\n          ></nz-input-number>\n        </nz-input-group>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"commissionSharePercent\"\n        >Commission Percentage</nz-form-label\n      >\n      <nz-form-control>\n        <nz-input-number\n          [nzMin]=\"0\"\n          [nzMax]=\"100\"\n          class=\"w-full\"\n          required\n          id=\"commissionSharePercent\"\n          formControlName=\"commissionSharePercent\"\n        ></nz-input-number>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"commissionShareFlat\"\n        >Commission Flat</nz-form-label\n      >\n      <nz-form-control>\n        <nz-input-number\n          [nzMin]=\"0\"\n          [nzMax]=\"100\"\n          required\n          class=\"w-full\"\n          id=\"commissionShareFlat\"\n          formControlName=\"commissionSharePercent\"\n        ></nz-input-number>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"accountNumber\"\n        >Bank Account Info</nz-form-label\n      >\n      <nz-form-control>\n        <input\n          nz-input\n          required\n          id=\"accountNumber\"\n          formControlName=\"accountNumber\"\n        />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"address\">Address</nz-form-label>\n      <nz-form-control>\n        <input nz-input id=\"address\" formControlName=\"address\" />\n      </nz-form-control>\n    </nz-form-item>\n    <button\n      nz-button\n      nzType=\"default\"\n      type=\"submit\"\n      [disabled]=\"form.invalid\"\n      class=\"float-right\"\n    >\n      Register\n    </button>\n  </form>\n</nz-card>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  FleetFilter,\n  FleetsListQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { map, Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-fleets-list\",\n  templateUrl: \"./fleets-list.component.html\",\n})\nexport class FleetsListComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<FleetsListQuery>>;\n  nameSearchValue?: string;\n\n  constructor(\n    public route: ActivatedRoute,\n    private router: Router,\n    public tagColor: TagColorService,\n    public tableService: TableService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.fleets));\n  }\n\n  async filter() {\n    const search: FleetFilter = {\n      name: this.nameSearchValue ? { like: this.nameSearchValue } : undefined,\n    };\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: { search: JSON.stringify(search) },\n      queryParamsHandling: \"merge\",\n    });\n  }\n}\n","<nz-page-header\n  [nzGhost]=\"false\"\n  nzBackIcon\n  nzTitle=\"Fleets\"\n  nzSubtitle=\"List of all the fleets registered\"\n>\n  <nz-page-header-extra>\n    <button nz-button nzType=\"default\" routerLink=\"new\">\n      <i nz-icon nzType=\"plus\"></i>{{ \"profile.add\" | translate }}\n    </button>\n  </nz-page-header-extra>\n  <nz-page-header-content>\n    <nz-table\n      #table\n      nzShowSizeChanger\n      [nzFrontPagination]=\"false\"\n      *ngIf=\"(query | async)?.data?.fleets as fleets\"\n      [nzData]=\"fleets.nodes\"\n      [nzTotal]=\"fleets.totalCount\"\n      (nzQueryParams)=\"tableService.onTableQueryParamsChange($event)\"\n      nzBordered\n    >\n      <thead>\n        <tr>\n          <th nzCustomFilter nzColumnKey=\"lastName\" [nzSortFn]=\"true\">\n            {{ \"profile.name\" | translate }}\n            <nz-filter-trigger\n              [nzActive]=\"\n                (route.params | async)?.filter?.includes('lastName') === true\n              \"\n              [nzDropdownMenu]=\"filtername\"\n            >\n              <i nz-icon nzType=\"search\"></i>\n            </nz-filter-trigger>\n          </th>\n          <th nzCustomFilter nzColumnKey=\"mobileNumber\" [nzSortFn]=\"true\">\n            {{ \"profile.mobileNumber\" | translate }}\n            <nz-filter-trigger\n              [nzActive]=\"\n                (route.params | async)?.filter?.includes('mobileNumber') ===\n                true\n              \"\n            >\n              <i nz-icon nzType=\"search\"></i>\n            </nz-filter-trigger>\n          </th>\n          <th>{{ \"profile.actions\" | translate }}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let data of table.data\">\n          <td>{{ data.name }}</td>\n          <td>{{ data.phoneNumber | phone }}</td>\n          <td>\n            <a [routerLink]=\"'view/' + data.id\">{{\n              \"table.details\" | translate\n            }}</a>\n          </td>\n        </tr>\n      </tbody>\n    </nz-table>\n  </nz-page-header-content>\n</nz-page-header>\n\n<nz-dropdown-menu #filtername=\"nzDropdownMenu\">\n  <div class=\"ant-table-filter-dropdown\">\n    <div class=\"search-box\">\n      <input\n        type=\"text\"\n        nz-input\n        placeholder=\"{{ 'profile.name' | translate }}\"\n        [(ngModel)]=\"nameSearchValue\"\n      />\n      <button\n        nz-button\n        nzSize=\"small\"\n        nzType=\"default\"\n        (click)=\"filter()\"\n        class=\"search-button\"\n      >\n        {{ \"profile.view\" | translate }}\n      </button>\n      <button nz-button nzSize=\"small\" (click)=\"filter()\">\n        {{ \"profile.reset\" | translate }}\n      </button>\n    </div>\n  </div>\n</nz-dropdown-menu>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  FleetFilter,\n  FleetsListGQL,\n  FleetsListQuery,\n  FleetSortFields,\n  RiderFilter,\n  RidersListGQL,\n  RidersListQuery,\n  RiderSortFields,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class FleetsListResolver\n  implements Resolve<ApolloQueryResult<FleetsListQuery>>\n{\n  constructor(private paging: TableService, private gql: FleetsListGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<FleetsListQuery>> {\n    const params = this.paging.deserializeQueryParams<\n      FleetSortFields,\n      FleetFilter\n    >(route.queryParams);\n    return this.gql.fetch(params);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FleetNewComponent } from './fleet-new/fleet-new.component';\nimport { FleetsListComponent } from './fleets-list/fleets-list.component';\nimport { FleetsListResolver } from './fleets-list/fleets-list.resolver';\n\n\nconst routes: Routes = [\n  { path: '', component: FleetsListComponent, resolve: { fleets: FleetsListResolver } },\n  { path: 'view/:id', loadChildren: () => import('./fleet-view/fleet-view.module').then(m => m.FleetViewModule) },\n  { path: 'new', component: FleetNewComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    FleetsListResolver\n  ]\n})\nexport class ManagementFleetsRoutingModule { }\n","import { NgModule } from \"@angular/core\";\nimport { SharedModule } from \"@ridy/admin-panel/src/app/@components/shared.module\";\n\nimport { FleetNewComponent } from \"./fleet-new/fleet-new.component\";\nimport { FleetsListComponent } from \"./fleets-list/fleets-list.component\";\nimport { ManagementFleetsRoutingModule } from \"./management-fleets-routing.module\";\n\n@NgModule({\n  declarations: [FleetsListComponent, FleetNewComponent],\n  imports: [ManagementFleetsRoutingModule, SharedModule],\n})\nexport class ManagementFleetsModule {}\n"],"names":[],"sourceRoot":"webpack:///"}