{"version":3,"file":"main.js","mappings":"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","sources":["./generated/graphql.ts","./src/app/@components/g2/index.ts","./src/app/@components/g2/nz-g2.directive.ts","./src/app/@components/g2/nz-g2.module.ts","./src/app/@components/g2/public-api.ts","./src/app/@components/shared.module.ts","./src/app/@guards/login.guard.ts","./src/app/@pipes/phone.pipe.ts","./src/app/@services/tag-color/tag-color.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/cms/current-config.service.ts","./src/app/graphql.module.ts","./src/app/icons-provider.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** Cursor for paging through collections */\n  ConnectionCursor: any;\n  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n  DateTime: any;\n};\n\nexport type AddActivitiesToComplaintInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddAddressesToRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddAllowedServicesToCouponInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddComplaintsToOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddConversationsToOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddDocumentsToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddDriverTransactionsToOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddEnabledServicesToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddFeedbacksToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddFleetTransactionsToOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddOrdersToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddOrdersToRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddParametersToFeedbackInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddProviderTransactionsToOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddRegionsToServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddRiderTransactionsToOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddServicesToServiceCategoryInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddTransactionsToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddTransactionsToFleetInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddTransactionsToRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddWalletsToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddWalletsToFleetInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type AddWalletsToRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  details?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  location: Point;\n  title: Scalars['String'];\n};\n\nexport type AddressAggregateGroupBy = {\n  __typename?: 'AddressAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AddressAvgAggregate = {\n  __typename?: 'AddressAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type AddressConnection = {\n  __typename?: 'AddressConnection';\n  /** Array of edges. */\n  edges: Array<AddressEdge>;\n  /** Paging information */\n  pageInfo: PageInfo;\n};\n\nexport type AddressCountAggregate = {\n  __typename?: 'AddressCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type AddressEdge = {\n  __typename?: 'AddressEdge';\n  /** Cursor for this node. */\n  cursor: Scalars['ConnectionCursor'];\n  /** The node containing the Address */\n  node: Address;\n};\n\nexport type AddressFilter = {\n  and?: InputMaybe<Array<AddressFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<AddressFilter>>;\n};\n\nexport type AddressMaxAggregate = {\n  __typename?: 'AddressMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AddressMinAggregate = {\n  __typename?: 'AddressMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AddressSort = {\n  direction: SortDirection;\n  field: AddressSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum AddressSortFields {\n  Id = 'id'\n}\n\nexport type AddressSumAggregate = {\n  __typename?: 'AddressSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type Announcement = {\n  __typename?: 'Announcement';\n  description: Scalars['String'];\n  expireAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  startAt: Scalars['DateTime'];\n  title: Scalars['String'];\n  url?: Maybe<Scalars['String']>;\n};\n\nexport type AnnouncementAggregateGroupBy = {\n  __typename?: 'AnnouncementAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AnnouncementAvgAggregate = {\n  __typename?: 'AnnouncementAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type AnnouncementConnection = {\n  __typename?: 'AnnouncementConnection';\n  /** Array of nodes. */\n  nodes: Array<Announcement>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type AnnouncementCountAggregate = {\n  __typename?: 'AnnouncementCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type AnnouncementDeleteResponse = {\n  __typename?: 'AnnouncementDeleteResponse';\n  description?: Maybe<Scalars['String']>;\n  expireAt?: Maybe<Scalars['DateTime']>;\n  id?: Maybe<Scalars['ID']>;\n  startAt?: Maybe<Scalars['DateTime']>;\n  title?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n};\n\nexport type AnnouncementFilter = {\n  and?: InputMaybe<Array<AnnouncementFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<AnnouncementFilter>>;\n};\n\nexport type AnnouncementMaxAggregate = {\n  __typename?: 'AnnouncementMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AnnouncementMinAggregate = {\n  __typename?: 'AnnouncementMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AnnouncementSort = {\n  direction: SortDirection;\n  field: AnnouncementSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum AnnouncementSortFields {\n  Id = 'id'\n}\n\nexport type AnnouncementSumAggregate = {\n  __typename?: 'AnnouncementSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type CalculateFareDto = {\n  __typename?: 'CalculateFareDTO';\n  currency: Scalars['String'];\n  distance: Scalars['Float'];\n  duration: Scalars['Float'];\n  error?: Maybe<CalculateFareError>;\n  services: Array<ServiceCategoryWithCost>;\n};\n\nexport enum CalculateFareError {\n  NoServiceInRegion = 'NoServiceInRegion',\n  RegionUnsupported = 'RegionUnsupported'\n}\n\nexport type CalculateFareInput = {\n  points: Array<PointInput>;\n};\n\nexport type CarColor = {\n  __typename?: 'CarColor';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type CarColorAggregateGroupBy = {\n  __typename?: 'CarColorAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CarColorAvgAggregate = {\n  __typename?: 'CarColorAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type CarColorCountAggregate = {\n  __typename?: 'CarColorCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type CarColorDeleteResponse = {\n  __typename?: 'CarColorDeleteResponse';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type CarColorFilter = {\n  and?: InputMaybe<Array<CarColorFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<CarColorFilter>>;\n};\n\nexport type CarColorMaxAggregate = {\n  __typename?: 'CarColorMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CarColorMinAggregate = {\n  __typename?: 'CarColorMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CarColorSort = {\n  direction: SortDirection;\n  field: CarColorSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum CarColorSortFields {\n  Id = 'id'\n}\n\nexport type CarColorSumAggregate = {\n  __typename?: 'CarColorSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type CarModel = {\n  __typename?: 'CarModel';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type CarModelAggregateGroupBy = {\n  __typename?: 'CarModelAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CarModelAvgAggregate = {\n  __typename?: 'CarModelAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type CarModelConnection = {\n  __typename?: 'CarModelConnection';\n  /** Array of nodes. */\n  nodes: Array<CarModel>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type CarModelCountAggregate = {\n  __typename?: 'CarModelCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type CarModelDeleteResponse = {\n  __typename?: 'CarModelDeleteResponse';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type CarModelFilter = {\n  and?: InputMaybe<Array<CarModelFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<CarModelFilter>>;\n};\n\nexport type CarModelMaxAggregate = {\n  __typename?: 'CarModelMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CarModelMinAggregate = {\n  __typename?: 'CarModelMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CarModelSort = {\n  direction: SortDirection;\n  field: CarModelSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum CarModelSortFields {\n  Id = 'id'\n}\n\nexport type CarModelSumAggregate = {\n  __typename?: 'CarModelSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport enum ChartTimeframe {\n  Daily = 'Daily',\n  Monthly = 'Monthly',\n  Weekly = 'Weekly',\n  Yearly = 'Yearly'\n}\n\nexport type Complaint = {\n  __typename?: 'Complaint';\n  activities: Array<ComplaintActivity>;\n  activitiesAggregate: Array<ComplaintActivitiesAggregateResponse>;\n  content?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  inscriptionTimestamp: Scalars['DateTime'];\n  order: Order;\n  requestId: Scalars['ID'];\n  requestedByDriver: Scalars['Boolean'];\n  status: ComplaintStatus;\n  subject: Scalars['String'];\n};\n\n\nexport type ComplaintActivitiesArgs = {\n  filter?: InputMaybe<ComplaintActivityFilter>;\n  sorting?: InputMaybe<Array<ComplaintActivitySort>>;\n};\n\n\nexport type ComplaintActivitiesAggregateArgs = {\n  filter?: InputMaybe<ComplaintActivityAggregateFilter>;\n};\n\nexport type ComplaintActivitiesAggregateGroupBy = {\n  __typename?: 'ComplaintActivitiesAggregateGroupBy';\n  complaintId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ComplaintActivitiesAggregateResponse = {\n  __typename?: 'ComplaintActivitiesAggregateResponse';\n  avg?: Maybe<ComplaintActivitiesAvgAggregate>;\n  count?: Maybe<ComplaintActivitiesCountAggregate>;\n  groupBy?: Maybe<ComplaintActivitiesAggregateGroupBy>;\n  max?: Maybe<ComplaintActivitiesMaxAggregate>;\n  min?: Maybe<ComplaintActivitiesMinAggregate>;\n  sum?: Maybe<ComplaintActivitiesSumAggregate>;\n};\n\nexport type ComplaintActivitiesAvgAggregate = {\n  __typename?: 'ComplaintActivitiesAvgAggregate';\n  complaintId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ComplaintActivitiesCountAggregate = {\n  __typename?: 'ComplaintActivitiesCountAggregate';\n  complaintId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type ComplaintActivitiesMaxAggregate = {\n  __typename?: 'ComplaintActivitiesMaxAggregate';\n  complaintId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ComplaintActivitiesMinAggregate = {\n  __typename?: 'ComplaintActivitiesMinAggregate';\n  complaintId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ComplaintActivitiesSumAggregate = {\n  __typename?: 'ComplaintActivitiesSumAggregate';\n  complaintId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ComplaintActivity = {\n  __typename?: 'ComplaintActivity';\n  actor: Operator;\n  assignedTo?: Maybe<Operator>;\n  comment?: Maybe<Scalars['String']>;\n  complaintId: Scalars['ID'];\n  id: Scalars['ID'];\n  type: ComplaintActivityType;\n};\n\nexport type ComplaintActivityAggregateFilter = {\n  and?: InputMaybe<Array<ComplaintActivityAggregateFilter>>;\n  complaintId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintActivityAggregateFilter>>;\n};\n\nexport type ComplaintActivityAggregateGroupBy = {\n  __typename?: 'ComplaintActivityAggregateGroupBy';\n  complaintId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ComplaintActivityAvgAggregate = {\n  __typename?: 'ComplaintActivityAvgAggregate';\n  complaintId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ComplaintActivityCountAggregate = {\n  __typename?: 'ComplaintActivityCountAggregate';\n  complaintId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type ComplaintActivityFilter = {\n  and?: InputMaybe<Array<ComplaintActivityFilter>>;\n  complaintId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintActivityFilter>>;\n};\n\nexport type ComplaintActivityMaxAggregate = {\n  __typename?: 'ComplaintActivityMaxAggregate';\n  complaintId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ComplaintActivityMinAggregate = {\n  __typename?: 'ComplaintActivityMinAggregate';\n  complaintId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ComplaintActivitySort = {\n  direction: SortDirection;\n  field: ComplaintActivitySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ComplaintActivitySortFields {\n  ComplaintId = 'complaintId',\n  Id = 'id'\n}\n\nexport type ComplaintActivitySumAggregate = {\n  __typename?: 'ComplaintActivitySumAggregate';\n  complaintId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport enum ComplaintActivityType {\n  AssignToOperator = 'AssignToOperator',\n  Resolved = 'Resolved',\n  Update = 'Update'\n}\n\nexport type ComplaintAggregateFilter = {\n  and?: InputMaybe<Array<ComplaintAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<ComplaintStatusFilterComparison>;\n};\n\nexport type ComplaintAggregateGroupBy = {\n  __typename?: 'ComplaintAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type ComplaintAggregateResponse = {\n  __typename?: 'ComplaintAggregateResponse';\n  avg?: Maybe<ComplaintAvgAggregate>;\n  count?: Maybe<ComplaintCountAggregate>;\n  groupBy?: Maybe<ComplaintAggregateGroupBy>;\n  max?: Maybe<ComplaintMaxAggregate>;\n  min?: Maybe<ComplaintMinAggregate>;\n  sum?: Maybe<ComplaintSumAggregate>;\n};\n\nexport type ComplaintAvgAggregate = {\n  __typename?: 'ComplaintAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type ComplaintConnection = {\n  __typename?: 'ComplaintConnection';\n  /** Array of nodes. */\n  nodes: Array<Complaint>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type ComplaintCountAggregate = {\n  __typename?: 'ComplaintCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['Int']>;\n};\n\nexport type ComplaintFilter = {\n  and?: InputMaybe<Array<ComplaintFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<ComplaintStatusFilterComparison>;\n};\n\nexport type ComplaintMaxAggregate = {\n  __typename?: 'ComplaintMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type ComplaintMinAggregate = {\n  __typename?: 'ComplaintMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type ComplaintSort = {\n  direction: SortDirection;\n  field: ComplaintSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ComplaintSortFields {\n  Id = 'id',\n  RequestId = 'requestId',\n  Status = 'status'\n}\n\nexport enum ComplaintStatus {\n  Resolved = 'Resolved',\n  Submitted = 'Submitted',\n  UnderInvestigation = 'UnderInvestigation'\n}\n\nexport type ComplaintStatusFilterComparison = {\n  eq?: InputMaybe<ComplaintStatus>;\n  gt?: InputMaybe<ComplaintStatus>;\n  gte?: InputMaybe<ComplaintStatus>;\n  iLike?: InputMaybe<ComplaintStatus>;\n  in?: InputMaybe<Array<ComplaintStatus>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  like?: InputMaybe<ComplaintStatus>;\n  lt?: InputMaybe<ComplaintStatus>;\n  lte?: InputMaybe<ComplaintStatus>;\n  neq?: InputMaybe<ComplaintStatus>;\n  notILike?: InputMaybe<ComplaintStatus>;\n  notIn?: InputMaybe<Array<ComplaintStatus>>;\n  notLike?: InputMaybe<ComplaintStatus>;\n};\n\nexport type ComplaintSumAggregate = {\n  __typename?: 'ComplaintSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type Coupon = {\n  __typename?: 'Coupon';\n  allowedServices: Array<Service>;\n  code: Scalars['String'];\n  creditGift: Scalars['Float'];\n  description: Scalars['String'];\n  discountFlat: Scalars['Int'];\n  discountPercent: Scalars['Int'];\n  expireAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  isEnabled: Scalars['Boolean'];\n  isFirstTravelOnly: Scalars['Boolean'];\n  manyTimesUserCanUse: Scalars['Int'];\n  manyUsersCanUse: Scalars['Int'];\n  maximumCost: Scalars['Float'];\n  minimumCost: Scalars['Float'];\n  startAt: Scalars['DateTime'];\n  title: Scalars['String'];\n};\n\n\nexport type CouponAllowedServicesArgs = {\n  filter?: InputMaybe<ServiceFilter>;\n  sorting?: InputMaybe<Array<ServiceSort>>;\n};\n\nexport type CouponAggregateGroupBy = {\n  __typename?: 'CouponAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CouponAvgAggregate = {\n  __typename?: 'CouponAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type CouponConnection = {\n  __typename?: 'CouponConnection';\n  /** Array of nodes. */\n  nodes: Array<Coupon>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type CouponCountAggregate = {\n  __typename?: 'CouponCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type CouponFilter = {\n  and?: InputMaybe<Array<CouponFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<CouponFilter>>;\n};\n\nexport type CouponMaxAggregate = {\n  __typename?: 'CouponMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CouponMinAggregate = {\n  __typename?: 'CouponMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type CouponSort = {\n  direction: SortDirection;\n  field: CouponSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum CouponSortFields {\n  Id = 'id'\n}\n\nexport type CouponSumAggregate = {\n  __typename?: 'CouponSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type CreateAnnouncement = {\n  description?: InputMaybe<Scalars['String']>;\n  expireAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  startAt?: InputMaybe<Scalars['DateTime']>;\n  title?: InputMaybe<Scalars['String']>;\n  url?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateCarColor = {\n  id?: InputMaybe<Scalars['ID']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateCarModel = {\n  id?: InputMaybe<Scalars['ID']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateComplaintActivity = {\n  comment?: InputMaybe<Scalars['String']>;\n  complaintId?: InputMaybe<Scalars['ID']>;\n  id?: InputMaybe<Scalars['ID']>;\n  type?: InputMaybe<ComplaintActivityType>;\n};\n\nexport type CreateCoupon = {\n  code?: InputMaybe<Scalars['String']>;\n  creditGift?: InputMaybe<Scalars['Float']>;\n  description?: InputMaybe<Scalars['String']>;\n  discountFlat?: InputMaybe<Scalars['Int']>;\n  discountPercent?: InputMaybe<Scalars['Int']>;\n  expireAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  isEnabled?: InputMaybe<Scalars['Boolean']>;\n  isFirstTravelOnly?: InputMaybe<Scalars['Boolean']>;\n  manyTimesUserCanUse?: InputMaybe<Scalars['Int']>;\n  manyUsersCanUse?: InputMaybe<Scalars['Int']>;\n  maximumCost?: InputMaybe<Scalars['Float']>;\n  minimumCost?: InputMaybe<Scalars['Float']>;\n  startAt?: InputMaybe<Scalars['DateTime']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateDriver = {\n  accountNumber?: InputMaybe<Scalars['String']>;\n  address?: InputMaybe<Scalars['String']>;\n  bankName?: InputMaybe<Scalars['String']>;\n  bankRoutingNumber?: InputMaybe<Scalars['String']>;\n  bankSwift?: InputMaybe<Scalars['String']>;\n  carColorId?: InputMaybe<Scalars['ID']>;\n  carId?: InputMaybe<Scalars['ID']>;\n  carPlate?: InputMaybe<Scalars['String']>;\n  carProductionYear?: InputMaybe<Scalars['Int']>;\n  certificateNumber?: InputMaybe<Scalars['String']>;\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  fleetId?: InputMaybe<Scalars['ID']>;\n  gender?: InputMaybe<Gender>;\n  id?: InputMaybe<Scalars['ID']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  lastSeenTimestamp?: InputMaybe<Scalars['DateTime']>;\n  mediaId?: InputMaybe<Scalars['ID']>;\n  mobileNumber?: InputMaybe<Scalars['String']>;\n  rating?: InputMaybe<Scalars['Float']>;\n  registrationTimestamp?: InputMaybe<Scalars['DateTime']>;\n  reviewCount?: InputMaybe<Scalars['Float']>;\n  softRejectionNote?: InputMaybe<Scalars['String']>;\n  status?: InputMaybe<DriverStatus>;\n};\n\nexport type CreateDriverTransaction = {\n  action?: InputMaybe<TransactionAction>;\n  amount?: InputMaybe<Scalars['Float']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  currency?: InputMaybe<Scalars['String']>;\n  deductType?: InputMaybe<DriverDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']>;\n  driverId?: InputMaybe<Scalars['ID']>;\n  operatorId?: InputMaybe<Scalars['ID']>;\n  paymentGatewayId?: InputMaybe<Scalars['Float']>;\n  rechargeType?: InputMaybe<DriverRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']>;\n  requestId?: InputMaybe<Scalars['Float']>;\n  status?: InputMaybe<TransactionStatus>;\n};\n\nexport type CreateFeedbackParameter = {\n  id?: InputMaybe<Scalars['ID']>;\n  isGood?: InputMaybe<Scalars['Boolean']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateFleet = {\n  accountNumber?: InputMaybe<Scalars['String']>;\n  address?: InputMaybe<Scalars['String']>;\n  commissionShareFlat?: InputMaybe<Scalars['Float']>;\n  commissionSharePercent?: InputMaybe<Scalars['Float']>;\n  exclusivityAreas?: InputMaybe<Array<Array<PointInput>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  mobileNumber?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateManyComplaintActivitiesInput = {\n  /** Array of records to create */\n  complaintActivities: Array<CreateComplaintActivity>;\n};\n\nexport type CreateOneAnnouncementInput = {\n  /** The record to create */\n  announcement: CreateAnnouncement;\n};\n\nexport type CreateOneCarColorInput = {\n  /** The record to create */\n  carColor: CreateCarColor;\n};\n\nexport type CreateOneCarModelInput = {\n  /** The record to create */\n  carModel: CreateCarModel;\n};\n\nexport type CreateOneComplaintActivityInput = {\n  /** The record to create */\n  complaintActivity: CreateComplaintActivity;\n};\n\nexport type CreateOneCouponInput = {\n  /** The record to create */\n  coupon: CreateCoupon;\n};\n\nexport type CreateOneDriverInput = {\n  /** The record to create */\n  driver: CreateDriver;\n};\n\nexport type CreateOneDriverTransactionInput = {\n  /** The record to create */\n  driverTransaction: CreateDriverTransaction;\n};\n\nexport type CreateOneFeedbackParameterInput = {\n  /** The record to create */\n  feedbackParameter: CreateFeedbackParameter;\n};\n\nexport type CreateOneFleetInput = {\n  /** The record to create */\n  fleet: CreateFleet;\n};\n\nexport type CreateOneOperatorInput = {\n  /** The record to create */\n  operator: CreateOperatorInput;\n};\n\nexport type CreateOneOperatorRoleInput = {\n  /** The record to create */\n  operatorRole: CreateOperatorRole;\n};\n\nexport type CreateOnePaymentGatewayInput = {\n  /** The record to create */\n  paymentGateway: CreatePaymentGateway;\n};\n\nexport type CreateOneProviderTransactionInput = {\n  /** The record to create */\n  providerTransaction: CreateProviderTransaction;\n};\n\nexport type CreateOneRegionInput = {\n  /** The record to create */\n  region: CreateRegion;\n};\n\nexport type CreateOneRiderAddressInput = {\n  /** The record to create */\n  riderAddress: CreateRiderAddress;\n};\n\nexport type CreateOneRiderInput = {\n  /** The record to create */\n  rider: CreateRider;\n};\n\nexport type CreateOneRiderTransactionInput = {\n  /** The record to create */\n  riderTransaction: CreateRiderTransaction;\n};\n\nexport type CreateOneServiceCategoryInput = {\n  /** The record to create */\n  serviceCategory: CreateServiceCategory;\n};\n\nexport type CreateOneServiceInput = {\n  /** The record to create */\n  service: CreateService;\n};\n\nexport type CreateOperatorInput = {\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  mobileNumber: Scalars['String'];\n  password: Scalars['String'];\n  roleId: Scalars['ID'];\n  userName: Scalars['String'];\n};\n\nexport type CreateOperatorRole = {\n  id?: InputMaybe<Scalars['ID']>;\n  permissions?: InputMaybe<Array<OperatorPermission>>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateOrderInput = {\n  addresses: Array<Scalars['String']>;\n  intervalMinutes: Scalars['Int'];\n  points: Array<PointInput>;\n  riderId: Scalars['ID'];\n  serviceId: Scalars['ID'];\n};\n\nexport type CreatePaymentGateway = {\n  enabled?: InputMaybe<Scalars['Boolean']>;\n  id?: InputMaybe<Scalars['ID']>;\n  mediaId?: InputMaybe<Scalars['Float']>;\n  merchantId?: InputMaybe<Scalars['String']>;\n  privateKey?: InputMaybe<Scalars['String']>;\n  publicKey?: InputMaybe<Scalars['String']>;\n  saltKey?: InputMaybe<Scalars['String']>;\n  title?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<PaymentGatewayType>;\n};\n\nexport type CreateProviderTransaction = {\n  action?: InputMaybe<TransactionAction>;\n  amount?: InputMaybe<Scalars['Float']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  currency?: InputMaybe<Scalars['String']>;\n  deductType?: InputMaybe<ProviderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  operatorId?: InputMaybe<Scalars['ID']>;\n  rechargeType?: InputMaybe<ProviderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']>;\n  requestId?: InputMaybe<Scalars['ID']>;\n};\n\nexport type CreateRegion = {\n  currency?: InputMaybe<Scalars['String']>;\n  enabled?: InputMaybe<Scalars['Boolean']>;\n  id?: InputMaybe<Scalars['ID']>;\n  location?: InputMaybe<Array<Array<PointInput>>>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateRider = {\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  gender?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  mobileNumber?: InputMaybe<Scalars['String']>;\n  registrationTimestamp?: InputMaybe<Scalars['DateTime']>;\n  status?: InputMaybe<RiderStatus>;\n};\n\nexport type CreateRiderAddress = {\n  details?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  location?: InputMaybe<PointInput>;\n  riderId?: InputMaybe<Scalars['ID']>;\n  title?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<RiderAddressType>;\n};\n\nexport type CreateRiderTransaction = {\n  action?: InputMaybe<TransactionAction>;\n  amount?: InputMaybe<Scalars['Float']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  currency?: InputMaybe<Scalars['String']>;\n  deductType?: InputMaybe<RiderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  operatorId?: InputMaybe<Scalars['ID']>;\n  paymentGatewayId?: InputMaybe<Scalars['ID']>;\n  rechargeType?: InputMaybe<RiderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']>;\n  requestId?: InputMaybe<Scalars['ID']>;\n  riderId?: InputMaybe<Scalars['ID']>;\n  status?: InputMaybe<TransactionStatus>;\n};\n\nexport type CreateService = {\n  baseFare?: InputMaybe<Scalars['Float']>;\n  cancellationDriverShare?: InputMaybe<Scalars['Float']>;\n  cancellationTotalFee?: InputMaybe<Scalars['Float']>;\n  categoryId?: InputMaybe<Scalars['ID']>;\n  description?: InputMaybe<Scalars['String']>;\n  distanceMultipliers?: InputMaybe<Array<DistanceMultiplierInput>>;\n  id?: InputMaybe<Scalars['ID']>;\n  maximumDestinationDistance?: InputMaybe<Scalars['Int']>;\n  mediaId?: InputMaybe<Scalars['ID']>;\n  minimumFee?: InputMaybe<Scalars['Float']>;\n  name?: InputMaybe<Scalars['String']>;\n  paymentMethod?: InputMaybe<ServicePaymentMethod>;\n  perHundredMeters?: InputMaybe<Scalars['Float']>;\n  perMinuteDrive?: InputMaybe<Scalars['Float']>;\n  perMinuteWait?: InputMaybe<Scalars['Float']>;\n  personCapacity?: InputMaybe<Scalars['Int']>;\n  prepayPercent?: InputMaybe<Scalars['Float']>;\n  providerShareFlat?: InputMaybe<Scalars['Float']>;\n  providerSharePercent?: InputMaybe<Scalars['Int']>;\n  roundingFactor?: InputMaybe<Scalars['Float']>;\n  searchRadius?: InputMaybe<Scalars['Int']>;\n  timeMultipliers?: InputMaybe<Array<TimeMultiplierInput>>;\n  twoWayAvailable?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type CreateServiceCategory = {\n  id?: InputMaybe<Scalars['ID']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type CurrentConfiguration = {\n  __typename?: 'CurrentConfiguration';\n  adminPanelAPIKey?: Maybe<Scalars['String']>;\n  backendMapsAPIKey?: Maybe<Scalars['String']>;\n  firebaseProjectPrivateKey?: Maybe<Scalars['String']>;\n  purchaseCode?: Maybe<Scalars['String']>;\n};\n\nexport type CursorPaging = {\n  /** Paginate after opaque cursor */\n  after?: InputMaybe<Scalars['ConnectionCursor']>;\n  /** Paginate before opaque cursor */\n  before?: InputMaybe<Scalars['ConnectionCursor']>;\n  /** Paginate first */\n  first?: InputMaybe<Scalars['Int']>;\n  /** Paginate last */\n  last?: InputMaybe<Scalars['Int']>;\n};\n\nexport type DateFieldComparison = {\n  between?: InputMaybe<DateFieldComparisonBetween>;\n  eq?: InputMaybe<Scalars['DateTime']>;\n  gt?: InputMaybe<Scalars['DateTime']>;\n  gte?: InputMaybe<Scalars['DateTime']>;\n  in?: InputMaybe<Array<Scalars['DateTime']>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  lt?: InputMaybe<Scalars['DateTime']>;\n  lte?: InputMaybe<Scalars['DateTime']>;\n  neq?: InputMaybe<Scalars['DateTime']>;\n  notBetween?: InputMaybe<DateFieldComparisonBetween>;\n  notIn?: InputMaybe<Array<Scalars['DateTime']>>;\n};\n\nexport type DateFieldComparisonBetween = {\n  lower: Scalars['DateTime'];\n  upper: Scalars['DateTime'];\n};\n\nexport type DeleteOneAnnouncementInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DeleteOneCarColorInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DeleteOneCarModelInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DeleteOneFeedbackParameterInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DeleteOneRegionInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DeleteOneServiceCategoryInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DeleteOneServiceInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID'];\n};\n\nexport type DistanceMultiplier = {\n  __typename?: 'DistanceMultiplier';\n  distanceFrom: Scalars['Float'];\n  distanceTo: Scalars['Float'];\n  multiply: Scalars['Float'];\n};\n\nexport type DistanceMultiplierInput = {\n  distanceFrom: Scalars['Float'];\n  distanceTo: Scalars['Float'];\n  multiply: Scalars['Float'];\n};\n\nexport type Driver = {\n  __typename?: 'Driver';\n  accountNumber?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  bankName?: Maybe<Scalars['String']>;\n  bankRoutingNumber?: Maybe<Scalars['String']>;\n  bankSwift?: Maybe<Scalars['String']>;\n  carColorId?: Maybe<Scalars['ID']>;\n  carId?: Maybe<Scalars['ID']>;\n  carPlate?: Maybe<Scalars['String']>;\n  carProductionYear?: Maybe<Scalars['Int']>;\n  certificateNumber?: Maybe<Scalars['String']>;\n  documents: Array<Media>;\n  documentsAggregate: Array<DriverDocumentsAggregateResponse>;\n  email?: Maybe<Scalars['String']>;\n  enabledServices: Array<Service>;\n  enabledServicesAggregate: Array<DriverEnabledServicesAggregateResponse>;\n  feedbacks: DriverFeedbacksConnection;\n  feedbacksAggregate: Array<DriverFeedbacksAggregateResponse>;\n  firstName?: Maybe<Scalars['String']>;\n  fleetId?: Maybe<Scalars['ID']>;\n  gender?: Maybe<Gender>;\n  id: Scalars['ID'];\n  lastName?: Maybe<Scalars['String']>;\n  lastSeenTimestamp?: Maybe<Scalars['DateTime']>;\n  media?: Maybe<Media>;\n  mediaId?: Maybe<Scalars['ID']>;\n  mobileNumber: Scalars['String'];\n  orders: DriverOrdersConnection;\n  ordersAggregate: Array<DriverOrdersAggregateResponse>;\n  rating?: Maybe<Scalars['Float']>;\n  registrationTimestamp: Scalars['DateTime'];\n  reviewCount: Scalars['Float'];\n  softRejectionNote?: Maybe<Scalars['String']>;\n  status: DriverStatus;\n  transactions: DriverTransactionsConnection;\n  transactionsAggregate: Array<DriverTransactionsAggregateResponse>;\n  wallets: Array<DriverWallet>;\n  walletsAggregate: Array<DriverWalletsAggregateResponse>;\n};\n\n\nexport type DriverDocumentsArgs = {\n  filter?: InputMaybe<MediaFilter>;\n  sorting?: InputMaybe<Array<MediaSort>>;\n};\n\n\nexport type DriverDocumentsAggregateArgs = {\n  filter?: InputMaybe<MediaAggregateFilter>;\n};\n\n\nexport type DriverEnabledServicesArgs = {\n  filter?: InputMaybe<ServiceFilter>;\n  sorting?: InputMaybe<Array<ServiceSort>>;\n};\n\n\nexport type DriverEnabledServicesAggregateArgs = {\n  filter?: InputMaybe<ServiceAggregateFilter>;\n};\n\n\nexport type DriverFeedbacksArgs = {\n  filter?: InputMaybe<FeedbackFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<FeedbackSort>>;\n};\n\n\nexport type DriverFeedbacksAggregateArgs = {\n  filter?: InputMaybe<FeedbackAggregateFilter>;\n};\n\n\nexport type DriverOrdersArgs = {\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort>>;\n};\n\n\nexport type DriverOrdersAggregateArgs = {\n  filter?: InputMaybe<OrderAggregateFilter>;\n};\n\n\nexport type DriverTransactionsArgs = {\n  filter?: InputMaybe<DriverTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<DriverTransactionSort>>;\n};\n\n\nexport type DriverTransactionsAggregateArgs = {\n  filter?: InputMaybe<DriverTransactionAggregateFilter>;\n};\n\n\nexport type DriverWalletsArgs = {\n  filter?: InputMaybe<DriverWalletFilter>;\n  sorting?: InputMaybe<Array<DriverWalletSort>>;\n};\n\n\nexport type DriverWalletsAggregateArgs = {\n  filter?: InputMaybe<DriverWalletAggregateFilter>;\n};\n\nexport type DriverAggregateFilter = {\n  and?: InputMaybe<Array<DriverAggregateFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  lastName?: InputMaybe<StringFieldComparison>;\n  mobileNumber?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<DriverAggregateFilter>>;\n  status?: InputMaybe<DriverStatusFilterComparison>;\n};\n\nexport type DriverAggregateGroupBy = {\n  __typename?: 'DriverAggregateGroupBy';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n  status?: Maybe<DriverStatus>;\n};\n\nexport type DriverAggregateResponse = {\n  __typename?: 'DriverAggregateResponse';\n  avg?: Maybe<DriverAvgAggregate>;\n  count?: Maybe<DriverCountAggregate>;\n  groupBy?: Maybe<DriverAggregateGroupBy>;\n  max?: Maybe<DriverMaxAggregate>;\n  min?: Maybe<DriverMinAggregate>;\n  sum?: Maybe<DriverSumAggregate>;\n};\n\nexport type DriverAvgAggregate = {\n  __typename?: 'DriverAvgAggregate';\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverConnection = {\n  __typename?: 'DriverConnection';\n  /** Array of nodes. */\n  nodes: Array<Driver>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type DriverCountAggregate = {\n  __typename?: 'DriverCountAggregate';\n  fleetId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  lastName?: Maybe<Scalars['Int']>;\n  mobileNumber?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['Int']>;\n};\n\nexport enum DriverDeductTransactionType {\n  Commission = 'Commission',\n  Correction = 'Correction',\n  Withdraw = 'Withdraw'\n}\n\nexport type DriverDocumentsAggregateGroupBy = {\n  __typename?: 'DriverDocumentsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverDocumentsAggregateResponse = {\n  __typename?: 'DriverDocumentsAggregateResponse';\n  avg?: Maybe<DriverDocumentsAvgAggregate>;\n  count?: Maybe<DriverDocumentsCountAggregate>;\n  groupBy?: Maybe<DriverDocumentsAggregateGroupBy>;\n  max?: Maybe<DriverDocumentsMaxAggregate>;\n  min?: Maybe<DriverDocumentsMinAggregate>;\n  sum?: Maybe<DriverDocumentsSumAggregate>;\n};\n\nexport type DriverDocumentsAvgAggregate = {\n  __typename?: 'DriverDocumentsAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverDocumentsCountAggregate = {\n  __typename?: 'DriverDocumentsCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverDocumentsMaxAggregate = {\n  __typename?: 'DriverDocumentsMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverDocumentsMinAggregate = {\n  __typename?: 'DriverDocumentsMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverDocumentsSumAggregate = {\n  __typename?: 'DriverDocumentsSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverEnabledServicesAggregateGroupBy = {\n  __typename?: 'DriverEnabledServicesAggregateGroupBy';\n  categoryId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverEnabledServicesAggregateResponse = {\n  __typename?: 'DriverEnabledServicesAggregateResponse';\n  avg?: Maybe<DriverEnabledServicesAvgAggregate>;\n  count?: Maybe<DriverEnabledServicesCountAggregate>;\n  groupBy?: Maybe<DriverEnabledServicesAggregateGroupBy>;\n  max?: Maybe<DriverEnabledServicesMaxAggregate>;\n  min?: Maybe<DriverEnabledServicesMinAggregate>;\n  sum?: Maybe<DriverEnabledServicesSumAggregate>;\n};\n\nexport type DriverEnabledServicesAvgAggregate = {\n  __typename?: 'DriverEnabledServicesAvgAggregate';\n  categoryId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverEnabledServicesCountAggregate = {\n  __typename?: 'DriverEnabledServicesCountAggregate';\n  categoryId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverEnabledServicesMaxAggregate = {\n  __typename?: 'DriverEnabledServicesMaxAggregate';\n  categoryId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverEnabledServicesMinAggregate = {\n  __typename?: 'DriverEnabledServicesMinAggregate';\n  categoryId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverEnabledServicesSumAggregate = {\n  __typename?: 'DriverEnabledServicesSumAggregate';\n  categoryId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverFeedbacksAggregateGroupBy = {\n  __typename?: 'DriverFeedbacksAggregateGroupBy';\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverFeedbacksAggregateResponse = {\n  __typename?: 'DriverFeedbacksAggregateResponse';\n  avg?: Maybe<DriverFeedbacksAvgAggregate>;\n  count?: Maybe<DriverFeedbacksCountAggregate>;\n  groupBy?: Maybe<DriverFeedbacksAggregateGroupBy>;\n  max?: Maybe<DriverFeedbacksMaxAggregate>;\n  min?: Maybe<DriverFeedbacksMinAggregate>;\n  sum?: Maybe<DriverFeedbacksSumAggregate>;\n};\n\nexport type DriverFeedbacksAvgAggregate = {\n  __typename?: 'DriverFeedbacksAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverFeedbacksConnection = {\n  __typename?: 'DriverFeedbacksConnection';\n  /** Array of nodes. */\n  nodes: Array<Feedback>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type DriverFeedbacksCountAggregate = {\n  __typename?: 'DriverFeedbacksCountAggregate';\n  driverId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverFeedbacksMaxAggregate = {\n  __typename?: 'DriverFeedbacksMaxAggregate';\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverFeedbacksMinAggregate = {\n  __typename?: 'DriverFeedbacksMinAggregate';\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverFeedbacksSumAggregate = {\n  __typename?: 'DriverFeedbacksSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverFilter = {\n  and?: InputMaybe<Array<DriverFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  lastName?: InputMaybe<StringFieldComparison>;\n  mobileNumber?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<DriverFilter>>;\n  status?: InputMaybe<DriverStatusFilterComparison>;\n};\n\nexport type DriverMaxAggregate = {\n  __typename?: 'DriverMaxAggregate';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n  status?: Maybe<DriverStatus>;\n};\n\nexport type DriverMinAggregate = {\n  __typename?: 'DriverMinAggregate';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n  status?: Maybe<DriverStatus>;\n};\n\nexport type DriverOrdersAggregateGroupBy = {\n  __typename?: 'DriverOrdersAggregateGroupBy';\n  createdOn?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type DriverOrdersAggregateResponse = {\n  __typename?: 'DriverOrdersAggregateResponse';\n  avg?: Maybe<DriverOrdersAvgAggregate>;\n  count?: Maybe<DriverOrdersCountAggregate>;\n  groupBy?: Maybe<DriverOrdersAggregateGroupBy>;\n  max?: Maybe<DriverOrdersMaxAggregate>;\n  min?: Maybe<DriverOrdersMinAggregate>;\n  sum?: Maybe<DriverOrdersSumAggregate>;\n};\n\nexport type DriverOrdersAvgAggregate = {\n  __typename?: 'DriverOrdersAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverOrdersConnection = {\n  __typename?: 'DriverOrdersConnection';\n  /** Array of nodes. */\n  nodes: Array<Order>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type DriverOrdersCountAggregate = {\n  __typename?: 'DriverOrdersCountAggregate';\n  createdOn?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  riderId?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverOrdersMaxAggregate = {\n  __typename?: 'DriverOrdersMaxAggregate';\n  createdOn?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type DriverOrdersMinAggregate = {\n  __typename?: 'DriverOrdersMinAggregate';\n  createdOn?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type DriverOrdersSumAggregate = {\n  __typename?: 'DriverOrdersSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport enum DriverRechargeTransactionType {\n  BankTransfer = 'BankTransfer',\n  Gift = 'Gift',\n  InAppPayment = 'InAppPayment',\n  OrderFee = 'OrderFee'\n}\n\nexport type DriverSort = {\n  direction: SortDirection;\n  field: DriverSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DriverSortFields {\n  FleetId = 'fleetId',\n  Id = 'id',\n  LastName = 'lastName',\n  MobileNumber = 'mobileNumber',\n  Status = 'status'\n}\n\nexport enum DriverStatus {\n  Blocked = 'Blocked',\n  HardReject = 'HardReject',\n  InService = 'InService',\n  Offline = 'Offline',\n  Online = 'Online',\n  PendingApproval = 'PendingApproval',\n  SoftReject = 'SoftReject',\n  WaitingDocuments = 'WaitingDocuments'\n}\n\nexport type DriverStatusFilterComparison = {\n  eq?: InputMaybe<DriverStatus>;\n  gt?: InputMaybe<DriverStatus>;\n  gte?: InputMaybe<DriverStatus>;\n  iLike?: InputMaybe<DriverStatus>;\n  in?: InputMaybe<Array<DriverStatus>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  like?: InputMaybe<DriverStatus>;\n  lt?: InputMaybe<DriverStatus>;\n  lte?: InputMaybe<DriverStatus>;\n  neq?: InputMaybe<DriverStatus>;\n  notILike?: InputMaybe<DriverStatus>;\n  notIn?: InputMaybe<Array<DriverStatus>>;\n  notLike?: InputMaybe<DriverStatus>;\n};\n\nexport type DriverSumAggregate = {\n  __typename?: 'DriverSumAggregate';\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverTransaction = {\n  __typename?: 'DriverTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  currency: Scalars['String'];\n  deductType?: Maybe<DriverDeductTransactionType>;\n  description?: Maybe<Scalars['String']>;\n  driverId: Scalars['ID'];\n  operator?: Maybe<Operator>;\n  operatorId?: Maybe<Scalars['ID']>;\n  paymentGatewayId?: Maybe<Scalars['Float']>;\n  rechargeType?: Maybe<DriverRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']>;\n  requestId?: Maybe<Scalars['Float']>;\n  status: TransactionStatus;\n};\n\nexport type DriverTransactionAggregateFilter = {\n  and?: InputMaybe<Array<DriverTransactionAggregateFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverTransactionAggregateFilter>>;\n};\n\nexport type DriverTransactionAggregateGroupBy = {\n  __typename?: 'DriverTransactionAggregateGroupBy';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverTransactionAvgAggregate = {\n  __typename?: 'DriverTransactionAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverTransactionConnection = {\n  __typename?: 'DriverTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type DriverTransactionCountAggregate = {\n  __typename?: 'DriverTransactionCountAggregate';\n  createdAt?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverTransactionFilter = {\n  and?: InputMaybe<Array<DriverTransactionFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverTransactionFilter>>;\n};\n\nexport type DriverTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  currency: Scalars['String'];\n  deductType?: InputMaybe<DriverDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']>;\n  driverId: Scalars['ID'];\n  rechargeType?: InputMaybe<DriverRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']>;\n};\n\nexport type DriverTransactionMaxAggregate = {\n  __typename?: 'DriverTransactionMaxAggregate';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverTransactionMinAggregate = {\n  __typename?: 'DriverTransactionMinAggregate';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverTransactionSort = {\n  direction: SortDirection;\n  field: DriverTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DriverTransactionSortFields {\n  CreatedAt = 'createdAt',\n  DriverId = 'driverId'\n}\n\nexport type DriverTransactionSumAggregate = {\n  __typename?: 'DriverTransactionSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverTransactionsAggregateGroupBy = {\n  __typename?: 'DriverTransactionsAggregateGroupBy';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverTransactionsAggregateResponse = {\n  __typename?: 'DriverTransactionsAggregateResponse';\n  avg?: Maybe<DriverTransactionsAvgAggregate>;\n  count?: Maybe<DriverTransactionsCountAggregate>;\n  groupBy?: Maybe<DriverTransactionsAggregateGroupBy>;\n  max?: Maybe<DriverTransactionsMaxAggregate>;\n  min?: Maybe<DriverTransactionsMinAggregate>;\n  sum?: Maybe<DriverTransactionsSumAggregate>;\n};\n\nexport type DriverTransactionsAvgAggregate = {\n  __typename?: 'DriverTransactionsAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverTransactionsConnection = {\n  __typename?: 'DriverTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type DriverTransactionsCountAggregate = {\n  __typename?: 'DriverTransactionsCountAggregate';\n  createdAt?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverTransactionsMaxAggregate = {\n  __typename?: 'DriverTransactionsMaxAggregate';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverTransactionsMinAggregate = {\n  __typename?: 'DriverTransactionsMinAggregate';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverTransactionsSumAggregate = {\n  __typename?: 'DriverTransactionsSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverWallet = {\n  __typename?: 'DriverWallet';\n  balance: Scalars['Float'];\n  currency: Scalars['String'];\n  driver: Driver;\n  driverId: Scalars['ID'];\n  id: Scalars['ID'];\n};\n\nexport type DriverWalletAggregateFilter = {\n  and?: InputMaybe<Array<DriverWalletAggregateFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverWalletAggregateFilter>>;\n};\n\nexport type DriverWalletAggregateGroupBy = {\n  __typename?: 'DriverWalletAggregateGroupBy';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverWalletAvgAggregate = {\n  __typename?: 'DriverWalletAvgAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverWalletConnection = {\n  __typename?: 'DriverWalletConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type DriverWalletCountAggregate = {\n  __typename?: 'DriverWalletCountAggregate';\n  balance?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverWalletFilter = {\n  and?: InputMaybe<Array<DriverWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverWalletFilter>>;\n};\n\nexport type DriverWalletMaxAggregate = {\n  __typename?: 'DriverWalletMaxAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverWalletMinAggregate = {\n  __typename?: 'DriverWalletMinAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverWalletSort = {\n  direction: SortDirection;\n  field: DriverWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DriverWalletSortFields {\n  Balance = 'balance',\n  Currency = 'currency',\n  DriverId = 'driverId',\n  Id = 'id'\n}\n\nexport type DriverWalletSumAggregate = {\n  __typename?: 'DriverWalletSumAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverWalletsAggregateGroupBy = {\n  __typename?: 'DriverWalletsAggregateGroupBy';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverWalletsAggregateResponse = {\n  __typename?: 'DriverWalletsAggregateResponse';\n  avg?: Maybe<DriverWalletsAvgAggregate>;\n  count?: Maybe<DriverWalletsCountAggregate>;\n  groupBy?: Maybe<DriverWalletsAggregateGroupBy>;\n  max?: Maybe<DriverWalletsMaxAggregate>;\n  min?: Maybe<DriverWalletsMinAggregate>;\n  sum?: Maybe<DriverWalletsSumAggregate>;\n};\n\nexport type DriverWalletsAvgAggregate = {\n  __typename?: 'DriverWalletsAvgAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type DriverWalletsCountAggregate = {\n  __typename?: 'DriverWalletsCountAggregate';\n  balance?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type DriverWalletsMaxAggregate = {\n  __typename?: 'DriverWalletsMaxAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverWalletsMinAggregate = {\n  __typename?: 'DriverWalletsMinAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DriverWalletsSumAggregate = {\n  __typename?: 'DriverWalletsSumAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ExportArgs = {\n  filters?: InputMaybe<Array<ExportFilterArg>>;\n  relations?: InputMaybe<Array<Scalars['String']>>;\n  sort?: InputMaybe<ExportSortArg>;\n  table: ExportTable;\n  type: ExportType;\n};\n\nexport type ExportFilterArg = {\n  field: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type ExportResult = {\n  __typename?: 'ExportResult';\n  url: Scalars['String'];\n};\n\nexport type ExportSortArg = {\n  direction: SortDirection;\n  property: Scalars['String'];\n};\n\nexport enum ExportTable {\n  DriverWallet = 'DriverWallet',\n  FleetWallet = 'FleetWallet',\n  ProviderWallet = 'ProviderWallet',\n  RiderWallet = 'RiderWallet'\n}\n\nexport enum ExportType {\n  Csv = 'CSV'\n}\n\nexport type Feedback = {\n  __typename?: 'Feedback';\n  description?: Maybe<Scalars['String']>;\n  driverId: Scalars['ID'];\n  id: Scalars['ID'];\n  parameters: Array<FeedbackParameter>;\n  requestId: Scalars['ID'];\n  reviewTimestamp: Scalars['DateTime'];\n  score: Scalars['Int'];\n};\n\n\nexport type FeedbackParametersArgs = {\n  filter?: InputMaybe<FeedbackParameterFilter>;\n  sorting?: InputMaybe<Array<FeedbackParameterSort>>;\n};\n\nexport type FeedbackAggregateFilter = {\n  and?: InputMaybe<Array<FeedbackAggregateFilter>>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FeedbackAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FeedbackAggregateGroupBy = {\n  __typename?: 'FeedbackAggregateGroupBy';\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type FeedbackAvgAggregate = {\n  __typename?: 'FeedbackAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type FeedbackConnection = {\n  __typename?: 'FeedbackConnection';\n  /** Array of nodes. */\n  nodes: Array<Feedback>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type FeedbackCountAggregate = {\n  __typename?: 'FeedbackCountAggregate';\n  driverId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n};\n\nexport type FeedbackFilter = {\n  and?: InputMaybe<Array<FeedbackFilter>>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FeedbackFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FeedbackMaxAggregate = {\n  __typename?: 'FeedbackMaxAggregate';\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type FeedbackMinAggregate = {\n  __typename?: 'FeedbackMinAggregate';\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type FeedbackParameter = {\n  __typename?: 'FeedbackParameter';\n  id: Scalars['ID'];\n  isGood: Scalars['Boolean'];\n  title: Scalars['String'];\n};\n\nexport type FeedbackParameterAggregateGroupBy = {\n  __typename?: 'FeedbackParameterAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type FeedbackParameterAvgAggregate = {\n  __typename?: 'FeedbackParameterAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type FeedbackParameterCountAggregate = {\n  __typename?: 'FeedbackParameterCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type FeedbackParameterDeleteResponse = {\n  __typename?: 'FeedbackParameterDeleteResponse';\n  id?: Maybe<Scalars['ID']>;\n  isGood?: Maybe<Scalars['Boolean']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type FeedbackParameterFilter = {\n  and?: InputMaybe<Array<FeedbackParameterFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FeedbackParameterFilter>>;\n};\n\nexport type FeedbackParameterMaxAggregate = {\n  __typename?: 'FeedbackParameterMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type FeedbackParameterMinAggregate = {\n  __typename?: 'FeedbackParameterMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type FeedbackParameterSort = {\n  direction: SortDirection;\n  field: FeedbackParameterSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FeedbackParameterSortFields {\n  Id = 'id'\n}\n\nexport type FeedbackParameterSumAggregate = {\n  __typename?: 'FeedbackParameterSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type FeedbackSort = {\n  direction: SortDirection;\n  field: FeedbackSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FeedbackSortFields {\n  DriverId = 'driverId',\n  Id = 'id',\n  RequestId = 'requestId'\n}\n\nexport type FeedbackSumAggregate = {\n  __typename?: 'FeedbackSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type Fleet = {\n  __typename?: 'Fleet';\n  accountNumber: Scalars['String'];\n  address?: Maybe<Scalars['String']>;\n  commissionShareFlat: Scalars['Float'];\n  commissionSharePercent: Scalars['Float'];\n  exclusivityAreas?: Maybe<Array<Array<Point>>>;\n  id: Scalars['ID'];\n  mobileNumber: Scalars['String'];\n  name: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  transactions: FleetTransactionsConnection;\n  wallets: Array<FleetWallet>;\n};\n\n\nexport type FleetTransactionsArgs = {\n  filter?: InputMaybe<FleetTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<FleetTransactionSort>>;\n};\n\n\nexport type FleetWalletsArgs = {\n  filter?: InputMaybe<FleetWalletFilter>;\n  sorting?: InputMaybe<Array<FleetWalletSort>>;\n};\n\nexport type FleetAggregateGroupBy = {\n  __typename?: 'FleetAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FleetAvgAggregate = {\n  __typename?: 'FleetAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type FleetConnection = {\n  __typename?: 'FleetConnection';\n  /** Array of nodes. */\n  nodes: Array<Fleet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type FleetCountAggregate = {\n  __typename?: 'FleetCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['Int']>;\n};\n\nexport type FleetFilter = {\n  and?: InputMaybe<Array<FleetFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  name?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<FleetFilter>>;\n};\n\nexport type FleetMaxAggregate = {\n  __typename?: 'FleetMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FleetMinAggregate = {\n  __typename?: 'FleetMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FleetSort = {\n  direction: SortDirection;\n  field: FleetSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FleetSortFields {\n  Id = 'id',\n  Name = 'name'\n}\n\nexport type FleetSumAggregate = {\n  __typename?: 'FleetSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type FleetTransaction = {\n  __typename?: 'FleetTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  currency: Scalars['String'];\n  deductType?: Maybe<ProviderDeductTransactionType>;\n  description?: Maybe<Scalars['String']>;\n  fleetId: Scalars['ID'];\n  id: Scalars['ID'];\n  operator?: Maybe<Operator>;\n  operatorId?: Maybe<Scalars['ID']>;\n  rechargeType?: Maybe<ProviderRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']>;\n  requestId?: Maybe<Scalars['ID']>;\n  transactionTimestamp: Scalars['DateTime'];\n};\n\nexport type FleetTransactionAggregateFilter = {\n  and?: InputMaybe<Array<FleetTransactionAggregateFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FleetTransactionAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FleetTransactionAggregateGroupBy = {\n  __typename?: 'FleetTransactionAggregateGroupBy';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type FleetTransactionAvgAggregate = {\n  __typename?: 'FleetTransactionAvgAggregate';\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type FleetTransactionConnection = {\n  __typename?: 'FleetTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<FleetTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type FleetTransactionCountAggregate = {\n  __typename?: 'FleetTransactionCountAggregate';\n  fleetId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  operatorId?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n};\n\nexport type FleetTransactionFilter = {\n  and?: InputMaybe<Array<FleetTransactionFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FleetTransactionFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FleetTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  currency: Scalars['String'];\n  deductType?: InputMaybe<ProviderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']>;\n  fleetId: Scalars['ID'];\n  rechargeType?: InputMaybe<ProviderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']>;\n};\n\nexport type FleetTransactionMaxAggregate = {\n  __typename?: 'FleetTransactionMaxAggregate';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type FleetTransactionMinAggregate = {\n  __typename?: 'FleetTransactionMinAggregate';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type FleetTransactionSort = {\n  direction: SortDirection;\n  field: FleetTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FleetTransactionSortFields {\n  FleetId = 'fleetId',\n  Id = 'id',\n  OperatorId = 'operatorId',\n  RequestId = 'requestId'\n}\n\nexport type FleetTransactionSumAggregate = {\n  __typename?: 'FleetTransactionSumAggregate';\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type FleetTransactionsConnection = {\n  __typename?: 'FleetTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<FleetTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type FleetWallet = {\n  __typename?: 'FleetWallet';\n  balance: Scalars['Float'];\n  currency: Scalars['String'];\n  fleet: Fleet;\n  fleetId: Scalars['ID'];\n  id: Scalars['ID'];\n};\n\nexport type FleetWalletAggregateGroupBy = {\n  __typename?: 'FleetWalletAggregateGroupBy';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type FleetWalletAvgAggregate = {\n  __typename?: 'FleetWalletAvgAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type FleetWalletConnection = {\n  __typename?: 'FleetWalletConnection';\n  /** Array of nodes. */\n  nodes: Array<FleetWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type FleetWalletCountAggregate = {\n  __typename?: 'FleetWalletCountAggregate';\n  balance?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Scalars['Int']>;\n  fleetId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type FleetWalletFilter = {\n  and?: InputMaybe<Array<FleetWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FleetWalletFilter>>;\n};\n\nexport type FleetWalletMaxAggregate = {\n  __typename?: 'FleetWalletMaxAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type FleetWalletMinAggregate = {\n  __typename?: 'FleetWalletMinAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type FleetWalletSort = {\n  direction: SortDirection;\n  field: FleetWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FleetWalletSortFields {\n  Balance = 'balance',\n  Currency = 'currency',\n  FleetId = 'fleetId',\n  Id = 'id'\n}\n\nexport type FleetWalletSumAggregate = {\n  __typename?: 'FleetWalletSumAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type FloatFieldComparison = {\n  between?: InputMaybe<FloatFieldComparisonBetween>;\n  eq?: InputMaybe<Scalars['Float']>;\n  gt?: InputMaybe<Scalars['Float']>;\n  gte?: InputMaybe<Scalars['Float']>;\n  in?: InputMaybe<Array<Scalars['Float']>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  lt?: InputMaybe<Scalars['Float']>;\n  lte?: InputMaybe<Scalars['Float']>;\n  neq?: InputMaybe<Scalars['Float']>;\n  notBetween?: InputMaybe<FloatFieldComparisonBetween>;\n  notIn?: InputMaybe<Array<Scalars['Float']>>;\n};\n\nexport type FloatFieldComparisonBetween = {\n  lower: Scalars['Float'];\n  upper: Scalars['Float'];\n};\n\nexport enum Gender {\n  Female = 'Female',\n  Male = 'Male',\n  Unknown = 'Unknown'\n}\n\nexport type IdFilterComparison = {\n  eq?: InputMaybe<Scalars['ID']>;\n  gt?: InputMaybe<Scalars['ID']>;\n  gte?: InputMaybe<Scalars['ID']>;\n  iLike?: InputMaybe<Scalars['ID']>;\n  in?: InputMaybe<Array<Scalars['ID']>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  like?: InputMaybe<Scalars['ID']>;\n  lt?: InputMaybe<Scalars['ID']>;\n  lte?: InputMaybe<Scalars['ID']>;\n  neq?: InputMaybe<Scalars['ID']>;\n  notILike?: InputMaybe<Scalars['ID']>;\n  notIn?: InputMaybe<Array<Scalars['ID']>>;\n  notLike?: InputMaybe<Scalars['ID']>;\n};\n\nexport type IncomeResultItem = {\n  __typename?: 'IncomeResultItem';\n  currency: Scalars['String'];\n  sum: Scalars['Float'];\n  time: Scalars['String'];\n};\n\nexport type IncomeResults = {\n  __typename?: 'IncomeResults';\n  items: Array<IncomeResultItem>;\n};\n\nexport type Media = {\n  __typename?: 'Media';\n  address: Scalars['String'];\n  base64?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n};\n\nexport type MediaAggregateFilter = {\n  and?: InputMaybe<Array<MediaAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<MediaAggregateFilter>>;\n};\n\nexport type MediaAggregateGroupBy = {\n  __typename?: 'MediaAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type MediaAvgAggregate = {\n  __typename?: 'MediaAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type MediaCountAggregate = {\n  __typename?: 'MediaCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type MediaEdge = {\n  __typename?: 'MediaEdge';\n  /** Cursor for this node. */\n  cursor: Scalars['ConnectionCursor'];\n  /** The node containing the Media */\n  node: Media;\n};\n\nexport type MediaFilter = {\n  and?: InputMaybe<Array<MediaFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<MediaFilter>>;\n};\n\nexport type MediaMaxAggregate = {\n  __typename?: 'MediaMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type MediaMinAggregate = {\n  __typename?: 'MediaMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type MediaSort = {\n  direction: SortDirection;\n  field: MediaSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum MediaSortFields {\n  Id = 'id'\n}\n\nexport type MediaSumAggregate = {\n  __typename?: 'MediaSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport enum MessageStatus {\n  Delivered = 'Delivered',\n  Seen = 'Seen',\n  Sent = 'Sent'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addActivitiesToComplaint: Complaint;\n  addAddressesToRider: Rider;\n  addAllowedServicesToCoupon: Coupon;\n  addComplaintsToOrder: Order;\n  addConversationsToOrder: Order;\n  addDocumentsToDriver: Driver;\n  addDriverTransactionsToOrder: Order;\n  addEnabledServicesToDriver: Driver;\n  addFeedbacksToDriver: Driver;\n  addFleetTransactionsToOrder: Order;\n  addOrdersToDriver: Driver;\n  addOrdersToRider: Rider;\n  addParametersToFeedback: Feedback;\n  addProviderTransactionsToOrder: Order;\n  addRegionsToService: Service;\n  addRiderTransactionsToOrder: Order;\n  addServicesToServiceCategory: ServiceCategory;\n  addTransactionsToDriver: Driver;\n  addTransactionsToFleet: Fleet;\n  addTransactionsToRider: Rider;\n  addWalletsToDriver: Driver;\n  addWalletsToFleet: Fleet;\n  addWalletsToRider: Rider;\n  assignDriverToOrder: Order;\n  cancelOrder: Order;\n  createDriverTransaction: DriverWallet;\n  createFleetTransaction: FleetWallet;\n  createManyComplaintActivities: Array<ComplaintActivity>;\n  createOneAnnouncement: Announcement;\n  createOneCarColor: CarColor;\n  createOneCarModel: CarModel;\n  createOneComplaintActivity: ComplaintActivity;\n  createOneCoupon: Coupon;\n  createOneDriver: Driver;\n  createOneDriverTransaction: DriverTransaction;\n  createOneFeedbackParameter: FeedbackParameter;\n  createOneFleet: Fleet;\n  createOneOperator: Operator;\n  createOneOperatorRole: OperatorRole;\n  createOnePaymentGateway: PaymentGateway;\n  createOneProviderTransaction: ProviderTransaction;\n  createOneRegion: Region;\n  createOneRider: Rider;\n  createOneRiderAddress: RiderAddress;\n  createOneRiderTransaction: RiderTransaction;\n  createOneService: Service;\n  createOneServiceCategory: ServiceCategory;\n  createOrder: Order;\n  createRiderTransaction: RiderWallet;\n  deleteOneAnnouncement: AnnouncementDeleteResponse;\n  deleteOneCarColor: CarColorDeleteResponse;\n  deleteOneCarModel: CarModelDeleteResponse;\n  deleteOneFeedbackParameter: FeedbackParameterDeleteResponse;\n  deleteOneRegion: RegionDeleteResponse;\n  deleteOneService: ServiceDeleteResponse;\n  deleteOneServiceCategory: ServiceCategoryDeleteResponse;\n  disablePreviousServer: UpdateConfigResult;\n  removeActivitiesFromComplaint: Complaint;\n  removeActorFromComplaintActivity: ComplaintActivity;\n  removeAddressesFromRider: Rider;\n  removeAllowedServicesFromCoupon: Coupon;\n  removeAssignedToFromComplaintActivity: ComplaintActivity;\n  removeComplaintsFromOrder: Order;\n  removeConversationsFromOrder: Order;\n  removeCouponFromOrder: Order;\n  removeDocumentsFromDriver: Driver;\n  removeDriverFromDriverWallet: DriverWallet;\n  removeDriverFromOrder: Order;\n  removeDriverTransactionsFromOrder: Order;\n  removeEnabledServicesFromDriver: Driver;\n  removeFeedbacksFromDriver: Driver;\n  removeFleetFromFleetWallet: FleetWallet;\n  removeFleetTransactionsFromOrder: Order;\n  removeMediaFromDriver: Driver;\n  removeMediaFromPaymentGateway: PaymentGateway;\n  removeMediaFromRider: Rider;\n  removeMediaFromService: Service;\n  removeOperatorFromDriverTransaction: DriverTransaction;\n  removeOperatorFromFleetTransaction: FleetTransaction;\n  removeOperatorFromRiderTransaction: RiderTransaction;\n  removeOptionsFromService: Service;\n  removeOrderFromComplaint: Complaint;\n  removeOrdersFromDriver: Driver;\n  removeOrdersFromRider: Rider;\n  removeParametersFromFeedback: Feedback;\n  removePaymentGatewayFromRiderTransaction: RiderTransaction;\n  removeProviderTransactionsFromOrder: Order;\n  removeRegionsFromService: Service;\n  removeRiderFromOrder: Order;\n  removeRiderFromRiderTransaction: RiderTransaction;\n  removeRiderFromRiderWallet: RiderWallet;\n  removeRiderTransactionsFromOrder: Order;\n  removeServiceFromOrder: Order;\n  removeServicesFromServiceCategory: ServiceCategory;\n  removeTransactionsFromDriver: Driver;\n  removeTransactionsFromFleet: Fleet;\n  removeTransactionsFromRider: Rider;\n  removeWalletsFromDriver: Driver;\n  removeWalletsFromFleet: Fleet;\n  removeWalletsFromRider: Rider;\n  setActivitiesOnComplaint: Complaint;\n  setActorOnComplaintActivity: ComplaintActivity;\n  setAddressesOnRider: Rider;\n  setAllowedServicesOnCoupon: Coupon;\n  setAssignedToOnComplaintActivity: ComplaintActivity;\n  setComplaintsOnOrder: Order;\n  setConversationsOnOrder: Order;\n  setCouponOnOrder: Order;\n  setDocumentsOnDriver: Driver;\n  setDriverOnDriverWallet: DriverWallet;\n  setDriverOnOrder: Order;\n  setDriverTransactionsOnOrder: Order;\n  setEnabledServicesOnDriver: Driver;\n  setFeedbacksOnDriver: Driver;\n  setFleetOnFleetWallet: FleetWallet;\n  setFleetTransactionsOnOrder: Order;\n  setMediaOnDriver: Driver;\n  setMediaOnPaymentGateway: PaymentGateway;\n  setMediaOnRider: Rider;\n  setMediaOnService: Service;\n  setOperatorOnDriverTransaction: DriverTransaction;\n  setOperatorOnFleetTransaction: FleetTransaction;\n  setOperatorOnRiderTransaction: RiderTransaction;\n  setOptionsOnService: Service;\n  setOrderOnComplaint: Complaint;\n  setOrdersOnDriver: Driver;\n  setOrdersOnRider: Rider;\n  setParametersOnFeedback: Feedback;\n  setPaymentGatewayOnRiderTransaction: RiderTransaction;\n  setProviderTransactionsOnOrder: Order;\n  setRegionsOnService: Service;\n  setRiderOnOrder: Order;\n  setRiderOnRiderTransaction: RiderTransaction;\n  setRiderOnRiderWallet: RiderWallet;\n  setRiderTransactionsOnOrder: Order;\n  setServiceOnOrder: Order;\n  setServicesOnServiceCategory: ServiceCategory;\n  setTransactionsOnDriver: Driver;\n  setTransactionsOnFleet: Fleet;\n  setTransactionsOnRider: Rider;\n  setWalletsOnDriver: Driver;\n  setWalletsOnFleet: Fleet;\n  setWalletsOnRider: Rider;\n  updateFirebase: UpdateConfigResult;\n  updateManyRiderAddresses: UpdateManyResponse;\n  updateMapsAPIKey: UpdateConfigResult;\n  updateOneAnnouncement: Announcement;\n  updateOneCarColor: CarColor;\n  updateOneCarModel: CarModel;\n  updateOneComplaint: Complaint;\n  updateOneCoupon: Coupon;\n  updateOneDriver: Driver;\n  updateOneFeedback: Feedback;\n  updateOneFeedbackParameter: FeedbackParameter;\n  updateOneFleet: Fleet;\n  updateOneOperator: Operator;\n  updateOneOperatorRole: OperatorRole;\n  updateOnePaymentGateway: PaymentGateway;\n  updateOneRegion: Region;\n  updateOneRider: Rider;\n  updateOneRiderAddress: RiderAddress;\n  updateOneService: Service;\n  updateOneServiceCategory: ServiceCategory;\n  updatePassword: Operator;\n  updatePurchaseCode: UpdatePurchaseCodeResult;\n};\n\n\nexport type MutationAddActivitiesToComplaintArgs = {\n  input: AddActivitiesToComplaintInput;\n};\n\n\nexport type MutationAddAddressesToRiderArgs = {\n  input: AddAddressesToRiderInput;\n};\n\n\nexport type MutationAddAllowedServicesToCouponArgs = {\n  input: AddAllowedServicesToCouponInput;\n};\n\n\nexport type MutationAddComplaintsToOrderArgs = {\n  input: AddComplaintsToOrderInput;\n};\n\n\nexport type MutationAddConversationsToOrderArgs = {\n  input: AddConversationsToOrderInput;\n};\n\n\nexport type MutationAddDocumentsToDriverArgs = {\n  input: AddDocumentsToDriverInput;\n};\n\n\nexport type MutationAddDriverTransactionsToOrderArgs = {\n  input: AddDriverTransactionsToOrderInput;\n};\n\n\nexport type MutationAddEnabledServicesToDriverArgs = {\n  input: AddEnabledServicesToDriverInput;\n};\n\n\nexport type MutationAddFeedbacksToDriverArgs = {\n  input: AddFeedbacksToDriverInput;\n};\n\n\nexport type MutationAddFleetTransactionsToOrderArgs = {\n  input: AddFleetTransactionsToOrderInput;\n};\n\n\nexport type MutationAddOrdersToDriverArgs = {\n  input: AddOrdersToDriverInput;\n};\n\n\nexport type MutationAddOrdersToRiderArgs = {\n  input: AddOrdersToRiderInput;\n};\n\n\nexport type MutationAddParametersToFeedbackArgs = {\n  input: AddParametersToFeedbackInput;\n};\n\n\nexport type MutationAddProviderTransactionsToOrderArgs = {\n  input: AddProviderTransactionsToOrderInput;\n};\n\n\nexport type MutationAddRegionsToServiceArgs = {\n  input: AddRegionsToServiceInput;\n};\n\n\nexport type MutationAddRiderTransactionsToOrderArgs = {\n  input: AddRiderTransactionsToOrderInput;\n};\n\n\nexport type MutationAddServicesToServiceCategoryArgs = {\n  input: AddServicesToServiceCategoryInput;\n};\n\n\nexport type MutationAddTransactionsToDriverArgs = {\n  input: AddTransactionsToDriverInput;\n};\n\n\nexport type MutationAddTransactionsToFleetArgs = {\n  input: AddTransactionsToFleetInput;\n};\n\n\nexport type MutationAddTransactionsToRiderArgs = {\n  input: AddTransactionsToRiderInput;\n};\n\n\nexport type MutationAddWalletsToDriverArgs = {\n  input: AddWalletsToDriverInput;\n};\n\n\nexport type MutationAddWalletsToFleetArgs = {\n  input: AddWalletsToFleetInput;\n};\n\n\nexport type MutationAddWalletsToRiderArgs = {\n  input: AddWalletsToRiderInput;\n};\n\n\nexport type MutationAssignDriverToOrderArgs = {\n  driverId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type MutationCancelOrderArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type MutationCreateDriverTransactionArgs = {\n  input: DriverTransactionInput;\n};\n\n\nexport type MutationCreateFleetTransactionArgs = {\n  input: FleetTransactionInput;\n};\n\n\nexport type MutationCreateManyComplaintActivitiesArgs = {\n  input: CreateManyComplaintActivitiesInput;\n};\n\n\nexport type MutationCreateOneAnnouncementArgs = {\n  input: CreateOneAnnouncementInput;\n};\n\n\nexport type MutationCreateOneCarColorArgs = {\n  input: CreateOneCarColorInput;\n};\n\n\nexport type MutationCreateOneCarModelArgs = {\n  input: CreateOneCarModelInput;\n};\n\n\nexport type MutationCreateOneComplaintActivityArgs = {\n  input: CreateOneComplaintActivityInput;\n};\n\n\nexport type MutationCreateOneCouponArgs = {\n  input: CreateOneCouponInput;\n};\n\n\nexport type MutationCreateOneDriverArgs = {\n  input: CreateOneDriverInput;\n};\n\n\nexport type MutationCreateOneDriverTransactionArgs = {\n  input: CreateOneDriverTransactionInput;\n};\n\n\nexport type MutationCreateOneFeedbackParameterArgs = {\n  input: CreateOneFeedbackParameterInput;\n};\n\n\nexport type MutationCreateOneFleetArgs = {\n  input: CreateOneFleetInput;\n};\n\n\nexport type MutationCreateOneOperatorArgs = {\n  input: CreateOneOperatorInput;\n};\n\n\nexport type MutationCreateOneOperatorRoleArgs = {\n  input: CreateOneOperatorRoleInput;\n};\n\n\nexport type MutationCreateOnePaymentGatewayArgs = {\n  input: CreateOnePaymentGatewayInput;\n};\n\n\nexport type MutationCreateOneProviderTransactionArgs = {\n  input: CreateOneProviderTransactionInput;\n};\n\n\nexport type MutationCreateOneRegionArgs = {\n  input: CreateOneRegionInput;\n};\n\n\nexport type MutationCreateOneRiderArgs = {\n  input: CreateOneRiderInput;\n};\n\n\nexport type MutationCreateOneRiderAddressArgs = {\n  input: CreateOneRiderAddressInput;\n};\n\n\nexport type MutationCreateOneRiderTransactionArgs = {\n  input: CreateOneRiderTransactionInput;\n};\n\n\nexport type MutationCreateOneServiceArgs = {\n  input: CreateOneServiceInput;\n};\n\n\nexport type MutationCreateOneServiceCategoryArgs = {\n  input: CreateOneServiceCategoryInput;\n};\n\n\nexport type MutationCreateOrderArgs = {\n  input: CreateOrderInput;\n};\n\n\nexport type MutationCreateRiderTransactionArgs = {\n  input: RiderTransactionInput;\n};\n\n\nexport type MutationDeleteOneAnnouncementArgs = {\n  input: DeleteOneAnnouncementInput;\n};\n\n\nexport type MutationDeleteOneCarColorArgs = {\n  input: DeleteOneCarColorInput;\n};\n\n\nexport type MutationDeleteOneCarModelArgs = {\n  input: DeleteOneCarModelInput;\n};\n\n\nexport type MutationDeleteOneFeedbackParameterArgs = {\n  input: DeleteOneFeedbackParameterInput;\n};\n\n\nexport type MutationDeleteOneRegionArgs = {\n  input: DeleteOneRegionInput;\n};\n\n\nexport type MutationDeleteOneServiceArgs = {\n  input: DeleteOneServiceInput;\n};\n\n\nexport type MutationDeleteOneServiceCategoryArgs = {\n  input: DeleteOneServiceCategoryInput;\n};\n\n\nexport type MutationDisablePreviousServerArgs = {\n  ip: Scalars['String'];\n};\n\n\nexport type MutationRemoveActivitiesFromComplaintArgs = {\n  input: RemoveActivitiesFromComplaintInput;\n};\n\n\nexport type MutationRemoveActorFromComplaintActivityArgs = {\n  input: RemoveActorFromComplaintActivityInput;\n};\n\n\nexport type MutationRemoveAddressesFromRiderArgs = {\n  input: RemoveAddressesFromRiderInput;\n};\n\n\nexport type MutationRemoveAllowedServicesFromCouponArgs = {\n  input: RemoveAllowedServicesFromCouponInput;\n};\n\n\nexport type MutationRemoveAssignedToFromComplaintActivityArgs = {\n  input: RemoveAssignedToFromComplaintActivityInput;\n};\n\n\nexport type MutationRemoveComplaintsFromOrderArgs = {\n  input: RemoveComplaintsFromOrderInput;\n};\n\n\nexport type MutationRemoveConversationsFromOrderArgs = {\n  input: RemoveConversationsFromOrderInput;\n};\n\n\nexport type MutationRemoveCouponFromOrderArgs = {\n  input: RemoveCouponFromOrderInput;\n};\n\n\nexport type MutationRemoveDocumentsFromDriverArgs = {\n  input: RemoveDocumentsFromDriverInput;\n};\n\n\nexport type MutationRemoveDriverFromDriverWalletArgs = {\n  input: RemoveDriverFromDriverWalletInput;\n};\n\n\nexport type MutationRemoveDriverFromOrderArgs = {\n  input: RemoveDriverFromOrderInput;\n};\n\n\nexport type MutationRemoveDriverTransactionsFromOrderArgs = {\n  input: RemoveDriverTransactionsFromOrderInput;\n};\n\n\nexport type MutationRemoveEnabledServicesFromDriverArgs = {\n  input: RemoveEnabledServicesFromDriverInput;\n};\n\n\nexport type MutationRemoveFeedbacksFromDriverArgs = {\n  input: RemoveFeedbacksFromDriverInput;\n};\n\n\nexport type MutationRemoveFleetFromFleetWalletArgs = {\n  input: RemoveFleetFromFleetWalletInput;\n};\n\n\nexport type MutationRemoveFleetTransactionsFromOrderArgs = {\n  input: RemoveFleetTransactionsFromOrderInput;\n};\n\n\nexport type MutationRemoveMediaFromDriverArgs = {\n  input: RemoveMediaFromDriverInput;\n};\n\n\nexport type MutationRemoveMediaFromPaymentGatewayArgs = {\n  input: RemoveMediaFromPaymentGatewayInput;\n};\n\n\nexport type MutationRemoveMediaFromRiderArgs = {\n  input: RemoveMediaFromRiderInput;\n};\n\n\nexport type MutationRemoveMediaFromServiceArgs = {\n  input: RemoveMediaFromServiceInput;\n};\n\n\nexport type MutationRemoveOperatorFromDriverTransactionArgs = {\n  input: RemoveOperatorFromDriverTransactionInput;\n};\n\n\nexport type MutationRemoveOperatorFromFleetTransactionArgs = {\n  input: RemoveOperatorFromFleetTransactionInput;\n};\n\n\nexport type MutationRemoveOperatorFromRiderTransactionArgs = {\n  input: RemoveOperatorFromRiderTransactionInput;\n};\n\n\nexport type MutationRemoveOptionsFromServiceArgs = {\n  input: RemoveOptionsFromServiceInput;\n};\n\n\nexport type MutationRemoveOrderFromComplaintArgs = {\n  input: RemoveOrderFromComplaintInput;\n};\n\n\nexport type MutationRemoveOrdersFromDriverArgs = {\n  input: RemoveOrdersFromDriverInput;\n};\n\n\nexport type MutationRemoveOrdersFromRiderArgs = {\n  input: RemoveOrdersFromRiderInput;\n};\n\n\nexport type MutationRemoveParametersFromFeedbackArgs = {\n  input: RemoveParametersFromFeedbackInput;\n};\n\n\nexport type MutationRemovePaymentGatewayFromRiderTransactionArgs = {\n  input: RemovePaymentGatewayFromRiderTransactionInput;\n};\n\n\nexport type MutationRemoveProviderTransactionsFromOrderArgs = {\n  input: RemoveProviderTransactionsFromOrderInput;\n};\n\n\nexport type MutationRemoveRegionsFromServiceArgs = {\n  input: RemoveRegionsFromServiceInput;\n};\n\n\nexport type MutationRemoveRiderFromOrderArgs = {\n  input: RemoveRiderFromOrderInput;\n};\n\n\nexport type MutationRemoveRiderFromRiderTransactionArgs = {\n  input: RemoveRiderFromRiderTransactionInput;\n};\n\n\nexport type MutationRemoveRiderFromRiderWalletArgs = {\n  input: RemoveRiderFromRiderWalletInput;\n};\n\n\nexport type MutationRemoveRiderTransactionsFromOrderArgs = {\n  input: RemoveRiderTransactionsFromOrderInput;\n};\n\n\nexport type MutationRemoveServiceFromOrderArgs = {\n  input: RemoveServiceFromOrderInput;\n};\n\n\nexport type MutationRemoveServicesFromServiceCategoryArgs = {\n  input: RemoveServicesFromServiceCategoryInput;\n};\n\n\nexport type MutationRemoveTransactionsFromDriverArgs = {\n  input: RemoveTransactionsFromDriverInput;\n};\n\n\nexport type MutationRemoveTransactionsFromFleetArgs = {\n  input: RemoveTransactionsFromFleetInput;\n};\n\n\nexport type MutationRemoveTransactionsFromRiderArgs = {\n  input: RemoveTransactionsFromRiderInput;\n};\n\n\nexport type MutationRemoveWalletsFromDriverArgs = {\n  input: RemoveWalletsFromDriverInput;\n};\n\n\nexport type MutationRemoveWalletsFromFleetArgs = {\n  input: RemoveWalletsFromFleetInput;\n};\n\n\nexport type MutationRemoveWalletsFromRiderArgs = {\n  input: RemoveWalletsFromRiderInput;\n};\n\n\nexport type MutationSetActivitiesOnComplaintArgs = {\n  input: SetActivitiesOnComplaintInput;\n};\n\n\nexport type MutationSetActorOnComplaintActivityArgs = {\n  input: SetActorOnComplaintActivityInput;\n};\n\n\nexport type MutationSetAddressesOnRiderArgs = {\n  input: SetAddressesOnRiderInput;\n};\n\n\nexport type MutationSetAllowedServicesOnCouponArgs = {\n  input: SetAllowedServicesOnCouponInput;\n};\n\n\nexport type MutationSetAssignedToOnComplaintActivityArgs = {\n  input: SetAssignedToOnComplaintActivityInput;\n};\n\n\nexport type MutationSetComplaintsOnOrderArgs = {\n  input: SetComplaintsOnOrderInput;\n};\n\n\nexport type MutationSetConversationsOnOrderArgs = {\n  input: SetConversationsOnOrderInput;\n};\n\n\nexport type MutationSetCouponOnOrderArgs = {\n  input: SetCouponOnOrderInput;\n};\n\n\nexport type MutationSetDocumentsOnDriverArgs = {\n  input: SetDocumentsOnDriverInput;\n};\n\n\nexport type MutationSetDriverOnDriverWalletArgs = {\n  input: SetDriverOnDriverWalletInput;\n};\n\n\nexport type MutationSetDriverOnOrderArgs = {\n  input: SetDriverOnOrderInput;\n};\n\n\nexport type MutationSetDriverTransactionsOnOrderArgs = {\n  input: SetDriverTransactionsOnOrderInput;\n};\n\n\nexport type MutationSetEnabledServicesOnDriverArgs = {\n  input: SetEnabledServicesOnDriverInput;\n};\n\n\nexport type MutationSetFeedbacksOnDriverArgs = {\n  input: SetFeedbacksOnDriverInput;\n};\n\n\nexport type MutationSetFleetOnFleetWalletArgs = {\n  input: SetFleetOnFleetWalletInput;\n};\n\n\nexport type MutationSetFleetTransactionsOnOrderArgs = {\n  input: SetFleetTransactionsOnOrderInput;\n};\n\n\nexport type MutationSetMediaOnDriverArgs = {\n  input: SetMediaOnDriverInput;\n};\n\n\nexport type MutationSetMediaOnPaymentGatewayArgs = {\n  input: SetMediaOnPaymentGatewayInput;\n};\n\n\nexport type MutationSetMediaOnRiderArgs = {\n  input: SetMediaOnRiderInput;\n};\n\n\nexport type MutationSetMediaOnServiceArgs = {\n  input: SetMediaOnServiceInput;\n};\n\n\nexport type MutationSetOperatorOnDriverTransactionArgs = {\n  input: SetOperatorOnDriverTransactionInput;\n};\n\n\nexport type MutationSetOperatorOnFleetTransactionArgs = {\n  input: SetOperatorOnFleetTransactionInput;\n};\n\n\nexport type MutationSetOperatorOnRiderTransactionArgs = {\n  input: SetOperatorOnRiderTransactionInput;\n};\n\n\nexport type MutationSetOptionsOnServiceArgs = {\n  input: SetOptionsOnServiceInput;\n};\n\n\nexport type MutationSetOrderOnComplaintArgs = {\n  input: SetOrderOnComplaintInput;\n};\n\n\nexport type MutationSetOrdersOnDriverArgs = {\n  input: SetOrdersOnDriverInput;\n};\n\n\nexport type MutationSetOrdersOnRiderArgs = {\n  input: SetOrdersOnRiderInput;\n};\n\n\nexport type MutationSetParametersOnFeedbackArgs = {\n  input: SetParametersOnFeedbackInput;\n};\n\n\nexport type MutationSetPaymentGatewayOnRiderTransactionArgs = {\n  input: SetPaymentGatewayOnRiderTransactionInput;\n};\n\n\nexport type MutationSetProviderTransactionsOnOrderArgs = {\n  input: SetProviderTransactionsOnOrderInput;\n};\n\n\nexport type MutationSetRegionsOnServiceArgs = {\n  input: SetRegionsOnServiceInput;\n};\n\n\nexport type MutationSetRiderOnOrderArgs = {\n  input: SetRiderOnOrderInput;\n};\n\n\nexport type MutationSetRiderOnRiderTransactionArgs = {\n  input: SetRiderOnRiderTransactionInput;\n};\n\n\nexport type MutationSetRiderOnRiderWalletArgs = {\n  input: SetRiderOnRiderWalletInput;\n};\n\n\nexport type MutationSetRiderTransactionsOnOrderArgs = {\n  input: SetRiderTransactionsOnOrderInput;\n};\n\n\nexport type MutationSetServiceOnOrderArgs = {\n  input: SetServiceOnOrderInput;\n};\n\n\nexport type MutationSetServicesOnServiceCategoryArgs = {\n  input: SetServicesOnServiceCategoryInput;\n};\n\n\nexport type MutationSetTransactionsOnDriverArgs = {\n  input: SetTransactionsOnDriverInput;\n};\n\n\nexport type MutationSetTransactionsOnFleetArgs = {\n  input: SetTransactionsOnFleetInput;\n};\n\n\nexport type MutationSetTransactionsOnRiderArgs = {\n  input: SetTransactionsOnRiderInput;\n};\n\n\nexport type MutationSetWalletsOnDriverArgs = {\n  input: SetWalletsOnDriverInput;\n};\n\n\nexport type MutationSetWalletsOnFleetArgs = {\n  input: SetWalletsOnFleetInput;\n};\n\n\nexport type MutationSetWalletsOnRiderArgs = {\n  input: SetWalletsOnRiderInput;\n};\n\n\nexport type MutationUpdateFirebaseArgs = {\n  keyFileName: Scalars['String'];\n};\n\n\nexport type MutationUpdateManyRiderAddressesArgs = {\n  input: UpdateManyRiderAddressesInput;\n};\n\n\nexport type MutationUpdateMapsApiKeyArgs = {\n  adminPanel: Scalars['String'];\n  backend: Scalars['String'];\n};\n\n\nexport type MutationUpdateOneAnnouncementArgs = {\n  input: UpdateOneAnnouncementInput;\n};\n\n\nexport type MutationUpdateOneCarColorArgs = {\n  input: UpdateOneCarColorInput;\n};\n\n\nexport type MutationUpdateOneCarModelArgs = {\n  input: UpdateOneCarModelInput;\n};\n\n\nexport type MutationUpdateOneComplaintArgs = {\n  input: UpdateOneComplaintInput;\n};\n\n\nexport type MutationUpdateOneCouponArgs = {\n  input: UpdateOneCouponInput;\n};\n\n\nexport type MutationUpdateOneDriverArgs = {\n  input: UpdateOneDriverInput;\n};\n\n\nexport type MutationUpdateOneFeedbackArgs = {\n  input: UpdateOneFeedbackInput;\n};\n\n\nexport type MutationUpdateOneFeedbackParameterArgs = {\n  input: UpdateOneFeedbackParameterInput;\n};\n\n\nexport type MutationUpdateOneFleetArgs = {\n  input: UpdateOneFleetInput;\n};\n\n\nexport type MutationUpdateOneOperatorArgs = {\n  input: UpdateOneOperatorInput;\n};\n\n\nexport type MutationUpdateOneOperatorRoleArgs = {\n  input: UpdateOneOperatorRoleInput;\n};\n\n\nexport type MutationUpdateOnePaymentGatewayArgs = {\n  input: UpdateOnePaymentGatewayInput;\n};\n\n\nexport type MutationUpdateOneRegionArgs = {\n  input: UpdateOneRegionInput;\n};\n\n\nexport type MutationUpdateOneRiderArgs = {\n  input: UpdateOneRiderInput;\n};\n\n\nexport type MutationUpdateOneRiderAddressArgs = {\n  input: UpdateOneRiderAddressInput;\n};\n\n\nexport type MutationUpdateOneServiceArgs = {\n  input: UpdateOneServiceInput;\n};\n\n\nexport type MutationUpdateOneServiceCategoryArgs = {\n  input: UpdateOneServiceCategoryInput;\n};\n\n\nexport type MutationUpdatePasswordArgs = {\n  input: UpdatePasswordInput;\n};\n\n\nexport type MutationUpdatePurchaseCodeArgs = {\n  purchaseCode: Scalars['String'];\n};\n\nexport type OffsetPageInfo = {\n  __typename?: 'OffsetPageInfo';\n  /** true if paging forward and there are more records. */\n  hasNextPage?: Maybe<Scalars['Boolean']>;\n  /** true if paging backwards and there are more records. */\n  hasPreviousPage?: Maybe<Scalars['Boolean']>;\n};\n\nexport type OffsetPaging = {\n  /** Limit the number of records returned */\n  limit?: InputMaybe<Scalars['Int']>;\n  /** Offset to start returning records from */\n  offset?: InputMaybe<Scalars['Int']>;\n};\n\nexport type OnlineDriver = {\n  __typename?: 'OnlineDriver';\n  driverId: Scalars['Float'];\n  lastUpdatedAt: Scalars['Float'];\n  location: Point;\n};\n\nexport type OnlineDriverWithData = {\n  __typename?: 'OnlineDriverWithData';\n  firstName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Gender>;\n  id: Scalars['Float'];\n  lastName?: Maybe<Scalars['String']>;\n  lastUpdatedAt: Scalars['Float'];\n  location: Point;\n  mobileNumber: Scalars['String'];\n  rating?: Maybe<Scalars['Float']>;\n  reviewCount: Scalars['Float'];\n  status: DriverStatus;\n};\n\nexport type Operator = {\n  __typename?: 'Operator';\n  email?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n  roleId?: Maybe<Scalars['ID']>;\n  userName: Scalars['String'];\n};\n\nexport type OperatorAggregateGroupBy = {\n  __typename?: 'OperatorAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OperatorAvgAggregate = {\n  __typename?: 'OperatorAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OperatorConnection = {\n  __typename?: 'OperatorConnection';\n  /** Array of nodes. */\n  nodes: Array<Operator>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type OperatorCountAggregate = {\n  __typename?: 'OperatorCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type OperatorFilter = {\n  and?: InputMaybe<Array<OperatorFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OperatorFilter>>;\n};\n\nexport type OperatorMaxAggregate = {\n  __typename?: 'OperatorMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OperatorMinAggregate = {\n  __typename?: 'OperatorMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport enum OperatorPermission {\n  AnnouncementsEdit = 'Announcements_Edit',\n  AnnouncementsView = 'Announcements_View',\n  CarsEdit = 'Cars_Edit',\n  CarsView = 'Cars_View',\n  ComplaintsEdit = 'Complaints_Edit',\n  ComplaintsView = 'Complaints_View',\n  CouponsEdit = 'Coupons_Edit',\n  CouponsView = 'Coupons_View',\n  DriverWalletEdit = 'DriverWallet_Edit',\n  DriverWalletView = 'DriverWallet_View',\n  DriversEdit = 'Drivers_Edit',\n  DriversView = 'Drivers_View',\n  FleetWalletEdit = 'FleetWallet_Edit',\n  FleetWalletView = 'FleetWallet_View',\n  FleetsEdit = 'Fleets_Edit',\n  FleetsView = 'Fleets_View',\n  GatewaysEdit = 'Gateways_Edit',\n  GatewaysView = 'Gateways_View',\n  ProviderWalletEdit = 'ProviderWallet_Edit',\n  ProviderWalletView = 'ProviderWallet_View',\n  RegionsEdit = 'Regions_Edit',\n  RegionsView = 'Regions_View',\n  RequestsView = 'Requests_View',\n  RiderWalletEdit = 'RiderWallet_Edit',\n  RiderWalletView = 'RiderWallet_View',\n  RidersEdit = 'Riders_Edit',\n  RidersView = 'Riders_View',\n  ServicesEdit = 'Services_Edit',\n  ServicesView = 'Services_View',\n  UsersEdit = 'Users_Edit',\n  UsersView = 'Users_View'\n}\n\nexport type OperatorRole = {\n  __typename?: 'OperatorRole';\n  id: Scalars['ID'];\n  permissions: Array<OperatorPermission>;\n  title: Scalars['String'];\n};\n\nexport type OperatorRoleAggregateGroupBy = {\n  __typename?: 'OperatorRoleAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OperatorRoleAvgAggregate = {\n  __typename?: 'OperatorRoleAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OperatorRoleCountAggregate = {\n  __typename?: 'OperatorRoleCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type OperatorRoleFilter = {\n  and?: InputMaybe<Array<OperatorRoleFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OperatorRoleFilter>>;\n};\n\nexport type OperatorRoleMaxAggregate = {\n  __typename?: 'OperatorRoleMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OperatorRoleMinAggregate = {\n  __typename?: 'OperatorRoleMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OperatorRoleSort = {\n  direction: SortDirection;\n  field: OperatorRoleSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OperatorRoleSortFields {\n  Id = 'id'\n}\n\nexport type OperatorRoleSumAggregate = {\n  __typename?: 'OperatorRoleSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OperatorSort = {\n  direction: SortDirection;\n  field: OperatorSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OperatorSortFields {\n  Id = 'id'\n}\n\nexport type OperatorSumAggregate = {\n  __typename?: 'OperatorSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  activities: Array<RequestActivity>;\n  activitiesAggregate: Array<OrderActivitiesAggregateResponse>;\n  addresses: Array<Scalars['String']>;\n  complaints: Array<Complaint>;\n  complaintsAggregate: Array<OrderComplaintsAggregateResponse>;\n  conversations: Array<OrderMessage>;\n  conversationsAggregate: Array<OrderConversationsAggregateResponse>;\n  costAfterCoupon: Scalars['Float'];\n  costBest: Scalars['Float'];\n  coupon?: Maybe<Coupon>;\n  createdOn: Scalars['DateTime'];\n  currency: Scalars['String'];\n  distanceBest: Scalars['Int'];\n  driver?: Maybe<Driver>;\n  driverId?: Maybe<Scalars['ID']>;\n  driverTransactions: Array<DriverTransaction>;\n  driverTransactionsAggregate: Array<OrderDriverTransactionsAggregateResponse>;\n  durationBest: Scalars['Int'];\n  expectedTimestamp?: Maybe<Scalars['DateTime']>;\n  finishTimestamp?: Maybe<Scalars['DateTime']>;\n  fleetTransactions: Array<FleetTransaction>;\n  fleetTransactionsAggregate: Array<OrderFleetTransactionsAggregateResponse>;\n  id: Scalars['ID'];\n  points: Array<Point>;\n  providerTransactions: Array<ProviderTransaction>;\n  providerTransactionsAggregate: Array<OrderProviderTransactionsAggregateResponse>;\n  rider: Rider;\n  riderId: Scalars['ID'];\n  riderTransactions: Array<RiderTransaction>;\n  riderTransactionsAggregate: Array<OrderRiderTransactionsAggregateResponse>;\n  service: Service;\n  startTimestamp?: Maybe<Scalars['DateTime']>;\n  status: OrderStatus;\n  waitMinutes: Scalars['Float'];\n};\n\n\nexport type OrderActivitiesArgs = {\n  filter?: InputMaybe<RequestActivityFilter>;\n  sorting?: InputMaybe<Array<RequestActivitySort>>;\n};\n\n\nexport type OrderActivitiesAggregateArgs = {\n  filter?: InputMaybe<RequestActivityAggregateFilter>;\n};\n\n\nexport type OrderComplaintsArgs = {\n  filter?: InputMaybe<ComplaintFilter>;\n  sorting?: InputMaybe<Array<ComplaintSort>>;\n};\n\n\nexport type OrderComplaintsAggregateArgs = {\n  filter?: InputMaybe<ComplaintAggregateFilter>;\n};\n\n\nexport type OrderConversationsArgs = {\n  filter?: InputMaybe<OrderMessageFilter>;\n  sorting?: InputMaybe<Array<OrderMessageSort>>;\n};\n\n\nexport type OrderConversationsAggregateArgs = {\n  filter?: InputMaybe<OrderMessageAggregateFilter>;\n};\n\n\nexport type OrderDriverTransactionsArgs = {\n  filter?: InputMaybe<DriverTransactionFilter>;\n  sorting?: InputMaybe<Array<DriverTransactionSort>>;\n};\n\n\nexport type OrderDriverTransactionsAggregateArgs = {\n  filter?: InputMaybe<DriverTransactionAggregateFilter>;\n};\n\n\nexport type OrderFleetTransactionsArgs = {\n  filter?: InputMaybe<FleetTransactionFilter>;\n  sorting?: InputMaybe<Array<FleetTransactionSort>>;\n};\n\n\nexport type OrderFleetTransactionsAggregateArgs = {\n  filter?: InputMaybe<FleetTransactionAggregateFilter>;\n};\n\n\nexport type OrderProviderTransactionsArgs = {\n  filter?: InputMaybe<ProviderTransactionFilter>;\n  sorting?: InputMaybe<Array<ProviderTransactionSort>>;\n};\n\n\nexport type OrderProviderTransactionsAggregateArgs = {\n  filter?: InputMaybe<ProviderTransactionAggregateFilter>;\n};\n\n\nexport type OrderRiderTransactionsArgs = {\n  filter?: InputMaybe<RiderTransactionFilter>;\n  sorting?: InputMaybe<Array<RiderTransactionSort>>;\n};\n\n\nexport type OrderRiderTransactionsAggregateArgs = {\n  filter?: InputMaybe<RiderTransactionAggregateFilter>;\n};\n\nexport type OrderActivitiesAggregateGroupBy = {\n  __typename?: 'OrderActivitiesAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderActivitiesAggregateResponse = {\n  __typename?: 'OrderActivitiesAggregateResponse';\n  avg?: Maybe<OrderActivitiesAvgAggregate>;\n  count?: Maybe<OrderActivitiesCountAggregate>;\n  groupBy?: Maybe<OrderActivitiesAggregateGroupBy>;\n  max?: Maybe<OrderActivitiesMaxAggregate>;\n  min?: Maybe<OrderActivitiesMinAggregate>;\n  sum?: Maybe<OrderActivitiesSumAggregate>;\n};\n\nexport type OrderActivitiesAvgAggregate = {\n  __typename?: 'OrderActivitiesAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderActivitiesCountAggregate = {\n  __typename?: 'OrderActivitiesCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderActivitiesMaxAggregate = {\n  __typename?: 'OrderActivitiesMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderActivitiesMinAggregate = {\n  __typename?: 'OrderActivitiesMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderActivitiesSumAggregate = {\n  __typename?: 'OrderActivitiesSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderAggregateFilter = {\n  and?: InputMaybe<Array<OrderAggregateFilter>>;\n  createdOn?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderAggregateFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<OrderStatusFilterComparison>;\n};\n\nexport type OrderAggregateGroupBy = {\n  __typename?: 'OrderAggregateGroupBy';\n  createdOn?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type OrderAggregateResponse = {\n  __typename?: 'OrderAggregateResponse';\n  avg?: Maybe<OrderAvgAggregate>;\n  count?: Maybe<OrderCountAggregate>;\n  groupBy?: Maybe<OrderAggregateGroupBy>;\n  max?: Maybe<OrderMaxAggregate>;\n  min?: Maybe<OrderMinAggregate>;\n  sum?: Maybe<OrderSumAggregate>;\n};\n\nexport type OrderAvgAggregate = {\n  __typename?: 'OrderAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderComplaintsAggregateGroupBy = {\n  __typename?: 'OrderComplaintsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type OrderComplaintsAggregateResponse = {\n  __typename?: 'OrderComplaintsAggregateResponse';\n  avg?: Maybe<OrderComplaintsAvgAggregate>;\n  count?: Maybe<OrderComplaintsCountAggregate>;\n  groupBy?: Maybe<OrderComplaintsAggregateGroupBy>;\n  max?: Maybe<OrderComplaintsMaxAggregate>;\n  min?: Maybe<OrderComplaintsMinAggregate>;\n  sum?: Maybe<OrderComplaintsSumAggregate>;\n};\n\nexport type OrderComplaintsAvgAggregate = {\n  __typename?: 'OrderComplaintsAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderComplaintsCountAggregate = {\n  __typename?: 'OrderComplaintsCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderComplaintsMaxAggregate = {\n  __typename?: 'OrderComplaintsMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type OrderComplaintsMinAggregate = {\n  __typename?: 'OrderComplaintsMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type OrderComplaintsSumAggregate = {\n  __typename?: 'OrderComplaintsSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderConnection = {\n  __typename?: 'OrderConnection';\n  /** Array of nodes. */\n  nodes: Array<Order>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type OrderConversationsAggregateGroupBy = {\n  __typename?: 'OrderConversationsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderConversationsAggregateResponse = {\n  __typename?: 'OrderConversationsAggregateResponse';\n  avg?: Maybe<OrderConversationsAvgAggregate>;\n  count?: Maybe<OrderConversationsCountAggregate>;\n  groupBy?: Maybe<OrderConversationsAggregateGroupBy>;\n  max?: Maybe<OrderConversationsMaxAggregate>;\n  min?: Maybe<OrderConversationsMinAggregate>;\n  sum?: Maybe<OrderConversationsSumAggregate>;\n};\n\nexport type OrderConversationsAvgAggregate = {\n  __typename?: 'OrderConversationsAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderConversationsCountAggregate = {\n  __typename?: 'OrderConversationsCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderConversationsMaxAggregate = {\n  __typename?: 'OrderConversationsMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderConversationsMinAggregate = {\n  __typename?: 'OrderConversationsMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderConversationsSumAggregate = {\n  __typename?: 'OrderConversationsSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderCountAggregate = {\n  __typename?: 'OrderCountAggregate';\n  createdOn?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  riderId?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderDriverTransactionsAggregateGroupBy = {\n  __typename?: 'OrderDriverTransactionsAggregateGroupBy';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderDriverTransactionsAggregateResponse = {\n  __typename?: 'OrderDriverTransactionsAggregateResponse';\n  avg?: Maybe<OrderDriverTransactionsAvgAggregate>;\n  count?: Maybe<OrderDriverTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderDriverTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderDriverTransactionsMaxAggregate>;\n  min?: Maybe<OrderDriverTransactionsMinAggregate>;\n  sum?: Maybe<OrderDriverTransactionsSumAggregate>;\n};\n\nexport type OrderDriverTransactionsAvgAggregate = {\n  __typename?: 'OrderDriverTransactionsAvgAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderDriverTransactionsCountAggregate = {\n  __typename?: 'OrderDriverTransactionsCountAggregate';\n  createdAt?: Maybe<Scalars['Int']>;\n  driverId?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderDriverTransactionsMaxAggregate = {\n  __typename?: 'OrderDriverTransactionsMaxAggregate';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderDriverTransactionsMinAggregate = {\n  __typename?: 'OrderDriverTransactionsMinAggregate';\n  createdAt?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderDriverTransactionsSumAggregate = {\n  __typename?: 'OrderDriverTransactionsSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderFilter = {\n  and?: InputMaybe<Array<OrderFilter>>;\n  createdOn?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<OrderStatusFilterComparison>;\n};\n\nexport type OrderFleetTransactionsAggregateGroupBy = {\n  __typename?: 'OrderFleetTransactionsAggregateGroupBy';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderFleetTransactionsAggregateResponse = {\n  __typename?: 'OrderFleetTransactionsAggregateResponse';\n  avg?: Maybe<OrderFleetTransactionsAvgAggregate>;\n  count?: Maybe<OrderFleetTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderFleetTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderFleetTransactionsMaxAggregate>;\n  min?: Maybe<OrderFleetTransactionsMinAggregate>;\n  sum?: Maybe<OrderFleetTransactionsSumAggregate>;\n};\n\nexport type OrderFleetTransactionsAvgAggregate = {\n  __typename?: 'OrderFleetTransactionsAvgAggregate';\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderFleetTransactionsCountAggregate = {\n  __typename?: 'OrderFleetTransactionsCountAggregate';\n  fleetId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  operatorId?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderFleetTransactionsMaxAggregate = {\n  __typename?: 'OrderFleetTransactionsMaxAggregate';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderFleetTransactionsMinAggregate = {\n  __typename?: 'OrderFleetTransactionsMinAggregate';\n  fleetId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderFleetTransactionsSumAggregate = {\n  __typename?: 'OrderFleetTransactionsSumAggregate';\n  fleetId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderMaxAggregate = {\n  __typename?: 'OrderMaxAggregate';\n  createdOn?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type OrderMessage = {\n  __typename?: 'OrderMessage';\n  content: Scalars['String'];\n  id: Scalars['ID'];\n  sentAt: Scalars['DateTime'];\n  sentByDriver: Scalars['Boolean'];\n  status: MessageStatus;\n};\n\nexport type OrderMessageAggregateFilter = {\n  and?: InputMaybe<Array<OrderMessageAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderMessageAggregateFilter>>;\n};\n\nexport type OrderMessageAggregateGroupBy = {\n  __typename?: 'OrderMessageAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderMessageAvgAggregate = {\n  __typename?: 'OrderMessageAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderMessageCountAggregate = {\n  __typename?: 'OrderMessageCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderMessageFilter = {\n  and?: InputMaybe<Array<OrderMessageFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderMessageFilter>>;\n};\n\nexport type OrderMessageMaxAggregate = {\n  __typename?: 'OrderMessageMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderMessageMinAggregate = {\n  __typename?: 'OrderMessageMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderMessageSort = {\n  direction: SortDirection;\n  field: OrderMessageSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OrderMessageSortFields {\n  Id = 'id'\n}\n\nexport type OrderMessageSumAggregate = {\n  __typename?: 'OrderMessageSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderMinAggregate = {\n  __typename?: 'OrderMinAggregate';\n  createdOn?: Maybe<Scalars['DateTime']>;\n  driverId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type OrderProviderTransactionsAggregateGroupBy = {\n  __typename?: 'OrderProviderTransactionsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderProviderTransactionsAggregateResponse = {\n  __typename?: 'OrderProviderTransactionsAggregateResponse';\n  avg?: Maybe<OrderProviderTransactionsAvgAggregate>;\n  count?: Maybe<OrderProviderTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderProviderTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderProviderTransactionsMaxAggregate>;\n  min?: Maybe<OrderProviderTransactionsMinAggregate>;\n  sum?: Maybe<OrderProviderTransactionsSumAggregate>;\n};\n\nexport type OrderProviderTransactionsAvgAggregate = {\n  __typename?: 'OrderProviderTransactionsAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderProviderTransactionsCountAggregate = {\n  __typename?: 'OrderProviderTransactionsCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n  operatorId?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderProviderTransactionsMaxAggregate = {\n  __typename?: 'OrderProviderTransactionsMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderProviderTransactionsMinAggregate = {\n  __typename?: 'OrderProviderTransactionsMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderProviderTransactionsSumAggregate = {\n  __typename?: 'OrderProviderTransactionsSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderRiderTransactionsAggregateGroupBy = {\n  __typename?: 'OrderRiderTransactionsAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderRiderTransactionsAggregateResponse = {\n  __typename?: 'OrderRiderTransactionsAggregateResponse';\n  avg?: Maybe<OrderRiderTransactionsAvgAggregate>;\n  count?: Maybe<OrderRiderTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderRiderTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderRiderTransactionsMaxAggregate>;\n  min?: Maybe<OrderRiderTransactionsMinAggregate>;\n  sum?: Maybe<OrderRiderTransactionsSumAggregate>;\n};\n\nexport type OrderRiderTransactionsAvgAggregate = {\n  __typename?: 'OrderRiderTransactionsAvgAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderRiderTransactionsCountAggregate = {\n  __typename?: 'OrderRiderTransactionsCountAggregate';\n  amount?: Maybe<Scalars['Int']>;\n  createdAt?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  riderId?: Maybe<Scalars['Int']>;\n};\n\nexport type OrderRiderTransactionsMaxAggregate = {\n  __typename?: 'OrderRiderTransactionsMaxAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderRiderTransactionsMinAggregate = {\n  __typename?: 'OrderRiderTransactionsMinAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderRiderTransactionsSumAggregate = {\n  __typename?: 'OrderRiderTransactionsSumAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type OrderSort = {\n  direction: SortDirection;\n  field: OrderSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OrderSortFields {\n  CreatedOn = 'createdOn',\n  DriverId = 'driverId',\n  Id = 'id',\n  RiderId = 'riderId',\n  Status = 'status'\n}\n\nexport enum OrderStatus {\n  Arrived = 'Arrived',\n  Booked = 'Booked',\n  DriverAccepted = 'DriverAccepted',\n  DriverCanceled = 'DriverCanceled',\n  Expired = 'Expired',\n  Finished = 'Finished',\n  Found = 'Found',\n  NoCloseFound = 'NoCloseFound',\n  NotFound = 'NotFound',\n  Requested = 'Requested',\n  RiderCanceled = 'RiderCanceled',\n  Started = 'Started',\n  WaitingForPostPay = 'WaitingForPostPay',\n  WaitingForPrePay = 'WaitingForPrePay',\n  WaitingForReview = 'WaitingForReview'\n}\n\nexport type OrderStatusFilterComparison = {\n  eq?: InputMaybe<OrderStatus>;\n  gt?: InputMaybe<OrderStatus>;\n  gte?: InputMaybe<OrderStatus>;\n  iLike?: InputMaybe<OrderStatus>;\n  in?: InputMaybe<Array<OrderStatus>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  like?: InputMaybe<OrderStatus>;\n  lt?: InputMaybe<OrderStatus>;\n  lte?: InputMaybe<OrderStatus>;\n  neq?: InputMaybe<OrderStatus>;\n  notILike?: InputMaybe<OrderStatus>;\n  notIn?: InputMaybe<Array<OrderStatus>>;\n  notLike?: InputMaybe<OrderStatus>;\n};\n\nexport type OrderSumAggregate = {\n  __typename?: 'OrderSumAggregate';\n  driverId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** The cursor of the last returned record. */\n  endCursor?: Maybe<Scalars['ConnectionCursor']>;\n  /** true if paging forward and there are more records. */\n  hasNextPage?: Maybe<Scalars['Boolean']>;\n  /** true if paging backwards and there are more records. */\n  hasPreviousPage?: Maybe<Scalars['Boolean']>;\n  /** The cursor of the first returned record. */\n  startCursor?: Maybe<Scalars['ConnectionCursor']>;\n};\n\nexport type PaymentGateway = {\n  __typename?: 'PaymentGateway';\n  enabled: Scalars['Boolean'];\n  id: Scalars['ID'];\n  media?: Maybe<Media>;\n  mediaId?: Maybe<Scalars['Float']>;\n  merchantId?: Maybe<Scalars['String']>;\n  privateKey: Scalars['String'];\n  publicKey?: Maybe<Scalars['String']>;\n  saltKey?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  type: PaymentGatewayType;\n};\n\nexport type PaymentGatewayAggregateGroupBy = {\n  __typename?: 'PaymentGatewayAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type PaymentGatewayAvgAggregate = {\n  __typename?: 'PaymentGatewayAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type PaymentGatewayConnection = {\n  __typename?: 'PaymentGatewayConnection';\n  /** Array of nodes. */\n  nodes: Array<PaymentGateway>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type PaymentGatewayCountAggregate = {\n  __typename?: 'PaymentGatewayCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type PaymentGatewayFilter = {\n  and?: InputMaybe<Array<PaymentGatewayFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<PaymentGatewayFilter>>;\n};\n\nexport type PaymentGatewayMaxAggregate = {\n  __typename?: 'PaymentGatewayMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type PaymentGatewayMinAggregate = {\n  __typename?: 'PaymentGatewayMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type PaymentGatewaySort = {\n  direction: SortDirection;\n  field: PaymentGatewaySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum PaymentGatewaySortFields {\n  Id = 'id'\n}\n\nexport type PaymentGatewaySumAggregate = {\n  __typename?: 'PaymentGatewaySumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport enum PaymentGatewayType {\n  AmazonPaymentServices = 'AmazonPaymentServices',\n  BrainTree = 'BrainTree',\n  CustomLink = 'CustomLink',\n  Flutterwave = 'Flutterwave',\n  Instamojo = 'Instamojo',\n  Mips = 'MIPS',\n  MercadoPago = 'MercadoPago',\n  MyTMoney = 'MyTMoney',\n  PayGate = 'PayGate',\n  PayPal = 'PayPal',\n  PayU = 'PayU',\n  Paystack = 'Paystack',\n  Paytm = 'Paytm',\n  Razorpay = 'Razorpay',\n  Stripe = 'Stripe',\n  WayForPay = 'WayForPay'\n}\n\nexport type Point = {\n  __typename?: 'Point';\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n};\n\nexport type PointInput = {\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n};\n\nexport enum ProviderDeductTransactionType {\n  Withdraw = 'Withdraw'\n}\n\nexport enum ProviderRechargeTransactionType {\n  Commission = 'Commission'\n}\n\nexport type ProviderTransaction = {\n  __typename?: 'ProviderTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  currency: Scalars['String'];\n  deductType?: Maybe<ProviderDeductTransactionType>;\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  operatorId?: Maybe<Scalars['ID']>;\n  rechargeType?: Maybe<ProviderRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderTransactionAggregateFilter = {\n  and?: InputMaybe<Array<ProviderTransactionAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ProviderTransactionAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type ProviderTransactionAggregateGroupBy = {\n  __typename?: 'ProviderTransactionAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderTransactionAvgAggregate = {\n  __typename?: 'ProviderTransactionAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type ProviderTransactionConnection = {\n  __typename?: 'ProviderTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<ProviderTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type ProviderTransactionCountAggregate = {\n  __typename?: 'ProviderTransactionCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n  operatorId?: Maybe<Scalars['Int']>;\n  requestId?: Maybe<Scalars['Int']>;\n};\n\nexport type ProviderTransactionFilter = {\n  and?: InputMaybe<Array<ProviderTransactionFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ProviderTransactionFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type ProviderTransactionMaxAggregate = {\n  __typename?: 'ProviderTransactionMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderTransactionMinAggregate = {\n  __typename?: 'ProviderTransactionMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n  operatorId?: Maybe<Scalars['ID']>;\n  requestId?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderTransactionSort = {\n  direction: SortDirection;\n  field: ProviderTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ProviderTransactionSortFields {\n  Id = 'id',\n  OperatorId = 'operatorId',\n  RequestId = 'requestId'\n}\n\nexport type ProviderTransactionSumAggregate = {\n  __typename?: 'ProviderTransactionSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n  operatorId?: Maybe<Scalars['Float']>;\n  requestId?: Maybe<Scalars['Float']>;\n};\n\nexport type ProviderWallet = {\n  __typename?: 'ProviderWallet';\n  balance: Scalars['Float'];\n  currency: Scalars['String'];\n  id: Scalars['ID'];\n};\n\nexport type ProviderWalletAggregateGroupBy = {\n  __typename?: 'ProviderWalletAggregateGroupBy';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderWalletAvgAggregate = {\n  __typename?: 'ProviderWalletAvgAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ProviderWalletCountAggregate = {\n  __typename?: 'ProviderWalletCountAggregate';\n  balance?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type ProviderWalletFilter = {\n  and?: InputMaybe<Array<ProviderWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ProviderWalletFilter>>;\n};\n\nexport type ProviderWalletMaxAggregate = {\n  __typename?: 'ProviderWalletMaxAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderWalletMinAggregate = {\n  __typename?: 'ProviderWalletMinAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ProviderWalletSort = {\n  direction: SortDirection;\n  field: ProviderWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ProviderWalletSortFields {\n  Balance = 'balance',\n  Currency = 'currency',\n  Id = 'id'\n}\n\nexport type ProviderWalletSumAggregate = {\n  __typename?: 'ProviderWalletSumAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  address?: Maybe<Address>;\n  addresses: AddressConnection;\n  announcement?: Maybe<Announcement>;\n  announcements: AnnouncementConnection;\n  calculateFare: CalculateFareDto;\n  carColor?: Maybe<CarColor>;\n  carColors: Array<CarColor>;\n  carModel?: Maybe<CarModel>;\n  carModels: CarModelConnection;\n  complaint?: Maybe<Complaint>;\n  complaintActivities: Array<ComplaintActivity>;\n  complaintActivity?: Maybe<ComplaintActivity>;\n  complaintAggregate: Array<ComplaintAggregateResponse>;\n  complaints: ComplaintConnection;\n  coupon?: Maybe<Coupon>;\n  coupons: CouponConnection;\n  currentConfiguration: CurrentConfiguration;\n  driver?: Maybe<Driver>;\n  driverAggregate: Array<DriverAggregateResponse>;\n  driverTransaction?: Maybe<DriverTransaction>;\n  driverTransactions: DriverTransactionConnection;\n  driverWallet?: Maybe<DriverWallet>;\n  driverWallets: DriverWalletConnection;\n  drivers: DriverConnection;\n  export: ExportResult;\n  feedback?: Maybe<Feedback>;\n  feedbackParameter?: Maybe<FeedbackParameter>;\n  feedbackParameters: Array<FeedbackParameter>;\n  feedbacks: FeedbackConnection;\n  fleet?: Maybe<Fleet>;\n  fleetTransaction?: Maybe<FleetTransaction>;\n  fleetTransactions: FleetTransactionConnection;\n  fleetWallet?: Maybe<FleetWallet>;\n  fleetWallets: FleetWalletConnection;\n  fleets: FleetConnection;\n  getDriversLocation: Array<OnlineDriver>;\n  getDriversLocationWithData: Array<OnlineDriverWithData>;\n  incomeChart: IncomeResults;\n  login: TokenObject;\n  me: Operator;\n  operator?: Maybe<Operator>;\n  operatorRole?: Maybe<OperatorRole>;\n  operatorRoles: Array<OperatorRole>;\n  operators: OperatorConnection;\n  order?: Maybe<Order>;\n  orderAggregate: Array<OrderAggregateResponse>;\n  orders: OrderConnection;\n  paymentGateway?: Maybe<PaymentGateway>;\n  paymentGateways: PaymentGatewayConnection;\n  providerTransaction?: Maybe<ProviderTransaction>;\n  providerTransactions: ProviderTransactionConnection;\n  providerWallet?: Maybe<ProviderWallet>;\n  providerWallets: Array<ProviderWallet>;\n  region?: Maybe<Region>;\n  regionAggregate: Array<RegionAggregateResponse>;\n  regions: RegionConnection;\n  requestChart: RequestsResults;\n  rider?: Maybe<Rider>;\n  riderAddress?: Maybe<RiderAddress>;\n  riderAddresses: RiderAddressConnection;\n  riderTransaction?: Maybe<RiderTransaction>;\n  riderTransactions: RiderTransactionConnection;\n  riderWallet?: Maybe<RiderWallet>;\n  riderWallets: RiderWalletConnection;\n  riders: RiderConnection;\n  service?: Maybe<Service>;\n  serviceCategories: Array<ServiceCategory>;\n  serviceCategory?: Maybe<ServiceCategory>;\n  services: Array<Service>;\n};\n\n\nexport type QueryAddressArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAddressesArgs = {\n  filter?: InputMaybe<AddressFilter>;\n  paging?: InputMaybe<CursorPaging>;\n  sorting?: InputMaybe<Array<AddressSort>>;\n};\n\n\nexport type QueryAnnouncementArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAnnouncementsArgs = {\n  filter?: InputMaybe<AnnouncementFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<AnnouncementSort>>;\n};\n\n\nexport type QueryCalculateFareArgs = {\n  input: CalculateFareInput;\n};\n\n\nexport type QueryCarColorArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCarColorsArgs = {\n  filter?: InputMaybe<CarColorFilter>;\n  sorting?: InputMaybe<Array<CarColorSort>>;\n};\n\n\nexport type QueryCarModelArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCarModelsArgs = {\n  filter?: InputMaybe<CarModelFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<CarModelSort>>;\n};\n\n\nexport type QueryComplaintArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryComplaintActivitiesArgs = {\n  filter?: InputMaybe<ComplaintActivityFilter>;\n  sorting?: InputMaybe<Array<ComplaintActivitySort>>;\n};\n\n\nexport type QueryComplaintActivityArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryComplaintAggregateArgs = {\n  filter?: InputMaybe<ComplaintAggregateFilter>;\n};\n\n\nexport type QueryComplaintsArgs = {\n  filter?: InputMaybe<ComplaintFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<ComplaintSort>>;\n};\n\n\nexport type QueryCouponArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCouponsArgs = {\n  filter?: InputMaybe<CouponFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<CouponSort>>;\n};\n\n\nexport type QueryDriverArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryDriverAggregateArgs = {\n  filter?: InputMaybe<DriverAggregateFilter>;\n};\n\n\nexport type QueryDriverTransactionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryDriverTransactionsArgs = {\n  filter?: InputMaybe<DriverTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<DriverTransactionSort>>;\n};\n\n\nexport type QueryDriverWalletArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryDriverWalletsArgs = {\n  filter?: InputMaybe<DriverWalletFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<DriverWalletSort>>;\n};\n\n\nexport type QueryDriversArgs = {\n  filter?: InputMaybe<DriverFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<DriverSort>>;\n};\n\n\nexport type QueryExportArgs = {\n  input: ExportArgs;\n};\n\n\nexport type QueryFeedbackArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFeedbackParameterArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFeedbackParametersArgs = {\n  filter?: InputMaybe<FeedbackParameterFilter>;\n  sorting?: InputMaybe<Array<FeedbackParameterSort>>;\n};\n\n\nexport type QueryFeedbacksArgs = {\n  filter?: InputMaybe<FeedbackFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<FeedbackSort>>;\n};\n\n\nexport type QueryFleetArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFleetTransactionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFleetTransactionsArgs = {\n  filter?: InputMaybe<FleetTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<FleetTransactionSort>>;\n};\n\n\nexport type QueryFleetWalletArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFleetWalletsArgs = {\n  filter?: InputMaybe<FleetWalletFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<FleetWalletSort>>;\n};\n\n\nexport type QueryFleetsArgs = {\n  filter?: InputMaybe<FleetFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<FleetSort>>;\n};\n\n\nexport type QueryGetDriversLocationArgs = {\n  center: PointInput;\n  count: Scalars['Int'];\n};\n\n\nexport type QueryGetDriversLocationWithDataArgs = {\n  center: PointInput;\n  count: Scalars['Int'];\n};\n\n\nexport type QueryIncomeChartArgs = {\n  timeframe: ChartTimeframe;\n};\n\n\nexport type QueryLoginArgs = {\n  password: Scalars['String'];\n  userName: Scalars['String'];\n};\n\n\nexport type QueryOperatorArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOperatorRoleArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOperatorRolesArgs = {\n  filter?: InputMaybe<OperatorRoleFilter>;\n  sorting?: InputMaybe<Array<OperatorRoleSort>>;\n};\n\n\nexport type QueryOperatorsArgs = {\n  filter?: InputMaybe<OperatorFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OperatorSort>>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderAggregateArgs = {\n  filter?: InputMaybe<OrderAggregateFilter>;\n};\n\n\nexport type QueryOrdersArgs = {\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort>>;\n};\n\n\nexport type QueryPaymentGatewayArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryPaymentGatewaysArgs = {\n  filter?: InputMaybe<PaymentGatewayFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<PaymentGatewaySort>>;\n};\n\n\nexport type QueryProviderTransactionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProviderTransactionsArgs = {\n  filter?: InputMaybe<ProviderTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<ProviderTransactionSort>>;\n};\n\n\nexport type QueryProviderWalletArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProviderWalletsArgs = {\n  filter?: InputMaybe<ProviderWalletFilter>;\n  sorting?: InputMaybe<Array<ProviderWalletSort>>;\n};\n\n\nexport type QueryRegionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRegionAggregateArgs = {\n  filter?: InputMaybe<RegionAggregateFilter>;\n};\n\n\nexport type QueryRegionsArgs = {\n  filter?: InputMaybe<RegionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RegionSort>>;\n};\n\n\nexport type QueryRequestChartArgs = {\n  timeframe: ChartTimeframe;\n};\n\n\nexport type QueryRiderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRiderAddressArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRiderAddressesArgs = {\n  filter?: InputMaybe<RiderAddressFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderAddressSort>>;\n};\n\n\nexport type QueryRiderTransactionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRiderTransactionsArgs = {\n  filter?: InputMaybe<RiderTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderTransactionSort>>;\n};\n\n\nexport type QueryRiderWalletArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRiderWalletsArgs = {\n  filter?: InputMaybe<RiderWalletFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderWalletSort>>;\n};\n\n\nexport type QueryRidersArgs = {\n  filter?: InputMaybe<RiderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderSort>>;\n};\n\n\nexport type QueryServiceArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryServiceCategoriesArgs = {\n  filter?: InputMaybe<ServiceCategoryFilter>;\n  sorting?: InputMaybe<Array<ServiceCategorySort>>;\n};\n\n\nexport type QueryServiceCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryServicesArgs = {\n  filter?: InputMaybe<ServiceFilter>;\n  sorting?: InputMaybe<Array<ServiceSort>>;\n};\n\nexport type Region = {\n  __typename?: 'Region';\n  currency: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id: Scalars['ID'];\n  location: Array<Array<Point>>;\n  name: Scalars['String'];\n};\n\nexport type RegionAggregateFilter = {\n  and?: InputMaybe<Array<RegionAggregateFilter>>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RegionAggregateFilter>>;\n};\n\nexport type RegionAggregateGroupBy = {\n  __typename?: 'RegionAggregateGroupBy';\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type RegionAggregateResponse = {\n  __typename?: 'RegionAggregateResponse';\n  avg?: Maybe<RegionAvgAggregate>;\n  count?: Maybe<RegionCountAggregate>;\n  groupBy?: Maybe<RegionAggregateGroupBy>;\n  max?: Maybe<RegionMaxAggregate>;\n  min?: Maybe<RegionMinAggregate>;\n  sum?: Maybe<RegionSumAggregate>;\n};\n\nexport type RegionAvgAggregate = {\n  __typename?: 'RegionAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type RegionConnection = {\n  __typename?: 'RegionConnection';\n  /** Array of nodes. */\n  nodes: Array<Region>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RegionCountAggregate = {\n  __typename?: 'RegionCountAggregate';\n  currency?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type RegionDeleteResponse = {\n  __typename?: 'RegionDeleteResponse';\n  currency?: Maybe<Scalars['String']>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['ID']>;\n  location?: Maybe<Array<Array<Point>>>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type RegionFilter = {\n  and?: InputMaybe<Array<RegionFilter>>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RegionFilter>>;\n};\n\nexport type RegionMaxAggregate = {\n  __typename?: 'RegionMaxAggregate';\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type RegionMinAggregate = {\n  __typename?: 'RegionMinAggregate';\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type RegionSort = {\n  direction: SortDirection;\n  field: RegionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RegionSortFields {\n  Currency = 'currency',\n  Id = 'id'\n}\n\nexport type RegionSumAggregate = {\n  __typename?: 'RegionSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type RemoveActivitiesFromComplaintInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveActorFromComplaintActivityInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveAddressesFromRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveAllowedServicesFromCouponInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveAssignedToFromComplaintActivityInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveComplaintsFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveConversationsFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveCouponFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveDocumentsFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveDriverFromDriverWalletInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveDriverFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveDriverTransactionsFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveEnabledServicesFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveFeedbacksFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveFleetFromFleetWalletInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveFleetTransactionsFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveMediaFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveMediaFromPaymentGatewayInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveMediaFromRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveMediaFromServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveOperatorFromDriverTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveOperatorFromFleetTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveOperatorFromRiderTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveOptionsFromServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveOrderFromComplaintInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveOrdersFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveOrdersFromRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveParametersFromFeedbackInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemovePaymentGatewayFromRiderTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveProviderTransactionsFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveRegionsFromServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveRiderFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveRiderFromRiderTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveRiderFromRiderWalletInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveRiderTransactionsFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveServiceFromOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type RemoveServicesFromServiceCategoryInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveTransactionsFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveTransactionsFromFleetInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveTransactionsFromRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveWalletsFromDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveWalletsFromFleetInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveWalletsFromRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type RequestActivity = {\n  __typename?: 'RequestActivity';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  type: RequestActivityType;\n};\n\nexport type RequestActivityAggregateFilter = {\n  and?: InputMaybe<Array<RequestActivityAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RequestActivityAggregateFilter>>;\n};\n\nexport type RequestActivityFilter = {\n  and?: InputMaybe<Array<RequestActivityFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RequestActivityFilter>>;\n};\n\nexport type RequestActivitySort = {\n  direction: SortDirection;\n  field: RequestActivitySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RequestActivitySortFields {\n  Id = 'id'\n}\n\nexport enum RequestActivityType {\n  ArrivedToDestination = 'ArrivedToDestination',\n  ArrivedToPickupPoint = 'ArrivedToPickupPoint',\n  BookedByOperator = 'BookedByOperator',\n  BookedByRider = 'BookedByRider',\n  CanceledByDriver = 'CanceledByDriver',\n  CanceledByOperator = 'CanceledByOperator',\n  CanceledByRider = 'CanceledByRider',\n  DriverAccepted = 'DriverAccepted',\n  Expired = 'Expired',\n  Paid = 'Paid',\n  RequestedByOperator = 'RequestedByOperator',\n  RequestedByRider = 'RequestedByRider',\n  Reviewed = 'Reviewed',\n  Started = 'Started'\n}\n\nexport type RequestResultItem = {\n  __typename?: 'RequestResultItem';\n  count: Scalars['Float'];\n  status: OrderStatus;\n  time: Scalars['String'];\n};\n\nexport type RequestsResults = {\n  __typename?: 'RequestsResults';\n  items: Array<RequestResultItem>;\n};\n\nexport type Rider = {\n  __typename?: 'Rider';\n  addresses: RiderAddressesConnection;\n  email?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  lastName?: Maybe<Scalars['String']>;\n  media?: Maybe<Media>;\n  mobileNumber: Scalars['String'];\n  orders: RiderOrdersConnection;\n  registrationTimestamp: Scalars['DateTime'];\n  status: RiderStatus;\n  transactions: RiderTransactionsConnection;\n  wallets: RiderWalletsConnection;\n};\n\n\nexport type RiderAddressesArgs = {\n  filter?: InputMaybe<RiderAddressFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderAddressSort>>;\n};\n\n\nexport type RiderOrdersArgs = {\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort>>;\n};\n\n\nexport type RiderTransactionsArgs = {\n  filter?: InputMaybe<RiderTransactionFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderTransactionSort>>;\n};\n\n\nexport type RiderWalletsArgs = {\n  filter?: InputMaybe<RiderWalletFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderWalletSort>>;\n};\n\nexport type RiderAddress = {\n  __typename?: 'RiderAddress';\n  details?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  location: Point;\n  riderId: Scalars['ID'];\n  title: Scalars['String'];\n  type: RiderAddressType;\n};\n\nexport type RiderAddressAggregateGroupBy = {\n  __typename?: 'RiderAddressAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderAddressAvgAggregate = {\n  __typename?: 'RiderAddressAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderAddressConnection = {\n  __typename?: 'RiderAddressConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderAddress>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RiderAddressCountAggregate = {\n  __typename?: 'RiderAddressCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n  riderId?: Maybe<Scalars['Int']>;\n};\n\nexport type RiderAddressFilter = {\n  and?: InputMaybe<Array<RiderAddressFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderAddressFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderAddressMaxAggregate = {\n  __typename?: 'RiderAddressMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderAddressMinAggregate = {\n  __typename?: 'RiderAddressMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderAddressSort = {\n  direction: SortDirection;\n  field: RiderAddressSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderAddressSortFields {\n  Id = 'id',\n  RiderId = 'riderId'\n}\n\nexport type RiderAddressSumAggregate = {\n  __typename?: 'RiderAddressSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport enum RiderAddressType {\n  Cafe = 'Cafe',\n  Gym = 'Gym',\n  Home = 'Home',\n  Other = 'Other',\n  Parent = 'Parent',\n  Park = 'Park',\n  Partner = 'Partner',\n  Work = 'Work'\n}\n\nexport type RiderAddressUpdateFilter = {\n  and?: InputMaybe<Array<RiderAddressUpdateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderAddressUpdateFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderAddressesConnection = {\n  __typename?: 'RiderAddressesConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderAddress>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RiderAggregateGroupBy = {\n  __typename?: 'RiderAggregateGroupBy';\n  firstName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n};\n\nexport type RiderAvgAggregate = {\n  __typename?: 'RiderAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderConnection = {\n  __typename?: 'RiderConnection';\n  /** Array of nodes. */\n  nodes: Array<Rider>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RiderCountAggregate = {\n  __typename?: 'RiderCountAggregate';\n  firstName?: Maybe<Scalars['Int']>;\n  gender?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  lastName?: Maybe<Scalars['Int']>;\n  mobileNumber?: Maybe<Scalars['Int']>;\n};\n\nexport enum RiderDeductTransactionType {\n  Correction = 'Correction',\n  OrderFee = 'OrderFee',\n  Withdraw = 'Withdraw'\n}\n\nexport type RiderFilter = {\n  and?: InputMaybe<Array<RiderFilter>>;\n  firstName?: InputMaybe<StringFieldComparison>;\n  gender?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  lastName?: InputMaybe<StringFieldComparison>;\n  mobileNumber?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<RiderFilter>>;\n};\n\nexport type RiderMaxAggregate = {\n  __typename?: 'RiderMaxAggregate';\n  firstName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n};\n\nexport type RiderMinAggregate = {\n  __typename?: 'RiderMinAggregate';\n  firstName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  lastName?: Maybe<Scalars['String']>;\n  mobileNumber?: Maybe<Scalars['String']>;\n};\n\nexport type RiderOrdersConnection = {\n  __typename?: 'RiderOrdersConnection';\n  /** Array of nodes. */\n  nodes: Array<Order>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport enum RiderRechargeTransactionType {\n  BankTransfer = 'BankTransfer',\n  Correction = 'Correction',\n  Gift = 'Gift',\n  InAppPayment = 'InAppPayment'\n}\n\nexport type RiderSort = {\n  direction: SortDirection;\n  field: RiderSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderSortFields {\n  FirstName = 'firstName',\n  Gender = 'gender',\n  Id = 'id',\n  LastName = 'lastName',\n  MobileNumber = 'mobileNumber'\n}\n\nexport enum RiderStatus {\n  Disabled = 'Disabled',\n  Enabled = 'Enabled'\n}\n\nexport type RiderSumAggregate = {\n  __typename?: 'RiderSumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderTransaction = {\n  __typename?: 'RiderTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  currency: Scalars['String'];\n  deductType?: Maybe<RiderDeductTransactionType>;\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  operator?: Maybe<Operator>;\n  operatorId?: Maybe<Scalars['ID']>;\n  paymentGateway?: Maybe<PaymentGateway>;\n  paymentGatewayId?: Maybe<Scalars['ID']>;\n  rechargeType?: Maybe<RiderRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']>;\n  requestId?: Maybe<Scalars['ID']>;\n  rider: Rider;\n  riderId: Scalars['ID'];\n  status: TransactionStatus;\n};\n\nexport type RiderTransactionAggregateFilter = {\n  amount?: InputMaybe<FloatFieldComparison>;\n  and?: InputMaybe<Array<RiderTransactionAggregateFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderTransactionAggregateFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderTransactionAggregateGroupBy = {\n  __typename?: 'RiderTransactionAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderTransactionAvgAggregate = {\n  __typename?: 'RiderTransactionAvgAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderTransactionConnection = {\n  __typename?: 'RiderTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RiderTransactionCountAggregate = {\n  __typename?: 'RiderTransactionCountAggregate';\n  amount?: Maybe<Scalars['Int']>;\n  createdAt?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  riderId?: Maybe<Scalars['Int']>;\n};\n\nexport type RiderTransactionFilter = {\n  amount?: InputMaybe<FloatFieldComparison>;\n  and?: InputMaybe<Array<RiderTransactionFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderTransactionFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float'];\n  currency: Scalars['String'];\n  deductType?: InputMaybe<RiderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']>;\n  rechargeType?: InputMaybe<RiderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']>;\n  riderId: Scalars['ID'];\n};\n\nexport type RiderTransactionMaxAggregate = {\n  __typename?: 'RiderTransactionMaxAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderTransactionMinAggregate = {\n  __typename?: 'RiderTransactionMinAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  currency?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderTransactionSort = {\n  direction: SortDirection;\n  field: RiderTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderTransactionSortFields {\n  Amount = 'amount',\n  CreatedAt = 'createdAt',\n  Currency = 'currency',\n  Id = 'id',\n  RiderId = 'riderId'\n}\n\nexport type RiderTransactionSumAggregate = {\n  __typename?: 'RiderTransactionSumAggregate';\n  amount?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderTransactionsConnection = {\n  __typename?: 'RiderTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RiderWallet = {\n  __typename?: 'RiderWallet';\n  balance: Scalars['Float'];\n  currency: Scalars['String'];\n  id: Scalars['ID'];\n  rider: Rider;\n  riderId: Scalars['ID'];\n};\n\nexport type RiderWalletAggregateGroupBy = {\n  __typename?: 'RiderWalletAggregateGroupBy';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderWalletAvgAggregate = {\n  __typename?: 'RiderWalletAvgAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderWalletConnection = {\n  __typename?: 'RiderWalletConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type RiderWalletCountAggregate = {\n  __typename?: 'RiderWalletCountAggregate';\n  balance?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  riderId?: Maybe<Scalars['Int']>;\n};\n\nexport type RiderWalletFilter = {\n  and?: InputMaybe<Array<RiderWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderWalletFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderWalletMaxAggregate = {\n  __typename?: 'RiderWalletMaxAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderWalletMinAggregate = {\n  __typename?: 'RiderWalletMinAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['ID']>;\n  riderId?: Maybe<Scalars['ID']>;\n};\n\nexport type RiderWalletSort = {\n  direction: SortDirection;\n  field: RiderWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderWalletSortFields {\n  Balance = 'balance',\n  Id = 'id',\n  RiderId = 'riderId'\n}\n\nexport type RiderWalletSumAggregate = {\n  __typename?: 'RiderWalletSumAggregate';\n  balance?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  riderId?: Maybe<Scalars['Float']>;\n};\n\nexport type RiderWalletsConnection = {\n  __typename?: 'RiderWalletsConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int'];\n};\n\nexport type Service = {\n  __typename?: 'Service';\n  baseFare: Scalars['Float'];\n  cancellationDriverShare: Scalars['Float'];\n  cancellationTotalFee: Scalars['Float'];\n  categoryId: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  distanceMultipliers: Array<DistanceMultiplier>;\n  id: Scalars['ID'];\n  maximumDestinationDistance: Scalars['Int'];\n  media: Media;\n  mediaId: Scalars['ID'];\n  minimumFee: Scalars['Float'];\n  name: Scalars['String'];\n  options: ServiceOption;\n  paymentMethod: ServicePaymentMethod;\n  perHundredMeters: Scalars['Float'];\n  perMinuteDrive: Scalars['Float'];\n  perMinuteWait: Scalars['Float'];\n  personCapacity?: Maybe<Scalars['Int']>;\n  prepayPercent: Scalars['Float'];\n  providerShareFlat: Scalars['Float'];\n  providerSharePercent: Scalars['Int'];\n  regions: Array<Region>;\n  roundingFactor?: Maybe<Scalars['Float']>;\n  searchRadius: Scalars['Int'];\n  timeMultipliers: Array<TimeMultiplier>;\n  twoWayAvailable: Scalars['Boolean'];\n};\n\n\nexport type ServiceRegionsArgs = {\n  filter?: InputMaybe<RegionFilter>;\n  sorting?: InputMaybe<Array<RegionSort>>;\n};\n\nexport type ServiceAggregateFilter = {\n  and?: InputMaybe<Array<ServiceAggregateFilter>>;\n  categoryId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceAggregateFilter>>;\n};\n\nexport type ServiceAggregateGroupBy = {\n  __typename?: 'ServiceAggregateGroupBy';\n  categoryId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ServiceAvgAggregate = {\n  __typename?: 'ServiceAvgAggregate';\n  categoryId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ServiceCategory = {\n  __typename?: 'ServiceCategory';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  services: Array<Service>;\n};\n\n\nexport type ServiceCategoryServicesArgs = {\n  filter?: InputMaybe<ServiceFilter>;\n  sorting?: InputMaybe<Array<ServiceSort>>;\n};\n\nexport type ServiceCategoryAggregateGroupBy = {\n  __typename?: 'ServiceCategoryAggregateGroupBy';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ServiceCategoryAvgAggregate = {\n  __typename?: 'ServiceCategoryAvgAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ServiceCategoryCountAggregate = {\n  __typename?: 'ServiceCategoryCountAggregate';\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type ServiceCategoryDeleteResponse = {\n  __typename?: 'ServiceCategoryDeleteResponse';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type ServiceCategoryFilter = {\n  and?: InputMaybe<Array<ServiceCategoryFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceCategoryFilter>>;\n};\n\nexport type ServiceCategoryMaxAggregate = {\n  __typename?: 'ServiceCategoryMaxAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ServiceCategoryMinAggregate = {\n  __typename?: 'ServiceCategoryMinAggregate';\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ServiceCategorySort = {\n  direction: SortDirection;\n  field: ServiceCategorySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ServiceCategorySortFields {\n  Id = 'id'\n}\n\nexport type ServiceCategorySumAggregate = {\n  __typename?: 'ServiceCategorySumAggregate';\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ServiceCategoryWithCost = {\n  __typename?: 'ServiceCategoryWithCost';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  services: Array<ServiceWithCost>;\n};\n\nexport type ServiceCountAggregate = {\n  __typename?: 'ServiceCountAggregate';\n  categoryId?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type ServiceDeleteResponse = {\n  __typename?: 'ServiceDeleteResponse';\n  baseFare?: Maybe<Scalars['Float']>;\n  cancellationDriverShare?: Maybe<Scalars['Float']>;\n  cancellationTotalFee?: Maybe<Scalars['Float']>;\n  categoryId?: Maybe<Scalars['ID']>;\n  description?: Maybe<Scalars['String']>;\n  distanceMultipliers?: Maybe<Array<DistanceMultiplier>>;\n  id?: Maybe<Scalars['ID']>;\n  maximumDestinationDistance?: Maybe<Scalars['Int']>;\n  mediaId?: Maybe<Scalars['ID']>;\n  minimumFee?: Maybe<Scalars['Float']>;\n  name?: Maybe<Scalars['String']>;\n  paymentMethod?: Maybe<ServicePaymentMethod>;\n  perHundredMeters?: Maybe<Scalars['Float']>;\n  perMinuteDrive?: Maybe<Scalars['Float']>;\n  perMinuteWait?: Maybe<Scalars['Float']>;\n  personCapacity?: Maybe<Scalars['Int']>;\n  prepayPercent?: Maybe<Scalars['Float']>;\n  providerShareFlat?: Maybe<Scalars['Float']>;\n  providerSharePercent?: Maybe<Scalars['Int']>;\n  roundingFactor?: Maybe<Scalars['Float']>;\n  searchRadius?: Maybe<Scalars['Int']>;\n  timeMultipliers?: Maybe<Array<TimeMultiplier>>;\n  twoWayAvailable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ServiceFilter = {\n  and?: InputMaybe<Array<ServiceFilter>>;\n  categoryId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceFilter>>;\n};\n\nexport type ServiceMaxAggregate = {\n  __typename?: 'ServiceMaxAggregate';\n  categoryId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ServiceMinAggregate = {\n  __typename?: 'ServiceMinAggregate';\n  categoryId?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type ServiceOption = {\n  __typename?: 'ServiceOption';\n  additionalFee?: Maybe<Scalars['Float']>;\n  icon: ServiceOptionIcon;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  serviceId: Scalars['ID'];\n  type: ServiceOptionType;\n};\n\nexport enum ServiceOptionIcon {\n  Custom1 = 'Custom1',\n  Custom2 = 'Custom2',\n  Custom3 = 'Custom3',\n  Custom4 = 'Custom4',\n  Custom5 = 'Custom5',\n  Luggage = 'Luggage',\n  PackageDelivery = 'PackageDelivery',\n  Pet = 'Pet',\n  Shopping = 'Shopping',\n  TwoWay = 'TwoWay'\n}\n\nexport enum ServiceOptionType {\n  Free = 'Free',\n  Paid = 'Paid',\n  TwoWay = 'TwoWay'\n}\n\nexport enum ServicePaymentMethod {\n  CashCredit = 'CashCredit',\n  OnlyCash = 'OnlyCash',\n  OnlyCredit = 'OnlyCredit'\n}\n\nexport type ServiceSort = {\n  direction: SortDirection;\n  field: ServiceSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ServiceSortFields {\n  CategoryId = 'categoryId',\n  Id = 'id'\n}\n\nexport type ServiceSumAggregate = {\n  __typename?: 'ServiceSumAggregate';\n  categoryId?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\nexport type ServiceWithCost = {\n  __typename?: 'ServiceWithCost';\n  cost: Scalars['Float'];\n  id: Scalars['ID'];\n  media: Media;\n  name: Scalars['String'];\n};\n\nexport type SetActivitiesOnComplaintInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetActorOnComplaintActivityInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetAddressesOnRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetAllowedServicesOnCouponInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetAssignedToOnComplaintActivityInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetComplaintsOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetConversationsOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetCouponOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetDocumentsOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetDriverOnDriverWalletInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetDriverOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetDriverTransactionsOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetEnabledServicesOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetFeedbacksOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetFleetOnFleetWalletInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetFleetTransactionsOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetMediaOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetMediaOnPaymentGatewayInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetMediaOnRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetMediaOnServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetOperatorOnDriverTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetOperatorOnFleetTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetOperatorOnRiderTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetOptionsOnServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetOrderOnComplaintInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetOrdersOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetOrdersOnRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetParametersOnFeedbackInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetPaymentGatewayOnRiderTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetProviderTransactionsOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetRegionsOnServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetRiderOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetRiderOnRiderTransactionInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetRiderOnRiderWalletInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetRiderTransactionsOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetServiceOnOrderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The id of relation. */\n  relationId: Scalars['ID'];\n};\n\nexport type SetServicesOnServiceCategoryInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetTransactionsOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetTransactionsOnFleetInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetTransactionsOnRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetWalletsOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetWalletsOnFleetInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\nexport type SetWalletsOnRiderInput = {\n  /** The id of the record. */\n  id: Scalars['ID'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']>;\n};\n\n/** Sort Directions */\nexport enum SortDirection {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\n/** Sort Nulls Options */\nexport enum SortNulls {\n  NullsFirst = 'NULLS_FIRST',\n  NullsLast = 'NULLS_LAST'\n}\n\nexport type StringFieldComparison = {\n  eq?: InputMaybe<Scalars['String']>;\n  gt?: InputMaybe<Scalars['String']>;\n  gte?: InputMaybe<Scalars['String']>;\n  iLike?: InputMaybe<Scalars['String']>;\n  in?: InputMaybe<Array<Scalars['String']>>;\n  is?: InputMaybe<Scalars['Boolean']>;\n  isNot?: InputMaybe<Scalars['Boolean']>;\n  like?: InputMaybe<Scalars['String']>;\n  lt?: InputMaybe<Scalars['String']>;\n  lte?: InputMaybe<Scalars['String']>;\n  neq?: InputMaybe<Scalars['String']>;\n  notILike?: InputMaybe<Scalars['String']>;\n  notIn?: InputMaybe<Array<Scalars['String']>>;\n  notLike?: InputMaybe<Scalars['String']>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  orderUpdated: Order;\n};\n\n\nexport type SubscriptionOrderUpdatedArgs = {\n  orderId: Scalars['ID'];\n};\n\nexport type TimeMultiplier = {\n  __typename?: 'TimeMultiplier';\n  endTime: Scalars['String'];\n  multiply: Scalars['Float'];\n  startTime: Scalars['String'];\n};\n\nexport type TimeMultiplierInput = {\n  endTime: Scalars['String'];\n  multiply: Scalars['Float'];\n  startTime: Scalars['String'];\n};\n\nexport type TokenObject = {\n  __typename?: 'TokenObject';\n  token: Scalars['String'];\n};\n\nexport enum TransactionAction {\n  Deduct = 'Deduct',\n  Recharge = 'Recharge'\n}\n\nexport enum TransactionStatus {\n  Canceled = 'Canceled',\n  Done = 'Done',\n  Processing = 'Processing',\n  Rejected = 'Rejected'\n}\n\nexport type UpdateAnnouncement = {\n  description?: InputMaybe<Scalars['String']>;\n  expireAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  startAt?: InputMaybe<Scalars['DateTime']>;\n  title?: InputMaybe<Scalars['String']>;\n  url?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateCarColor = {\n  id?: InputMaybe<Scalars['ID']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateCarModel = {\n  id?: InputMaybe<Scalars['ID']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateComplaint = {\n  content?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  inscriptionTimestamp?: InputMaybe<Scalars['DateTime']>;\n  requestId?: InputMaybe<Scalars['ID']>;\n  requestedByDriver?: InputMaybe<Scalars['Boolean']>;\n  status?: InputMaybe<ComplaintStatus>;\n  subject?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateConfigResult = {\n  __typename?: 'UpdateConfigResult';\n  message?: Maybe<Scalars['String']>;\n  status: UpdateConfigStatus;\n};\n\nexport enum UpdateConfigStatus {\n  Invalid = 'INVALID',\n  Ok = 'OK'\n}\n\nexport type UpdateCoupon = {\n  code?: InputMaybe<Scalars['String']>;\n  creditGift?: InputMaybe<Scalars['Float']>;\n  description?: InputMaybe<Scalars['String']>;\n  discountFlat?: InputMaybe<Scalars['Int']>;\n  discountPercent?: InputMaybe<Scalars['Int']>;\n  expireAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  isEnabled?: InputMaybe<Scalars['Boolean']>;\n  isFirstTravelOnly?: InputMaybe<Scalars['Boolean']>;\n  manyTimesUserCanUse?: InputMaybe<Scalars['Int']>;\n  manyUsersCanUse?: InputMaybe<Scalars['Int']>;\n  maximumCost?: InputMaybe<Scalars['Float']>;\n  minimumCost?: InputMaybe<Scalars['Float']>;\n  startAt?: InputMaybe<Scalars['DateTime']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateDriverInput = {\n  accountNumber?: InputMaybe<Scalars['String']>;\n  address?: InputMaybe<Scalars['String']>;\n  bankName?: InputMaybe<Scalars['String']>;\n  bankRoutingNumber?: InputMaybe<Scalars['String']>;\n  bankSwift?: InputMaybe<Scalars['String']>;\n  carColorId?: InputMaybe<Scalars['ID']>;\n  carId?: InputMaybe<Scalars['ID']>;\n  carPlate?: InputMaybe<Scalars['String']>;\n  carProductionYear?: InputMaybe<Scalars['Float']>;\n  certificateNumber?: InputMaybe<Scalars['String']>;\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  fleetId?: InputMaybe<Scalars['ID']>;\n  gender?: InputMaybe<Gender>;\n  lastName?: InputMaybe<Scalars['String']>;\n  mediaId?: InputMaybe<Scalars['ID']>;\n  softRejectionNote?: InputMaybe<Scalars['String']>;\n  status?: InputMaybe<DriverStatus>;\n};\n\nexport type UpdateFeedback = {\n  description?: InputMaybe<Scalars['String']>;\n  driverId?: InputMaybe<Scalars['ID']>;\n  id?: InputMaybe<Scalars['ID']>;\n  requestId?: InputMaybe<Scalars['ID']>;\n  reviewTimestamp?: InputMaybe<Scalars['DateTime']>;\n  score?: InputMaybe<Scalars['Int']>;\n};\n\nexport type UpdateFeedbackParameter = {\n  id?: InputMaybe<Scalars['ID']>;\n  isGood?: InputMaybe<Scalars['Boolean']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateFleet = {\n  accountNumber?: InputMaybe<Scalars['String']>;\n  address?: InputMaybe<Scalars['String']>;\n  commissionShareFlat?: InputMaybe<Scalars['Float']>;\n  commissionSharePercent?: InputMaybe<Scalars['Float']>;\n  exclusivityAreas?: InputMaybe<Array<Array<PointInput>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  mobileNumber?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateManyResponse = {\n  __typename?: 'UpdateManyResponse';\n  /** The number of records updated. */\n  updatedCount: Scalars['Int'];\n};\n\nexport type UpdateManyRiderAddressesInput = {\n  /** Filter used to find fields to update */\n  filter: RiderAddressUpdateFilter;\n  /** The update to apply to all records found using the filter */\n  update: UpdateRiderAddress;\n};\n\nexport type UpdateOneAnnouncementInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateAnnouncement;\n};\n\nexport type UpdateOneCarColorInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateCarColor;\n};\n\nexport type UpdateOneCarModelInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateCarModel;\n};\n\nexport type UpdateOneComplaintInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateComplaint;\n};\n\nexport type UpdateOneCouponInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateCoupon;\n};\n\nexport type UpdateOneDriverInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateDriverInput;\n};\n\nexport type UpdateOneFeedbackInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateFeedback;\n};\n\nexport type UpdateOneFeedbackParameterInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateFeedbackParameter;\n};\n\nexport type UpdateOneFleetInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateFleet;\n};\n\nexport type UpdateOneOperatorInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateOperator;\n};\n\nexport type UpdateOneOperatorRoleInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateOperatorRole;\n};\n\nexport type UpdateOnePaymentGatewayInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdatePaymentGateway;\n};\n\nexport type UpdateOneRegionInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateRegion;\n};\n\nexport type UpdateOneRiderAddressInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateRiderAddress;\n};\n\nexport type UpdateOneRiderInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateRider;\n};\n\nexport type UpdateOneServiceCategoryInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateServiceCategory;\n};\n\nexport type UpdateOneServiceInput = {\n  /** The id of the record to update */\n  id: Scalars['ID'];\n  /** The update to apply. */\n  update: UpdateService;\n};\n\nexport type UpdateOperator = {\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  mobileNumber?: InputMaybe<Scalars['String']>;\n  roleId?: InputMaybe<Scalars['ID']>;\n  userName?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateOperatorRole = {\n  id?: InputMaybe<Scalars['ID']>;\n  permissions?: InputMaybe<Array<OperatorPermission>>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdatePasswordInput = {\n  newPasswod: Scalars['String'];\n  oldPassword: Scalars['String'];\n};\n\nexport type UpdatePaymentGateway = {\n  enabled?: InputMaybe<Scalars['Boolean']>;\n  id?: InputMaybe<Scalars['ID']>;\n  mediaId?: InputMaybe<Scalars['Float']>;\n  merchantId?: InputMaybe<Scalars['String']>;\n  privateKey?: InputMaybe<Scalars['String']>;\n  publicKey?: InputMaybe<Scalars['String']>;\n  saltKey?: InputMaybe<Scalars['String']>;\n  title?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<PaymentGatewayType>;\n};\n\nexport type UpdatePurchaseCodeClient = {\n  __typename?: 'UpdatePurchaseCodeClient';\n  enabled: Scalars['Float'];\n  first_verified_at: Scalars['String'];\n  id: Scalars['Float'];\n  ip: Scalars['String'];\n  last_verified_at: Scalars['String'];\n  port: Scalars['Float'];\n  purchase_id: Scalars['Float'];\n  token: Scalars['String'];\n};\n\nexport type UpdatePurchaseCodeResult = {\n  __typename?: 'UpdatePurchaseCodeResult';\n  clients?: Maybe<Array<UpdatePurchaseCodeClient>>;\n  status: UpdatePurchaseCodeStatus;\n};\n\nexport enum UpdatePurchaseCodeStatus {\n  ClientFound = 'CLIENT_FOUND',\n  Invalid = 'INVALID',\n  Ok = 'OK',\n  Overused = 'OVERUSED'\n}\n\nexport type UpdateRegion = {\n  currency?: InputMaybe<Scalars['String']>;\n  enabled?: InputMaybe<Scalars['Boolean']>;\n  id?: InputMaybe<Scalars['ID']>;\n  location?: InputMaybe<Array<Array<PointInput>>>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateRider = {\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  gender?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  mobileNumber?: InputMaybe<Scalars['String']>;\n  registrationTimestamp?: InputMaybe<Scalars['DateTime']>;\n  status?: InputMaybe<RiderStatus>;\n};\n\nexport type UpdateRiderAddress = {\n  details?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  location?: InputMaybe<PointInput>;\n  riderId?: InputMaybe<Scalars['ID']>;\n  title?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<RiderAddressType>;\n};\n\nexport type UpdateService = {\n  baseFare?: InputMaybe<Scalars['Float']>;\n  cancellationDriverShare?: InputMaybe<Scalars['Float']>;\n  cancellationTotalFee?: InputMaybe<Scalars['Float']>;\n  categoryId?: InputMaybe<Scalars['ID']>;\n  description?: InputMaybe<Scalars['String']>;\n  distanceMultipliers?: InputMaybe<Array<DistanceMultiplierInput>>;\n  id?: InputMaybe<Scalars['ID']>;\n  maximumDestinationDistance?: InputMaybe<Scalars['Int']>;\n  mediaId?: InputMaybe<Scalars['ID']>;\n  minimumFee?: InputMaybe<Scalars['Float']>;\n  name?: InputMaybe<Scalars['String']>;\n  paymentMethod?: InputMaybe<ServicePaymentMethod>;\n  perHundredMeters?: InputMaybe<Scalars['Float']>;\n  perMinuteDrive?: InputMaybe<Scalars['Float']>;\n  perMinuteWait?: InputMaybe<Scalars['Float']>;\n  personCapacity?: InputMaybe<Scalars['Int']>;\n  prepayPercent?: InputMaybe<Scalars['Float']>;\n  providerShareFlat?: InputMaybe<Scalars['Float']>;\n  providerSharePercent?: InputMaybe<Scalars['Int']>;\n  roundingFactor?: InputMaybe<Scalars['Float']>;\n  searchRadius?: InputMaybe<Scalars['Int']>;\n  timeMultipliers?: InputMaybe<Array<TimeMultiplierInput>>;\n  twoWayAvailable?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type UpdateServiceCategory = {\n  id?: InputMaybe<Scalars['ID']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type ViewComplaintQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewComplaintQuery = { __typename?: 'Query', complaint?: { __typename?: 'Complaint', id: string, inscriptionTimestamp: any, status: ComplaintStatus, subject: string, content?: string | null, requestedByDriver: boolean, activities: Array<{ __typename?: 'ComplaintActivity', type: ComplaintActivityType, comment?: string | null, actor: { __typename?: 'Operator', firstName?: string | null, lastName?: string | null }, assignedTo?: { __typename?: 'Operator', firstName?: string | null, lastName?: string | null } | null }>, order: { __typename?: 'Order', id: string, status: OrderStatus, createdOn: any, startTimestamp?: any | null, finishTimestamp?: any | null, expectedTimestamp?: any | null, costBest: number, costAfterCoupon: number, addresses: Array<string>, currency: string, rider: { __typename?: 'Rider', id: string, mobileNumber: string, status: RiderStatus, firstName?: string | null, lastName?: string | null, registrationTimestamp: any }, driver?: { __typename?: 'Driver', id: string, mobileNumber: string, status: DriverStatus, firstName?: string | null, lastName?: string | null, registrationTimestamp: any } | null } } | null };\n\nexport type UpdateComplaintStatusMutationVariables = Exact<{\n  id: Scalars['ID'];\n  status: ComplaintStatus;\n}>;\n\n\nexport type UpdateComplaintStatusMutation = { __typename?: 'Mutation', updateOneComplaint: { __typename?: 'Complaint', id: string } };\n\nexport type ComplaintsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type ComplaintsListQuery = { __typename?: 'Query', complaints: { __typename?: 'ComplaintConnection', totalCount: number, nodes: Array<{ __typename?: 'Complaint', id: string, inscriptionTimestamp: any, subject: string, status: ComplaintStatus, content?: string | null }> } };\n\nexport type CreateDriverMutationVariables = Exact<{\n  input: CreateDriver;\n}>;\n\n\nexport type CreateDriverMutation = { __typename?: 'Mutation', createOneDriver: { __typename?: 'Driver', id: string } };\n\nexport type ViewDriverQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewDriverQuery = { __typename?: 'Query', driver?: { __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, lastSeenTimestamp?: any | null, status: DriverStatus, gender?: Gender | null, carId?: string | null, carColorId?: string | null, fleetId?: string | null, carProductionYear?: number | null, carPlate?: string | null, accountNumber?: string | null, bankName?: string | null, bankRoutingNumber?: string | null, bankSwift?: string | null, address?: string | null, email?: string | null, rating?: number | null, reviewCount: number, enabledServices: Array<{ __typename?: 'Service', id: string }>, documents: Array<{ __typename?: 'Media', id: string, address: string }>, media?: { __typename?: 'Media', address: string } | null } | null, services: Array<{ __typename?: 'Service', id: string, name: string }>, fleets: { __typename?: 'FleetConnection', nodes: Array<{ __typename?: 'Fleet', id: string, name: string }> }, carModels: { __typename?: 'CarModelConnection', nodes: Array<{ __typename?: 'CarModel', id: string, name: string }> }, carColors: Array<{ __typename?: 'CarColor', id: string, name: string }> };\n\nexport type UpdateDriverProfileMutationVariables = Exact<{\n  id: Scalars['ID'];\n  update: UpdateDriverInput;\n  serviceIds: Array<Scalars['ID']> | Scalars['ID'];\n}>;\n\n\nexport type UpdateDriverProfileMutation = { __typename?: 'Mutation', updateOneDriver: { __typename?: 'Driver', id: string }, setEnabledServicesOnDriver: { __typename?: 'Driver', id: string } };\n\nexport type UpdateDriverStatusMutationVariables = Exact<{\n  id: Scalars['ID'];\n  status?: InputMaybe<DriverStatus>;\n}>;\n\n\nexport type UpdateDriverStatusMutation = { __typename?: 'Mutation', updateOneDriver: { __typename?: 'Driver', id: string } };\n\nexport type DriverFinancialsQueryVariables = Exact<{\n  id: Scalars['ID'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<DriverTransactionFilter>;\n  sorting?: InputMaybe<Array<DriverTransactionSort> | DriverTransactionSort>;\n}>;\n\n\nexport type DriverFinancialsQuery = { __typename?: 'Query', driver?: { __typename?: 'Driver', transactions: { __typename?: 'DriverTransactionsConnection', totalCount: number, nodes: Array<{ __typename?: 'DriverTransaction', status: TransactionStatus, createdAt: any, amount: number, description?: string | null, currency: string, action: TransactionAction, deductType?: DriverDeductTransactionType | null, rechargeType?: DriverRechargeTransactionType | null, refrenceNumber?: string | null, requestId?: number | null, paymentGatewayId?: number | null, operatorId?: string | null }> }, wallets: Array<{ __typename?: 'DriverWallet', balance: number, currency: string }> } | null, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type DriverFeedbacksQueryVariables = Exact<{\n  id: Scalars['ID'];\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type DriverFeedbacksQuery = { __typename?: 'Query', feedbacks: { __typename?: 'FeedbackConnection', nodes: Array<{ __typename?: 'Feedback', id: string, requestId: string, reviewTimestamp: any, score: number, description?: string | null, parameters: Array<{ __typename?: 'FeedbackParameter', isGood: boolean, title: string }> }> } };\n\nexport type DriverOrdersQueryVariables = Exact<{\n  driverId: Scalars['ID'];\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort> | OrderSort>;\n}>;\n\n\nexport type DriverOrdersQuery = { __typename?: 'Query', driver?: { __typename?: 'Driver', orders: { __typename?: 'DriverOrdersConnection', totalCount: number, nodes: Array<{ __typename?: 'Order', id: string, createdOn: any, status: OrderStatus, distanceBest: number, durationBest: number, costBest: number, costAfterCoupon: number, currency: string, addresses: Array<string>, expectedTimestamp?: any | null, points: Array<{ __typename?: 'Point', lat: number, lng: number }> }> } } | null };\n\nexport type CreateDriverTransactionMutationVariables = Exact<{\n  input: DriverTransactionInput;\n}>;\n\n\nexport type CreateDriverTransactionMutation = { __typename?: 'Mutation', createDriverTransaction: { __typename?: 'DriverWallet', id: string } };\n\nexport type DriversListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<DriverFilter>;\n  sorting?: InputMaybe<Array<DriverSort> | DriverSort>;\n}>;\n\n\nexport type DriversListQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', totalCount: number, nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, gender?: Gender | null, mobileNumber: string, status: DriverStatus }> } };\n\nexport type ProviderWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type ProviderWalletsListQuery = { __typename?: 'Query', providerTransactions: { __typename?: 'ProviderTransactionConnection', totalCount: number, nodes: Array<{ __typename?: 'ProviderTransaction', createdAt: any, action: TransactionAction, deductType?: ProviderDeductTransactionType | null, rechargeType?: ProviderRechargeTransactionType | null, amount: number, currency: string, description?: string | null, requestId?: string | null, operatorId?: string | null }> }, providerWallets: Array<{ __typename?: 'ProviderWallet', balance: number, currency: string }>, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type ExportQueryVariables = Exact<{\n  input: ExportArgs;\n}>;\n\n\nexport type ExportQuery = { __typename?: 'Query', export: { __typename?: 'ExportResult', url: string } };\n\nexport type DriverWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type DriverWalletsListQuery = { __typename?: 'Query', driverWallets: { __typename?: 'DriverWalletConnection', totalCount: number, nodes: Array<{ __typename?: 'DriverWallet', id: string, driverId: string, balance: number, currency: string, driver: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null } }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type FleetWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<FleetWalletFilter>;\n}>;\n\n\nexport type FleetWalletsListQuery = { __typename?: 'Query', fleetWallets: { __typename?: 'FleetWalletConnection', totalCount: number, nodes: Array<{ __typename?: 'FleetWallet', id: string, balance: number, currency: string, fleetId: string, fleet: { __typename?: 'Fleet', name: string } }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type RiderWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RiderWalletsListQuery = { __typename?: 'Query', riderWallets: { __typename?: 'RiderWalletConnection', totalCount: number, nodes: Array<{ __typename?: 'RiderWallet', balance: number, currency: string, riderId: string, rider: { __typename?: 'Rider', firstName?: string | null, lastName?: string | null } }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type DispatcherCalculateFareQueryVariables = Exact<{\n  points: Array<PointInput> | PointInput;\n}>;\n\n\nexport type DispatcherCalculateFareQuery = { __typename?: 'Query', calculateFare: { __typename?: 'CalculateFareDTO', currency: string, distance: number, duration: number, services: Array<{ __typename?: 'ServiceCategoryWithCost', name: string, services: Array<{ __typename?: 'ServiceWithCost', id: string, name: string, cost: number }> }> } };\n\nexport type CreateOrderMutationVariables = Exact<{\n  riderId: Scalars['ID'];\n  points: Array<PointInput> | PointInput;\n  addresses: Array<Scalars['String']> | Scalars['String'];\n  serviceId: Scalars['ID'];\n}>;\n\n\nexport type CreateOrderMutation = { __typename?: 'Mutation', createOrder: { __typename?: 'Order', id: string } };\n\nexport type OrderUpdatedSubscriptionVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type OrderUpdatedSubscription = { __typename?: 'Subscription', orderUpdated: { __typename?: 'Order', id: string, status: OrderStatus, driver?: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null, mobileNumber: string } | null } };\n\nexport type CancelOrderMutationVariables = Exact<{\n  orderId: Scalars['ID'];\n}>;\n\n\nexport type CancelOrderMutation = { __typename?: 'Mutation', cancelOrder: { __typename?: 'Order', id: string, status: OrderStatus } };\n\nexport type DriverOverviewInfoFragment = { __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, status: DriverStatus };\n\nexport type DriverLocationFragment = { __typename?: 'OnlineDriver', driverId: number, lastUpdatedAt: number, location: { __typename?: 'Point', lat: number, lng: number } };\n\nexport type OverviewQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type OverviewQuery = { __typename?: 'Query', complaintAggregate: Array<{ __typename?: 'ComplaintAggregateResponse', count?: { __typename?: 'ComplaintCountAggregate', id?: number | null } | null }>, driverAggregate: Array<{ __typename?: 'DriverAggregateResponse', count?: { __typename?: 'DriverCountAggregate', id?: number | null } | null }>, activeOrders: Array<{ __typename?: 'OrderAggregateResponse', count?: { __typename?: 'OrderCountAggregate', id?: number | null } | null }>, bookedOrders: Array<{ __typename?: 'OrderAggregateResponse', count?: { __typename?: 'OrderCountAggregate', id?: number | null } | null }>, getDriversLocation: Array<{ __typename?: 'OnlineDriver', driverId: number, lastUpdatedAt: number, location: { __typename?: 'Point', lat: number, lng: number } }>, drivers: { __typename?: 'DriverConnection', totalCount: number, nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, status: DriverStatus }> } };\n\nexport type OverviewDriverPagingQueryVariables = Exact<{\n  offset: Scalars['Int'];\n}>;\n\n\nexport type OverviewDriverPagingQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', totalCount: number, nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, status: DriverStatus }> } };\n\nexport type RequestsChartQueryVariables = Exact<{\n  timeframe: ChartTimeframe;\n}>;\n\n\nexport type RequestsChartQuery = { __typename?: 'Query', requestChart: { __typename?: 'RequestsResults', items: Array<{ __typename?: 'RequestResultItem', time: string, count: number, status: OrderStatus }> } };\n\nexport type IncomeChartQueryVariables = Exact<{\n  timeframe: ChartTimeframe;\n}>;\n\n\nexport type IncomeChartQuery = { __typename?: 'Query', incomeChart: { __typename?: 'IncomeResults', items: Array<{ __typename?: 'IncomeResultItem', time: string, sum: number, currency: string }> } };\n\nexport type CarsListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CarsListQuery = { __typename?: 'Query', carModels: { __typename?: 'CarModelConnection', nodes: Array<{ __typename?: 'CarModel', id: string, name: string }> }, carColors: Array<{ __typename?: 'CarColor', id: string, name: string }> };\n\nexport type DeleteCarModelMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCarModelMutation = { __typename?: 'Mutation', deleteOneCarModel: { __typename?: 'CarModelDeleteResponse', id?: string | null } };\n\nexport type DeleteCarColorMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCarColorMutation = { __typename?: 'Mutation', deleteOneCarColor: { __typename?: 'CarColorDeleteResponse', id?: string | null } };\n\nexport type CreateCarModelMutationVariables = Exact<{\n  input: CreateCarModel;\n}>;\n\n\nexport type CreateCarModelMutation = { __typename?: 'Mutation', createOneCarModel: { __typename?: 'CarModel', id: string } };\n\nexport type CreateCarColorMutationVariables = Exact<{\n  input: CreateCarColor;\n}>;\n\n\nexport type CreateCarColorMutation = { __typename?: 'Mutation', createOneCarColor: { __typename?: 'CarColor', id: string } };\n\nexport type UpdateCarModelMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateCarModel;\n}>;\n\n\nexport type UpdateCarModelMutation = { __typename?: 'Mutation', updateOneCarModel: { __typename?: 'CarModel', id: string } };\n\nexport type UpdateCarColorMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateCarColor;\n}>;\n\n\nexport type UpdateCarColorMutation = { __typename?: 'Mutation', updateOneCarColor: { __typename?: 'CarColor', id: string } };\n\nexport type CreateFleetMutationVariables = Exact<{\n  input: CreateFleet;\n}>;\n\n\nexport type CreateFleetMutation = { __typename?: 'Mutation', createOneFleet: { __typename?: 'Fleet', id: string } };\n\nexport type ViewFleetQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewFleetQuery = { __typename?: 'Query', fleet?: { __typename?: 'Fleet', id: string, name: string, phoneNumber: string, address?: string | null, mobileNumber: string, accountNumber: string, commissionSharePercent: number, commissionShareFlat: number, exclusivityAreas?: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>> | null } | null };\n\nexport type FleetFinancialsQueryVariables = Exact<{\n  id: Scalars['ID'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<FleetTransactionFilter>;\n  sorting?: InputMaybe<Array<FleetTransactionSort> | FleetTransactionSort>;\n}>;\n\n\nexport type FleetFinancialsQuery = { __typename?: 'Query', fleet?: { __typename?: 'Fleet', transactions: { __typename?: 'FleetTransactionsConnection', totalCount: number, nodes: Array<{ __typename?: 'FleetTransaction', transactionTimestamp: any, amount: number, currency: string, action: TransactionAction, deductType?: ProviderDeductTransactionType | null, rechargeType?: ProviderRechargeTransactionType | null, refrenceNumber?: string | null, operatorId?: string | null, requestId?: string | null, description?: string | null }> }, wallets: Array<{ __typename?: 'FleetWallet', currency: string, balance: number }> } | null, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type FleetDriversQueryVariables = Exact<{\n  id: Scalars['ID'];\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type FleetDriversQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string }> } };\n\nexport type UpdateFleetMutationVariables = Exact<{\n  id: Scalars['ID'];\n  update: UpdateFleet;\n}>;\n\n\nexport type UpdateFleetMutation = { __typename?: 'Mutation', updateOneFleet: { __typename?: 'Fleet', id: string } };\n\nexport type CreateFleetTransactionMutationVariables = Exact<{\n  input: FleetTransactionInput;\n}>;\n\n\nexport type CreateFleetTransactionMutation = { __typename?: 'Mutation', createFleetTransaction: { __typename?: 'FleetWallet', id: string } };\n\nexport type FleetsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<FleetFilter>;\n}>;\n\n\nexport type FleetsListQuery = { __typename?: 'Query', fleets: { __typename?: 'FleetConnection', totalCount: number, nodes: Array<{ __typename?: 'Fleet', id: string, name: string, phoneNumber: string, address?: string | null }> } };\n\nexport type ViewPaymentGatewayQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewPaymentGatewayQuery = { __typename?: 'Query', paymentGateway?: { __typename?: 'PaymentGateway', id: string, title: string, type: PaymentGatewayType, enabled: boolean, privateKey: string, publicKey?: string | null, merchantId?: string | null, saltKey?: string | null, mediaId?: number | null, media?: { __typename?: 'Media', address: string } | null } | null };\n\nexport type CreatePaymentGatewayMutationVariables = Exact<{\n  input: CreatePaymentGateway;\n}>;\n\n\nexport type CreatePaymentGatewayMutation = { __typename?: 'Mutation', createOnePaymentGateway: { __typename?: 'PaymentGateway', id: string } };\n\nexport type UpdatePaymentGatewayMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdatePaymentGateway;\n}>;\n\n\nexport type UpdatePaymentGatewayMutation = { __typename?: 'Mutation', updateOnePaymentGateway: { __typename?: 'PaymentGateway', id: string } };\n\nexport type PaymentGatewaysQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type PaymentGatewaysQuery = { __typename?: 'Query', paymentGateways: { __typename?: 'PaymentGatewayConnection', totalCount: number, nodes: Array<{ __typename?: 'PaymentGateway', id: string, enabled: boolean, title: string, type: PaymentGatewayType }> } };\n\nexport type RegionListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RegionListQuery = { __typename?: 'Query', regions: { __typename?: 'RegionConnection', totalCount: number, nodes: Array<{ __typename?: 'Region', id: string, name: string, currency: string, enabled: boolean, location: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>> }> } };\n\nexport type RegionViewQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type RegionViewQuery = { __typename?: 'Query', region?: { __typename?: 'Region', id: string, name: string, currency: string, enabled: boolean, location: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>> } | null };\n\nexport type UpdateRegionMutationVariables = Exact<{\n  id: Scalars['ID'];\n  update: UpdateRegion;\n}>;\n\n\nexport type UpdateRegionMutation = { __typename?: 'Mutation', updateOneRegion: { __typename?: 'Region', id: string } };\n\nexport type CreateRegionMutationVariables = Exact<{\n  input: CreateRegion;\n}>;\n\n\nexport type CreateRegionMutation = { __typename?: 'Mutation', createOneRegion: { __typename?: 'Region', id: string } };\n\nexport type ReviewParameterViewQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ReviewParameterViewQuery = { __typename?: 'Query', feedbackParameter?: { __typename?: 'FeedbackParameter', id: string, title: string, isGood: boolean } | null };\n\nexport type UpdateReviewParameterMutationVariables = Exact<{\n  id: Scalars['ID'];\n  update: UpdateFeedbackParameter;\n}>;\n\n\nexport type UpdateReviewParameterMutation = { __typename?: 'Mutation', updateOneFeedbackParameter: { __typename?: 'FeedbackParameter', id: string } };\n\nexport type CreateReviewParameterMutationVariables = Exact<{\n  input: CreateFeedbackParameter;\n}>;\n\n\nexport type CreateReviewParameterMutation = { __typename?: 'Mutation', createOneFeedbackParameter: { __typename?: 'FeedbackParameter', id: string } };\n\nexport type ReviewParametersListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ReviewParametersListQuery = { __typename?: 'Query', feedbackParameters: Array<{ __typename?: 'FeedbackParameter', id: string, title: string, isGood: boolean }> };\n\nexport type RolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type RolesQuery = { __typename?: 'Query', operatorRoles: Array<{ __typename?: 'OperatorRole', id: string, title: string }> };\n\nexport type RoleQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type RoleQuery = { __typename?: 'Query', operatorRole?: { __typename?: 'OperatorRole', id: string, title: string, permissions: Array<OperatorPermission> } | null };\n\nexport type CreateRoleMutationVariables = Exact<{\n  input: CreateOperatorRole;\n}>;\n\n\nexport type CreateRoleMutation = { __typename?: 'Mutation', createOneOperatorRole: { __typename?: 'OperatorRole', id: string, title: string, permissions: Array<OperatorPermission> } };\n\nexport type UpdateRoleMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateOperatorRole;\n}>;\n\n\nexport type UpdateRoleMutation = { __typename?: 'Mutation', updateOneOperatorRole: { __typename?: 'OperatorRole', id: string } };\n\nexport type ViewServiceCategoryQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewServiceCategoryQuery = { __typename?: 'Query', serviceCategory?: { __typename?: 'ServiceCategory', id: string, name: string } | null };\n\nexport type CreateServiceCategoryMutationVariables = Exact<{\n  input: CreateServiceCategory;\n}>;\n\n\nexport type CreateServiceCategoryMutation = { __typename?: 'Mutation', createOneServiceCategory: { __typename?: 'ServiceCategory', id: string } };\n\nexport type UpdateServiceCategoryMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateServiceCategory;\n}>;\n\n\nexport type UpdateServiceCategoryMutation = { __typename?: 'Mutation', updateOneServiceCategory: { __typename?: 'ServiceCategory', id: string } };\n\nexport type DeleteServiceCategoryMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteServiceCategoryMutation = { __typename?: 'Mutation', deleteOneServiceCategory: { __typename?: 'ServiceCategoryDeleteResponse', id?: string | null } };\n\nexport type ServicesListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ServicesListQuery = { __typename?: 'Query', serviceCategories: Array<{ __typename?: 'ServiceCategory', id: string, name: string, services: Array<{ __typename?: 'Service', id: string, name: string, media: { __typename?: 'Media', address: string } }> }> };\n\nexport type ViewServiceQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewServiceQuery = { __typename?: 'Query', service?: { __typename?: 'Service', id: string, name: string, categoryId: string, baseFare: number, perHundredMeters: number, perMinuteDrive: number, perMinuteWait: number, minimumFee: number, searchRadius: number, maximumDestinationDistance: number, paymentMethod: ServicePaymentMethod, cancellationTotalFee: number, cancellationDriverShare: number, providerShareFlat: number, providerSharePercent: number, prepayPercent: number, mediaId: string, description?: string | null, personCapacity?: number | null, media: { __typename?: 'Media', address: string }, timeMultipliers: Array<{ __typename?: 'TimeMultiplier', startTime: string, endTime: string, multiply: number }>, distanceMultipliers: Array<{ __typename?: 'DistanceMultiplier', distanceFrom: number, distanceTo: number, multiply: number }>, regions: Array<{ __typename?: 'Region', id: string, name: string, currency: string }> } | null, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', id: string, name: string, currency: string }> }, serviceCategories: Array<{ __typename?: 'ServiceCategory', id: string, name: string }> };\n\nexport type NewServiceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type NewServiceQuery = { __typename?: 'Query', regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', id: string, name: string, currency: string }> }, serviceCategories: Array<{ __typename?: 'ServiceCategory', id: string, name: string }> };\n\nexport type CreateServiceMutationVariables = Exact<{\n  input: CreateService;\n}>;\n\n\nexport type CreateServiceMutation = { __typename?: 'Mutation', createOneService: { __typename?: 'Service', id: string } };\n\nexport type UpdateServiceMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateService;\n}>;\n\n\nexport type UpdateServiceMutation = { __typename?: 'Mutation', updateOneService: { __typename?: 'Service', id: string } };\n\nexport type SetRegionsOnServiceMutationVariables = Exact<{\n  id: Scalars['ID'];\n  relationIds: Array<Scalars['ID']> | Scalars['ID'];\n}>;\n\n\nexport type SetRegionsOnServiceMutation = { __typename?: 'Mutation', setRegionsOnService: { __typename?: 'Service', id: string } };\n\nexport type UpdatePasswordMutationVariables = Exact<{\n  input: UpdatePasswordInput;\n}>;\n\n\nexport type UpdatePasswordMutation = { __typename?: 'Mutation', updatePassword: { __typename?: 'Operator', id: string } };\n\nexport type CreateOperatorMutationVariables = Exact<{\n  input: CreateOperatorInput;\n}>;\n\n\nexport type CreateOperatorMutation = { __typename?: 'Mutation', createOneOperator: { __typename?: 'Operator', id: string } };\n\nexport type ViewOperatorQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewOperatorQuery = { __typename?: 'Query', operator?: { __typename?: 'Operator', id: string, firstName?: string | null, lastName?: string | null, mobileNumber?: string | null, userName: string, email?: string | null, roleId?: string | null } | null, operatorRoles: Array<{ __typename?: 'OperatorRole', id: string, title: string }> };\n\nexport type NewOperatorQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type NewOperatorQuery = { __typename?: 'Query', operatorRoles: Array<{ __typename?: 'OperatorRole', id: string, title: string }> };\n\nexport type UpdateOperatorMutationVariables = Exact<{\n  id: Scalars['ID'];\n  update: UpdateOperator;\n}>;\n\n\nexport type UpdateOperatorMutation = { __typename?: 'Mutation', updateOneOperator: { __typename?: 'Operator', id: string } };\n\nexport type UsersListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type UsersListQuery = { __typename?: 'Query', operators: { __typename?: 'OperatorConnection', totalCount: number, nodes: Array<{ __typename?: 'Operator', id: string, userName: string, firstName?: string | null, lastName?: string | null }> } };\n\nexport type ViewAnnouncementQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewAnnouncementQuery = { __typename?: 'Query', announcement?: { __typename?: 'Announcement', id: string, title: string, description: string, url?: string | null, startAt: any, expireAt: any } | null };\n\nexport type CreateAnnouncementMutationVariables = Exact<{\n  input: CreateAnnouncement;\n}>;\n\n\nexport type CreateAnnouncementMutation = { __typename?: 'Mutation', createOneAnnouncement: { __typename?: 'Announcement', id: string } };\n\nexport type UpdateAnnouncementMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateAnnouncement;\n}>;\n\n\nexport type UpdateAnnouncementMutation = { __typename?: 'Mutation', updateOneAnnouncement: { __typename?: 'Announcement', id: string } };\n\nexport type AnnouncementsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type AnnouncementsListQuery = { __typename?: 'Query', announcements: { __typename?: 'AnnouncementConnection', totalCount: number, nodes: Array<{ __typename?: 'Announcement', id: string, title: string, description: string, startAt: any, expireAt: any }> } };\n\nexport type ViewCouponQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewCouponQuery = { __typename?: 'Query', coupon?: { __typename?: 'Coupon', id: string, isEnabled: boolean, code: string, title: string, description: string, manyUsersCanUse: number, manyTimesUserCanUse: number, minimumCost: number, maximumCost: number, startAt: any, expireAt: any, discountPercent: number, discountFlat: number, creditGift: number, isFirstTravelOnly: boolean, allowedServices: Array<{ __typename?: 'Service', id: string, name: string }> } | null };\n\nexport type CreateCouponMutationVariables = Exact<{\n  input: CreateCoupon;\n}>;\n\n\nexport type CreateCouponMutation = { __typename?: 'Mutation', createOneCoupon: { __typename?: 'Coupon', id: string } };\n\nexport type UpdateCouponMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateCoupon;\n}>;\n\n\nexport type UpdateCouponMutation = { __typename?: 'Mutation', updateOneCoupon: { __typename?: 'Coupon', id: string } };\n\nexport type CouponListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type CouponListQuery = { __typename?: 'Query', coupons: { __typename?: 'CouponConnection', totalCount: number, nodes: Array<{ __typename?: 'Coupon', id: string, code: string, title: string, isEnabled: boolean, description: string, startAt: any, expireAt: any }> } };\n\nexport type AvailableDriversForOrderQueryVariables = Exact<{\n  center: PointInput;\n  count: Scalars['Int'];\n}>;\n\n\nexport type AvailableDriversForOrderQuery = { __typename?: 'Query', getDriversLocationWithData: Array<{ __typename?: 'OnlineDriverWithData', id: number, mobileNumber: string, firstName?: string | null, lastName?: string | null, lastUpdatedAt: number, rating?: number | null, reviewCount: number, status: DriverStatus, location: { __typename?: 'Point', lat: number, lng: number } }> };\n\nexport type DriverSearchQueryVariables = Exact<{\n  filter: Scalars['String'];\n}>;\n\n\nexport type DriverSearchQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', nodes: Array<{ __typename?: 'Driver', id: string, mobileNumber: string, firstName?: string | null, lastName?: string | null, rating?: number | null, reviewCount: number, status: DriverStatus }> } };\n\nexport type AssignDriverToOrderMutationVariables = Exact<{\n  orderId: Scalars['ID'];\n  driverId: Scalars['ID'];\n}>;\n\n\nexport type AssignDriverToOrderMutation = { __typename?: 'Mutation', assignDriverToOrder: { __typename?: 'Order', id: string } };\n\nexport type ViewOrderQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewOrderQuery = { __typename?: 'Query', order?: { __typename?: 'Order', id: string, createdOn: any, costBest: number, costAfterCoupon: number, status: OrderStatus, currency: string, distanceBest: number, durationBest: number, startTimestamp?: any | null, finishTimestamp?: any | null, addresses: Array<string>, points: Array<{ __typename?: 'Point', lat: number, lng: number }>, service: { __typename?: 'Service', name: string }, driver?: { __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, status: DriverStatus, media?: { __typename?: 'Media', address: string } | null } | null, rider: { __typename?: 'Rider', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, status: RiderStatus, media?: { __typename?: 'Media', address: string } | null }, complaints: Array<{ __typename?: 'Complaint', id: string, subject: string, inscriptionTimestamp: any, content?: string | null, requestedByDriver: boolean }>, conversations: Array<{ __typename?: 'OrderMessage', sentAt: any, sentByDriver: boolean, status: MessageStatus, content: string }>, activities: Array<{ __typename?: 'RequestActivity', createdAt: any, type: RequestActivityType }>, coupon?: { __typename?: 'Coupon', title: string, code: string, expireAt: any } | null, riderTransactions: Array<{ __typename?: 'RiderTransaction', action: TransactionAction, rechargeType?: RiderRechargeTransactionType | null, deductType?: RiderDeductTransactionType | null, amount: number, status: TransactionStatus, currency: string, refrenceNumber?: string | null, paymentGateway?: { __typename?: 'PaymentGateway', title: string } | null }>, driverTransactions: Array<{ __typename?: 'DriverTransaction', action: TransactionAction, rechargeType?: DriverRechargeTransactionType | null, deductType?: DriverDeductTransactionType | null, amount: number, status: TransactionStatus, currency: string, refrenceNumber?: string | null }>, providerTransactions: Array<{ __typename?: 'ProviderTransaction', action: TransactionAction, rechargeType?: ProviderRechargeTransactionType | null, deductType?: ProviderDeductTransactionType | null, amount: number, currency: string, refrenceNumber?: string | null }>, fleetTransactions: Array<{ __typename?: 'FleetTransaction', action: TransactionAction, rechargeType?: ProviderRechargeTransactionType | null, deductType?: ProviderDeductTransactionType | null, amount: number, currency: string, refrenceNumber?: string | null }> } | null };\n\nexport type OrdersListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<OrderFilter>;\n  sorting?: InputMaybe<Array<OrderSort> | OrderSort>;\n}>;\n\n\nexport type OrdersListQuery = { __typename?: 'Query', orders: { __typename?: 'OrderConnection', totalCount: number, nodes: Array<{ __typename?: 'Order', id: string, status: OrderStatus, createdOn: any, costAfterCoupon: number, currency: string }> } };\n\nexport type CreateRiderMutationVariables = Exact<{\n  input: CreateRider;\n}>;\n\n\nexport type CreateRiderMutation = { __typename?: 'Mutation', createOneRider: { __typename?: 'Rider', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, gender?: string | null } };\n\nexport type ViewRiderQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ViewRiderQuery = { __typename?: 'Query', rider?: { __typename?: 'Rider', id: string, status: RiderStatus, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, email?: string | null, gender?: string | null, media?: { __typename?: 'Media', address: string } | null, wallets: { __typename?: 'RiderWalletsConnection', nodes: Array<{ __typename?: 'RiderWallet', balance: number, currency: string }> } } | null };\n\nexport type RiderAddressesQueryVariables = Exact<{\n  riderId: Scalars['ID'];\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RiderAddressesQuery = { __typename?: 'Query', riderAddresses: { __typename?: 'RiderAddressConnection', nodes: Array<{ __typename?: 'RiderAddress', title: string, details?: string | null, location: { __typename?: 'Point', lat: number, lng: number } }> } };\n\nexport type RiderWalletQueryVariables = Exact<{\n  riderId: Scalars['ID'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<RiderTransactionFilter>;\n  sorting?: InputMaybe<Array<RiderTransactionSort> | RiderTransactionSort>;\n}>;\n\n\nexport type RiderWalletQuery = { __typename?: 'Query', rider?: { __typename?: 'Rider', wallets: { __typename?: 'RiderWalletsConnection', nodes: Array<{ __typename?: 'RiderWallet', balance: number, currency: string }> }, transactions: { __typename?: 'RiderTransactionsConnection', totalCount: number, nodes: Array<{ __typename?: 'RiderTransaction', action: TransactionAction, deductType?: RiderDeductTransactionType | null, status: TransactionStatus, createdAt: any, rechargeType?: RiderRechargeTransactionType | null, amount: number, currency: string, refrenceNumber?: string | null, description?: string | null, paymentGatewayId?: string | null, operatorId?: string | null, requestId?: string | null }> } } | null, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type RiderOrdersQueryVariables = Exact<{\n  riderId: Scalars['ID'];\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort> | OrderSort>;\n}>;\n\n\nexport type RiderOrdersQuery = { __typename?: 'Query', rider?: { __typename?: 'Rider', orders: { __typename?: 'RiderOrdersConnection', totalCount: number, nodes: Array<{ __typename?: 'Order', id: string, createdOn: any, status: OrderStatus, distanceBest: number, durationBest: number, costBest: number, costAfterCoupon: number, currency: string, addresses: Array<string>, expectedTimestamp?: any | null, points: Array<{ __typename?: 'Point', lat: number, lng: number }> }> } } | null };\n\nexport type UpdateRiderMutationVariables = Exact<{\n  id: Scalars['ID'];\n  update: UpdateRider;\n}>;\n\n\nexport type UpdateRiderMutation = { __typename?: 'Mutation', updateOneRider: { __typename?: 'Rider', id: string } };\n\nexport type CreateRiderTransactionMutationVariables = Exact<{\n  input: RiderTransactionInput;\n}>;\n\n\nexport type CreateRiderTransactionMutation = { __typename?: 'Mutation', createRiderTransaction: { __typename?: 'RiderWallet', id: string } };\n\nexport type RidersListQueryVariables = Exact<{\n  filter?: InputMaybe<RiderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderSort> | RiderSort>;\n}>;\n\n\nexport type RidersListQuery = { __typename?: 'Query', riders: { __typename?: 'RiderConnection', totalCount: number, nodes: Array<{ __typename?: 'Rider', id: string, firstName?: string | null, lastName?: string | null, gender?: string | null, mobileNumber: string }> } };\n\nexport type CurrentConfigurationQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentConfigurationQuery = { __typename?: 'Query', currentConfiguration: { __typename?: 'CurrentConfiguration', purchaseCode?: string | null, backendMapsAPIKey?: string | null, adminPanelAPIKey?: string | null, firebaseProjectPrivateKey?: string | null } };\n\nexport type UpdatePurchaseCodeMutationVariables = Exact<{\n  code: Scalars['String'];\n}>;\n\n\nexport type UpdatePurchaseCodeMutation = { __typename?: 'Mutation', updatePurchaseCode: { __typename?: 'UpdatePurchaseCodeResult', status: UpdatePurchaseCodeStatus, clients?: Array<{ __typename?: 'UpdatePurchaseCodeClient', ip: string }> | null } };\n\nexport type UpdateMapsApiKeyMutationVariables = Exact<{\n  backend: Scalars['String'];\n  adminPanel: Scalars['String'];\n}>;\n\n\nexport type UpdateMapsApiKeyMutation = { __typename?: 'Mutation', updateMapsAPIKey: { __typename?: 'UpdateConfigResult', status: UpdateConfigStatus, message?: string | null } };\n\nexport type UpdateFirebaseMutationVariables = Exact<{\n  keyFileName: Scalars['String'];\n}>;\n\n\nexport type UpdateFirebaseMutation = { __typename?: 'Mutation', updateFirebase: { __typename?: 'UpdateConfigResult', status: UpdateConfigStatus, message?: string | null } };\n\nexport type DisableServerMutationVariables = Exact<{\n  ip: Scalars['String'];\n}>;\n\n\nexport type DisableServerMutation = { __typename?: 'Mutation', disablePreviousServer: { __typename?: 'UpdateConfigResult', status: UpdateConfigStatus, message?: string | null } };\n\nexport type LoginQueryVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginQuery = { __typename?: 'Query', login: { __typename?: 'TokenObject', token: string } };\n\nexport const DriverOverviewInfoFragmentDoc = gql`\n    fragment DriverOverviewInfo on Driver {\n  id\n  firstName\n  lastName\n  mobileNumber\n  status\n}\n    `;\nexport const DriverLocationFragmentDoc = gql`\n    fragment DriverLocation on OnlineDriver {\n  location {\n    lat\n    lng\n  }\n  driverId\n  lastUpdatedAt\n}\n    `;\nexport const ViewComplaintDocument = gql`\n    query ViewComplaint($id: ID!) {\n  complaint(id: $id) {\n    id\n    inscriptionTimestamp\n    status\n    subject\n    content\n    requestedByDriver\n    activities {\n      type\n      comment\n      actor {\n        firstName\n        lastName\n      }\n      assignedTo {\n        firstName\n        lastName\n      }\n    }\n    order {\n      id\n      status\n      createdOn\n      startTimestamp\n      finishTimestamp\n      expectedTimestamp\n      costBest\n      costAfterCoupon\n      addresses\n      currency\n      rider {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n      driver {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewComplaintGQL extends Apollo.Query<ViewComplaintQuery, ViewComplaintQueryVariables> {\n    document = ViewComplaintDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateComplaintStatusDocument = gql`\n    mutation UpdateComplaintStatus($id: ID!, $status: ComplaintStatus!) {\n  updateOneComplaint(input: {id: $id, update: {status: $status}}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateComplaintStatusGQL extends Apollo.Mutation<UpdateComplaintStatusMutation, UpdateComplaintStatusMutationVariables> {\n    document = UpdateComplaintStatusDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ComplaintsListDocument = gql`\n    query ComplaintsList($paging: OffsetPaging) {\n  complaints(paging: $paging) {\n    nodes {\n      id\n      inscriptionTimestamp\n      subject\n      status\n      content\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ComplaintsListGQL extends Apollo.Query<ComplaintsListQuery, ComplaintsListQueryVariables> {\n    document = ComplaintsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateDriverDocument = gql`\n    mutation CreateDriver($input: CreateDriver!) {\n  createOneDriver(input: {driver: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateDriverGQL extends Apollo.Mutation<CreateDriverMutation, CreateDriverMutationVariables> {\n    document = CreateDriverDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewDriverDocument = gql`\n    query ViewDriver($id: ID!) {\n  driver(id: $id) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    registrationTimestamp\n    lastSeenTimestamp\n    status\n    gender\n    carId\n    carColorId\n    fleetId\n    carProductionYear\n    carPlate\n    accountNumber\n    bankName\n    bankRoutingNumber\n    bankSwift\n    address\n    email\n    enabledServices {\n      id\n    }\n    documents {\n      id\n      address\n    }\n    media {\n      address\n    }\n    rating\n    reviewCount\n  }\n  services {\n    id\n    name\n  }\n  fleets {\n    nodes {\n      id\n      name\n    }\n  }\n  carModels {\n    nodes {\n      id\n      name\n    }\n  }\n  carColors {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewDriverGQL extends Apollo.Query<ViewDriverQuery, ViewDriverQueryVariables> {\n    document = ViewDriverDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateDriverProfileDocument = gql`\n    mutation UpdateDriverProfile($id: ID!, $update: UpdateDriverInput!, $serviceIds: [ID!]!) {\n  updateOneDriver(input: {id: $id, update: $update}) {\n    id\n  }\n  setEnabledServicesOnDriver(input: {id: $id, relationIds: $serviceIds}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateDriverProfileGQL extends Apollo.Mutation<UpdateDriverProfileMutation, UpdateDriverProfileMutationVariables> {\n    document = UpdateDriverProfileDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateDriverStatusDocument = gql`\n    mutation UpdateDriverStatus($id: ID!, $status: DriverStatus) {\n  updateOneDriver(input: {id: $id, update: {status: $status}}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateDriverStatusGQL extends Apollo.Mutation<UpdateDriverStatusMutation, UpdateDriverStatusMutationVariables> {\n    document = UpdateDriverStatusDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverFinancialsDocument = gql`\n    query DriverFinancials($id: ID!, $paging: OffsetPaging, $filter: DriverTransactionFilter, $sorting: [DriverTransactionSort!]) {\n  driver(id: $id) {\n    transactions(filter: $filter, paging: $paging, sorting: $sorting) {\n      nodes {\n        status\n        createdAt\n        amount\n        description\n        currency\n        action\n        deductType\n        rechargeType\n        refrenceNumber\n        requestId\n        paymentGatewayId\n        operatorId\n      }\n      totalCount\n    }\n    wallets {\n      balance\n      currency\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverFinancialsGQL extends Apollo.Query<DriverFinancialsQuery, DriverFinancialsQueryVariables> {\n    document = DriverFinancialsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverFeedbacksDocument = gql`\n    query DriverFeedbacks($id: ID!, $paging: OffsetPaging) {\n  feedbacks(filter: {driverId: {eq: $id}}, paging: $paging) {\n    nodes {\n      id\n      requestId\n      reviewTimestamp\n      score\n      description\n      parameters {\n        isGood\n        title\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverFeedbacksGQL extends Apollo.Query<DriverFeedbacksQuery, DriverFeedbacksQueryVariables> {\n    document = DriverFeedbacksDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverOrdersDocument = gql`\n    query DriverOrders($driverId: ID!, $filter: OrderFilter, $paging: OffsetPaging, $sorting: [OrderSort!]) {\n  driver(id: $driverId) {\n    orders(filter: $filter, paging: $paging, sorting: $sorting) {\n      nodes {\n        id\n        createdOn\n        status\n        distanceBest\n        durationBest\n        costBest\n        costAfterCoupon\n        currency\n        addresses\n        points {\n          lat\n          lng\n        }\n        expectedTimestamp\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverOrdersGQL extends Apollo.Query<DriverOrdersQuery, DriverOrdersQueryVariables> {\n    document = DriverOrdersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateDriverTransactionDocument = gql`\n    mutation CreateDriverTransaction($input: DriverTransactionInput!) {\n  createDriverTransaction(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateDriverTransactionGQL extends Apollo.Mutation<CreateDriverTransactionMutation, CreateDriverTransactionMutationVariables> {\n    document = CreateDriverTransactionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriversListDocument = gql`\n    query DriversList($paging: OffsetPaging, $filter: DriverFilter, $sorting: [DriverSort!]) {\n  drivers(paging: $paging, filter: $filter, sorting: $sorting) {\n    nodes {\n      id\n      firstName\n      lastName\n      gender\n      mobileNumber\n      status\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriversListGQL extends Apollo.Query<DriversListQuery, DriversListQueryVariables> {\n    document = DriversListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ProviderWalletsListDocument = gql`\n    query ProviderWalletsList($paging: OffsetPaging) {\n  providerTransactions(paging: $paging) {\n    nodes {\n      createdAt\n      action\n      deductType\n      rechargeType\n      amount\n      currency\n      description\n      requestId\n      operatorId\n    }\n    totalCount\n  }\n  providerWallets {\n    balance\n    currency\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ProviderWalletsListGQL extends Apollo.Query<ProviderWalletsListQuery, ProviderWalletsListQueryVariables> {\n    document = ProviderWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ExportDocument = gql`\n    query Export($input: ExportArgs!) {\n  export(input: $input) {\n    url\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ExportGQL extends Apollo.Query<ExportQuery, ExportQueryVariables> {\n    document = ExportDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverWalletsListDocument = gql`\n    query DriverWalletsList($paging: OffsetPaging) {\n  driverWallets(paging: $paging) {\n    nodes {\n      id\n      driverId\n      balance\n      currency\n      driver {\n        firstName\n        lastName\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverWalletsListGQL extends Apollo.Query<DriverWalletsListQuery, DriverWalletsListQueryVariables> {\n    document = DriverWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetWalletsListDocument = gql`\n    query FleetWalletsList($paging: OffsetPaging, $filter: FleetWalletFilter) {\n  fleetWallets(paging: $paging, filter: $filter) {\n    nodes {\n      id\n      balance\n      currency\n      fleetId\n      fleet {\n        name\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetWalletsListGQL extends Apollo.Query<FleetWalletsListQuery, FleetWalletsListQueryVariables> {\n    document = FleetWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderWalletsListDocument = gql`\n    query RiderWalletsList($paging: OffsetPaging) {\n  riderWallets(paging: $paging) {\n    nodes {\n      balance\n      currency\n      riderId\n      rider {\n        firstName\n        lastName\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderWalletsListGQL extends Apollo.Query<RiderWalletsListQuery, RiderWalletsListQueryVariables> {\n    document = RiderWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DispatcherCalculateFareDocument = gql`\n    query DispatcherCalculateFare($points: [PointInput!]!) {\n  calculateFare(input: {points: $points}) {\n    currency\n    distance\n    duration\n    services {\n      name\n      services {\n        id\n        name\n        cost\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DispatcherCalculateFareGQL extends Apollo.Query<DispatcherCalculateFareQuery, DispatcherCalculateFareQueryVariables> {\n    document = DispatcherCalculateFareDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrderDocument = gql`\n    mutation CreateOrder($riderId: ID!, $points: [PointInput!]!, $addresses: [String!]!, $serviceId: ID!) {\n  createOrder(\n    input: {points: $points, serviceId: $serviceId, addresses: $addresses, intervalMinutes: 0, riderId: $riderId}\n  ) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrderGQL extends Apollo.Mutation<CreateOrderMutation, CreateOrderMutationVariables> {\n    document = CreateOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OrderUpdatedDocument = gql`\n    subscription OrderUpdated($id: ID!) {\n  orderUpdated(orderId: $id) {\n    id\n    status\n    driver {\n      firstName\n      lastName\n      mobileNumber\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OrderUpdatedGQL extends Apollo.Subscription<OrderUpdatedSubscription, OrderUpdatedSubscriptionVariables> {\n    document = OrderUpdatedDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CancelOrderDocument = gql`\n    mutation CancelOrder($orderId: ID!) {\n  cancelOrder(orderId: $orderId) {\n    id\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CancelOrderGQL extends Apollo.Mutation<CancelOrderMutation, CancelOrderMutationVariables> {\n    document = CancelOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OverviewDocument = gql`\n    query Overview {\n  complaintAggregate(filter: {status: {in: [Submitted, UnderInvestigation]}}) {\n    count {\n      id\n    }\n  }\n  driverAggregate(filter: {status: {eq: PendingApproval}}) {\n    count {\n      id\n    }\n  }\n  activeOrders: orderAggregate(\n    filter: {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}\n  ) {\n    count {\n      id\n    }\n  }\n  bookedOrders: orderAggregate(filter: {status: {eq: Booked}}) {\n    count {\n      id\n    }\n  }\n  getDriversLocation(center: {lat: 45, lng: 45}, count: 150) {\n    ...DriverLocation\n  }\n  drivers(paging: {limit: 5}, filter: {status: {in: [Online, InService]}}) {\n    nodes {\n      ...DriverOverviewInfo\n    }\n    totalCount\n  }\n}\n    ${DriverLocationFragmentDoc}\n${DriverOverviewInfoFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OverviewGQL extends Apollo.Query<OverviewQuery, OverviewQueryVariables> {\n    document = OverviewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OverviewDriverPagingDocument = gql`\n    query OverviewDriverPaging($offset: Int!) {\n  drivers(\n    paging: {limit: 5, offset: $offset}\n    filter: {status: {in: [Online, InService]}}\n  ) {\n    nodes {\n      ...DriverOverviewInfo\n    }\n    totalCount\n  }\n}\n    ${DriverOverviewInfoFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OverviewDriverPagingGQL extends Apollo.Query<OverviewDriverPagingQuery, OverviewDriverPagingQueryVariables> {\n    document = OverviewDriverPagingDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestsChartDocument = gql`\n    query RequestsChart($timeframe: ChartTimeframe!) {\n  requestChart(timeframe: $timeframe) {\n    items {\n      time\n      count\n      status\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestsChartGQL extends Apollo.Query<RequestsChartQuery, RequestsChartQueryVariables> {\n    document = RequestsChartDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const IncomeChartDocument = gql`\n    query IncomeChart($timeframe: ChartTimeframe!) {\n  incomeChart(timeframe: $timeframe) {\n    items {\n      time\n      sum\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class IncomeChartGQL extends Apollo.Query<IncomeChartQuery, IncomeChartQueryVariables> {\n    document = IncomeChartDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CarsListDocument = gql`\n    query CarsList {\n  carModels(paging: {limit: 50}) {\n    nodes {\n      id\n      name\n    }\n  }\n  carColors {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CarsListGQL extends Apollo.Query<CarsListQuery, CarsListQueryVariables> {\n    document = CarsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteCarModelDocument = gql`\n    mutation DeleteCarModel($id: ID!) {\n  deleteOneCarModel(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteCarModelGQL extends Apollo.Mutation<DeleteCarModelMutation, DeleteCarModelMutationVariables> {\n    document = DeleteCarModelDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteCarColorDocument = gql`\n    mutation DeleteCarColor($id: ID!) {\n  deleteOneCarColor(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteCarColorGQL extends Apollo.Mutation<DeleteCarColorMutation, DeleteCarColorMutationVariables> {\n    document = DeleteCarColorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCarModelDocument = gql`\n    mutation CreateCarModel($input: CreateCarModel!) {\n  createOneCarModel(input: {carModel: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCarModelGQL extends Apollo.Mutation<CreateCarModelMutation, CreateCarModelMutationVariables> {\n    document = CreateCarModelDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCarColorDocument = gql`\n    mutation CreateCarColor($input: CreateCarColor!) {\n  createOneCarColor(input: {carColor: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCarColorGQL extends Apollo.Mutation<CreateCarColorMutation, CreateCarColorMutationVariables> {\n    document = CreateCarColorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCarModelDocument = gql`\n    mutation UpdateCarModel($id: ID!, $input: UpdateCarModel!) {\n  updateOneCarModel(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCarModelGQL extends Apollo.Mutation<UpdateCarModelMutation, UpdateCarModelMutationVariables> {\n    document = UpdateCarModelDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCarColorDocument = gql`\n    mutation UpdateCarColor($id: ID!, $input: UpdateCarColor!) {\n  updateOneCarColor(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCarColorGQL extends Apollo.Mutation<UpdateCarColorMutation, UpdateCarColorMutationVariables> {\n    document = UpdateCarColorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateFleetDocument = gql`\n    mutation CreateFleet($input: CreateFleet!) {\n  createOneFleet(input: {fleet: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateFleetGQL extends Apollo.Mutation<CreateFleetMutation, CreateFleetMutationVariables> {\n    document = CreateFleetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewFleetDocument = gql`\n    query ViewFleet($id: ID!) {\n  fleet(id: $id) {\n    id\n    name\n    phoneNumber\n    address\n    mobileNumber\n    accountNumber\n    commissionSharePercent\n    commissionShareFlat\n    exclusivityAreas {\n      lat\n      lng\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewFleetGQL extends Apollo.Query<ViewFleetQuery, ViewFleetQueryVariables> {\n    document = ViewFleetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetFinancialsDocument = gql`\n    query FleetFinancials($id: ID!, $paging: OffsetPaging, $filter: FleetTransactionFilter, $sorting: [FleetTransactionSort!]) {\n  fleet(id: $id) {\n    transactions(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        transactionTimestamp\n        amount\n        currency\n        action\n        deductType\n        rechargeType\n        refrenceNumber\n        operatorId\n        requestId\n        description\n      }\n      totalCount\n    }\n    wallets {\n      currency\n      balance\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetFinancialsGQL extends Apollo.Query<FleetFinancialsQuery, FleetFinancialsQueryVariables> {\n    document = FleetFinancialsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetDriversDocument = gql`\n    query FleetDrivers($id: ID!, $paging: OffsetPaging) {\n  drivers(filter: {fleetId: {eq: $id}}, paging: $paging) {\n    nodes {\n      id\n      firstName\n      lastName\n      mobileNumber\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetDriversGQL extends Apollo.Query<FleetDriversQuery, FleetDriversQueryVariables> {\n    document = FleetDriversDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateFleetDocument = gql`\n    mutation UpdateFleet($id: ID!, $update: UpdateFleet!) {\n  updateOneFleet(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateFleetGQL extends Apollo.Mutation<UpdateFleetMutation, UpdateFleetMutationVariables> {\n    document = UpdateFleetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateFleetTransactionDocument = gql`\n    mutation CreateFleetTransaction($input: FleetTransactionInput!) {\n  createFleetTransaction(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateFleetTransactionGQL extends Apollo.Mutation<CreateFleetTransactionMutation, CreateFleetTransactionMutationVariables> {\n    document = CreateFleetTransactionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetsListDocument = gql`\n    query FleetsList($paging: OffsetPaging, $filter: FleetFilter) {\n  fleets(paging: $paging, filter: $filter) {\n    nodes {\n      id\n      name\n      phoneNumber\n      address\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetsListGQL extends Apollo.Query<FleetsListQuery, FleetsListQueryVariables> {\n    document = FleetsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewPaymentGatewayDocument = gql`\n    query ViewPaymentGateway($id: ID!) {\n  paymentGateway(id: $id) {\n    id\n    title\n    type\n    enabled\n    privateKey\n    publicKey\n    merchantId\n    saltKey\n    mediaId\n    media {\n      address\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewPaymentGatewayGQL extends Apollo.Query<ViewPaymentGatewayQuery, ViewPaymentGatewayQueryVariables> {\n    document = ViewPaymentGatewayDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreatePaymentGatewayDocument = gql`\n    mutation CreatePaymentGateway($input: CreatePaymentGateway!) {\n  createOnePaymentGateway(input: {paymentGateway: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreatePaymentGatewayGQL extends Apollo.Mutation<CreatePaymentGatewayMutation, CreatePaymentGatewayMutationVariables> {\n    document = CreatePaymentGatewayDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePaymentGatewayDocument = gql`\n    mutation UpdatePaymentGateway($id: ID!, $input: UpdatePaymentGateway!) {\n  updateOnePaymentGateway(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePaymentGatewayGQL extends Apollo.Mutation<UpdatePaymentGatewayMutation, UpdatePaymentGatewayMutationVariables> {\n    document = UpdatePaymentGatewayDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const PaymentGatewaysDocument = gql`\n    query PaymentGateways($paging: OffsetPaging) {\n  paymentGateways(paging: $paging) {\n    nodes {\n      id\n      enabled\n      title\n      type\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PaymentGatewaysGQL extends Apollo.Query<PaymentGatewaysQuery, PaymentGatewaysQueryVariables> {\n    document = PaymentGatewaysDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RegionListDocument = gql`\n    query RegionList($paging: OffsetPaging) {\n  regions(paging: $paging) {\n    nodes {\n      id\n      name\n      currency\n      enabled\n      location {\n        lat\n        lng\n      }\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RegionListGQL extends Apollo.Query<RegionListQuery, RegionListQueryVariables> {\n    document = RegionListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RegionViewDocument = gql`\n    query RegionView($id: ID!) {\n  region(id: $id) {\n    id\n    name\n    currency\n    enabled\n    location {\n      lat\n      lng\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RegionViewGQL extends Apollo.Query<RegionViewQuery, RegionViewQueryVariables> {\n    document = RegionViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRegionDocument = gql`\n    mutation UpdateRegion($id: ID!, $update: UpdateRegion!) {\n  updateOneRegion(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRegionGQL extends Apollo.Mutation<UpdateRegionMutation, UpdateRegionMutationVariables> {\n    document = UpdateRegionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRegionDocument = gql`\n    mutation CreateRegion($input: CreateRegion!) {\n  createOneRegion(input: {region: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRegionGQL extends Apollo.Mutation<CreateRegionMutation, CreateRegionMutationVariables> {\n    document = CreateRegionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ReviewParameterViewDocument = gql`\n    query ReviewParameterView($id: ID!) {\n  feedbackParameter(id: $id) {\n    id\n    title\n    isGood\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ReviewParameterViewGQL extends Apollo.Query<ReviewParameterViewQuery, ReviewParameterViewQueryVariables> {\n    document = ReviewParameterViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateReviewParameterDocument = gql`\n    mutation UpdateReviewParameter($id: ID!, $update: UpdateFeedbackParameter!) {\n  updateOneFeedbackParameter(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateReviewParameterGQL extends Apollo.Mutation<UpdateReviewParameterMutation, UpdateReviewParameterMutationVariables> {\n    document = UpdateReviewParameterDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateReviewParameterDocument = gql`\n    mutation CreateReviewParameter($input: CreateFeedbackParameter!) {\n  createOneFeedbackParameter(input: {feedbackParameter: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateReviewParameterGQL extends Apollo.Mutation<CreateReviewParameterMutation, CreateReviewParameterMutationVariables> {\n    document = CreateReviewParameterDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ReviewParametersListDocument = gql`\n    query ReviewParametersList {\n  feedbackParameters {\n    id\n    title\n    isGood\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ReviewParametersListGQL extends Apollo.Query<ReviewParametersListQuery, ReviewParametersListQueryVariables> {\n    document = ReviewParametersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RolesDocument = gql`\n    query Roles {\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RolesGQL extends Apollo.Query<RolesQuery, RolesQueryVariables> {\n    document = RolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RoleDocument = gql`\n    query Role($id: ID!) {\n  operatorRole(id: $id) {\n    id\n    title\n    permissions\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RoleGQL extends Apollo.Query<RoleQuery, RoleQueryVariables> {\n    document = RoleDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRoleDocument = gql`\n    mutation CreateRole($input: CreateOperatorRole!) {\n  createOneOperatorRole(input: {operatorRole: $input}) {\n    id\n    title\n    permissions\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRoleGQL extends Apollo.Mutation<CreateRoleMutation, CreateRoleMutationVariables> {\n    document = CreateRoleDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRoleDocument = gql`\n    mutation UpdateRole($id: ID!, $input: UpdateOperatorRole!) {\n  updateOneOperatorRole(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRoleGQL extends Apollo.Mutation<UpdateRoleMutation, UpdateRoleMutationVariables> {\n    document = UpdateRoleDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewServiceCategoryDocument = gql`\n    query ViewServiceCategory($id: ID!) {\n  serviceCategory(id: $id) {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewServiceCategoryGQL extends Apollo.Query<ViewServiceCategoryQuery, ViewServiceCategoryQueryVariables> {\n    document = ViewServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateServiceCategoryDocument = gql`\n    mutation CreateServiceCategory($input: CreateServiceCategory!) {\n  createOneServiceCategory(input: {serviceCategory: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateServiceCategoryGQL extends Apollo.Mutation<CreateServiceCategoryMutation, CreateServiceCategoryMutationVariables> {\n    document = CreateServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateServiceCategoryDocument = gql`\n    mutation UpdateServiceCategory($id: ID!, $input: UpdateServiceCategory!) {\n  updateOneServiceCategory(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateServiceCategoryGQL extends Apollo.Mutation<UpdateServiceCategoryMutation, UpdateServiceCategoryMutationVariables> {\n    document = UpdateServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteServiceCategoryDocument = gql`\n    mutation DeleteServiceCategory($id: ID!) {\n  deleteOneServiceCategory(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteServiceCategoryGQL extends Apollo.Mutation<DeleteServiceCategoryMutation, DeleteServiceCategoryMutationVariables> {\n    document = DeleteServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ServicesListDocument = gql`\n    query ServicesList {\n  serviceCategories {\n    id\n    name\n    services {\n      id\n      name\n      media {\n        address\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ServicesListGQL extends Apollo.Query<ServicesListQuery, ServicesListQueryVariables> {\n    document = ServicesListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewServiceDocument = gql`\n    query ViewService($id: ID!) {\n  service(id: $id) {\n    id\n    name\n    categoryId\n    baseFare\n    perHundredMeters\n    perMinuteDrive\n    perMinuteWait\n    minimumFee\n    searchRadius\n    maximumDestinationDistance\n    paymentMethod\n    cancellationTotalFee\n    cancellationDriverShare\n    providerShareFlat\n    providerSharePercent\n    prepayPercent\n    searchRadius\n    mediaId\n    description\n    personCapacity\n    media {\n      address\n    }\n    timeMultipliers {\n      startTime\n      endTime\n      multiply\n    }\n    distanceMultipliers {\n      distanceFrom\n      distanceTo\n      multiply\n    }\n    regions {\n      id\n      name\n      currency\n    }\n  }\n  regions {\n    nodes {\n      id\n      name\n      currency\n    }\n  }\n  serviceCategories {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewServiceGQL extends Apollo.Query<ViewServiceQuery, ViewServiceQueryVariables> {\n    document = ViewServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const NewServiceDocument = gql`\n    query NewService {\n  regions {\n    nodes {\n      id\n      name\n      currency\n    }\n  }\n  serviceCategories {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class NewServiceGQL extends Apollo.Query<NewServiceQuery, NewServiceQueryVariables> {\n    document = NewServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateServiceDocument = gql`\n    mutation CreateService($input: CreateService!) {\n  createOneService(input: {service: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateServiceGQL extends Apollo.Mutation<CreateServiceMutation, CreateServiceMutationVariables> {\n    document = CreateServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateServiceDocument = gql`\n    mutation UpdateService($id: ID!, $input: UpdateService!) {\n  updateOneService(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateServiceGQL extends Apollo.Mutation<UpdateServiceMutation, UpdateServiceMutationVariables> {\n    document = UpdateServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SetRegionsOnServiceDocument = gql`\n    mutation SetRegionsOnService($id: ID!, $relationIds: [ID!]!) {\n  setRegionsOnService(input: {id: $id, relationIds: $relationIds}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SetRegionsOnServiceGQL extends Apollo.Mutation<SetRegionsOnServiceMutation, SetRegionsOnServiceMutationVariables> {\n    document = SetRegionsOnServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePasswordDocument = gql`\n    mutation UpdatePassword($input: UpdatePasswordInput!) {\n  updatePassword(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePasswordGQL extends Apollo.Mutation<UpdatePasswordMutation, UpdatePasswordMutationVariables> {\n    document = UpdatePasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOperatorDocument = gql`\n    mutation CreateOperator($input: CreateOperatorInput!) {\n  createOneOperator(input: {operator: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOperatorGQL extends Apollo.Mutation<CreateOperatorMutation, CreateOperatorMutationVariables> {\n    document = CreateOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewOperatorDocument = gql`\n    query ViewOperator($id: ID!) {\n  operator(id: $id) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    userName\n    email\n    roleId\n  }\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewOperatorGQL extends Apollo.Query<ViewOperatorQuery, ViewOperatorQueryVariables> {\n    document = ViewOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const NewOperatorDocument = gql`\n    query NewOperator {\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class NewOperatorGQL extends Apollo.Query<NewOperatorQuery, NewOperatorQueryVariables> {\n    document = NewOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOperatorDocument = gql`\n    mutation UpdateOperator($id: ID!, $update: UpdateOperator!) {\n  updateOneOperator(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOperatorGQL extends Apollo.Mutation<UpdateOperatorMutation, UpdateOperatorMutationVariables> {\n    document = UpdateOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UsersListDocument = gql`\n    query UsersList($paging: OffsetPaging) {\n  operators(paging: $paging) {\n    nodes {\n      id\n      userName\n      firstName\n      lastName\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UsersListGQL extends Apollo.Query<UsersListQuery, UsersListQueryVariables> {\n    document = UsersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewAnnouncementDocument = gql`\n    query ViewAnnouncement($id: ID!) {\n  announcement(id: $id) {\n    id\n    title\n    description\n    url\n    startAt\n    expireAt\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewAnnouncementGQL extends Apollo.Query<ViewAnnouncementQuery, ViewAnnouncementQueryVariables> {\n    document = ViewAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateAnnouncementDocument = gql`\n    mutation CreateAnnouncement($input: CreateAnnouncement!) {\n  createOneAnnouncement(input: {announcement: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateAnnouncementGQL extends Apollo.Mutation<CreateAnnouncementMutation, CreateAnnouncementMutationVariables> {\n    document = CreateAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateAnnouncementDocument = gql`\n    mutation UpdateAnnouncement($id: ID!, $input: UpdateAnnouncement!) {\n  updateOneAnnouncement(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateAnnouncementGQL extends Apollo.Mutation<UpdateAnnouncementMutation, UpdateAnnouncementMutationVariables> {\n    document = UpdateAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AnnouncementsListDocument = gql`\n    query AnnouncementsList($paging: OffsetPaging) {\n  announcements(paging: $paging) {\n    nodes {\n      id\n      title\n      description\n      startAt\n      expireAt\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AnnouncementsListGQL extends Apollo.Query<AnnouncementsListQuery, AnnouncementsListQueryVariables> {\n    document = AnnouncementsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewCouponDocument = gql`\n    query ViewCoupon($id: ID!) {\n  coupon(id: $id) {\n    id\n    isEnabled\n    code\n    title\n    description\n    manyUsersCanUse\n    manyTimesUserCanUse\n    minimumCost\n    maximumCost\n    startAt\n    expireAt\n    discountPercent\n    discountFlat\n    creditGift\n    isEnabled\n    isFirstTravelOnly\n    allowedServices {\n      id\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewCouponGQL extends Apollo.Query<ViewCouponQuery, ViewCouponQueryVariables> {\n    document = ViewCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCouponDocument = gql`\n    mutation CreateCoupon($input: CreateCoupon!) {\n  createOneCoupon(input: {coupon: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCouponGQL extends Apollo.Mutation<CreateCouponMutation, CreateCouponMutationVariables> {\n    document = CreateCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCouponDocument = gql`\n    mutation UpdateCoupon($id: ID!, $input: UpdateCoupon!) {\n  updateOneCoupon(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCouponGQL extends Apollo.Mutation<UpdateCouponMutation, UpdateCouponMutationVariables> {\n    document = UpdateCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CouponListDocument = gql`\n    query CouponList($paging: OffsetPaging) {\n  coupons(paging: $paging) {\n    nodes {\n      id\n      code\n      title\n      isEnabled\n      description\n      startAt\n      expireAt\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CouponListGQL extends Apollo.Query<CouponListQuery, CouponListQueryVariables> {\n    document = CouponListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AvailableDriversForOrderDocument = gql`\n    query AvailableDriversForOrder($center: PointInput!, $count: Int!) {\n  getDriversLocationWithData(center: $center, count: $count) {\n    id\n    location {\n      lat\n      lng\n    }\n    mobileNumber\n    firstName\n    lastName\n    lastUpdatedAt\n    rating\n    reviewCount\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AvailableDriversForOrderGQL extends Apollo.Query<AvailableDriversForOrderQuery, AvailableDriversForOrderQueryVariables> {\n    document = AvailableDriversForOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverSearchDocument = gql`\n    query DriverSearch($filter: String!) {\n  drivers(\n    filter: {or: [{mobileNumber: {like: $filter}}, {lastName: {like: $filter}}]}\n  ) {\n    nodes {\n      id\n      mobileNumber\n      firstName\n      lastName\n      rating\n      reviewCount\n      status\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverSearchGQL extends Apollo.Query<DriverSearchQuery, DriverSearchQueryVariables> {\n    document = DriverSearchDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AssignDriverToOrderDocument = gql`\n    mutation AssignDriverToOrder($orderId: ID!, $driverId: ID!) {\n  assignDriverToOrder(orderId: $orderId, driverId: $driverId) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AssignDriverToOrderGQL extends Apollo.Mutation<AssignDriverToOrderMutation, AssignDriverToOrderMutationVariables> {\n    document = AssignDriverToOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewOrderDocument = gql`\n    query ViewOrder($id: ID!) {\n  order(id: $id) {\n    id\n    createdOn\n    costBest\n    costAfterCoupon\n    status\n    currency\n    distanceBest\n    durationBest\n    startTimestamp\n    finishTimestamp\n    addresses\n    points {\n      lat\n      lng\n    }\n    service {\n      name\n    }\n    driver {\n      id\n      firstName\n      lastName\n      mobileNumber\n      registrationTimestamp\n      status\n      media {\n        address\n      }\n    }\n    rider {\n      id\n      firstName\n      lastName\n      mobileNumber\n      registrationTimestamp\n      status\n      media {\n        address\n      }\n    }\n    complaints {\n      id\n      subject\n      inscriptionTimestamp\n      content\n      requestedByDriver\n    }\n    conversations {\n      sentAt\n      sentByDriver\n      status\n      content\n    }\n    activities {\n      createdAt\n      type\n    }\n    coupon {\n      title\n      code\n      expireAt\n    }\n    riderTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      status\n      currency\n      refrenceNumber\n      paymentGateway {\n        title\n      }\n    }\n    driverTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      status\n      currency\n      refrenceNumber\n    }\n    providerTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      currency\n      refrenceNumber\n    }\n    fleetTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      currency\n      refrenceNumber\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewOrderGQL extends Apollo.Query<ViewOrderQuery, ViewOrderQueryVariables> {\n    document = ViewOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OrdersListDocument = gql`\n    query OrdersList($paging: OffsetPaging, $filter: OrderFilter, $sorting: [OrderSort!]) {\n  orders(paging: $paging, filter: $filter, sorting: $sorting) {\n    nodes {\n      id\n      status\n      createdOn\n      costAfterCoupon\n      currency\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OrdersListGQL extends Apollo.Query<OrdersListQuery, OrdersListQueryVariables> {\n    document = OrdersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRiderDocument = gql`\n    mutation CreateRider($input: CreateRider!) {\n  createOneRider(input: {rider: $input}) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    gender\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRiderGQL extends Apollo.Mutation<CreateRiderMutation, CreateRiderMutationVariables> {\n    document = CreateRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewRiderDocument = gql`\n    query ViewRider($id: ID!) {\n  rider(id: $id) {\n    id\n    status\n    firstName\n    lastName\n    mobileNumber\n    media {\n      address\n    }\n    mobileNumber\n    registrationTimestamp\n    email\n    gender\n    wallets(sorting: [{field: balance, direction: DESC}], paging: {limit: 1}) {\n      nodes {\n        balance\n        currency\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewRiderGQL extends Apollo.Query<ViewRiderQuery, ViewRiderQueryVariables> {\n    document = ViewRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderAddressesDocument = gql`\n    query RiderAddresses($riderId: ID!, $paging: OffsetPaging) {\n  riderAddresses(filter: {riderId: {eq: $riderId}}, paging: $paging) {\n    nodes {\n      title\n      details\n      location {\n        lat\n        lng\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderAddressesGQL extends Apollo.Query<RiderAddressesQuery, RiderAddressesQueryVariables> {\n    document = RiderAddressesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderWalletDocument = gql`\n    query RiderWallet($riderId: ID!, $paging: OffsetPaging, $filter: RiderTransactionFilter, $sorting: [RiderTransactionSort!]) {\n  rider(id: $riderId) {\n    wallets {\n      nodes {\n        balance\n        currency\n      }\n    }\n    transactions(paging: $paging, sorting: $sorting, filter: $filter) {\n      nodes {\n        action\n        deductType\n        status\n        createdAt\n        rechargeType\n        amount\n        currency\n        refrenceNumber\n        description\n        paymentGatewayId\n        operatorId\n        requestId\n      }\n      totalCount\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderWalletGQL extends Apollo.Query<RiderWalletQuery, RiderWalletQueryVariables> {\n    document = RiderWalletDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderOrdersDocument = gql`\n    query RiderOrders($riderId: ID!, $filter: OrderFilter, $paging: OffsetPaging, $sorting: [OrderSort!]) {\n  rider(id: $riderId) {\n    orders(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        id\n        createdOn\n        status\n        distanceBest\n        durationBest\n        costBest\n        costAfterCoupon\n        currency\n        addresses\n        points {\n          lat\n          lng\n        }\n        expectedTimestamp\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderOrdersGQL extends Apollo.Query<RiderOrdersQuery, RiderOrdersQueryVariables> {\n    document = RiderOrdersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRiderDocument = gql`\n    mutation UpdateRider($id: ID!, $update: UpdateRider!) {\n  updateOneRider(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRiderGQL extends Apollo.Mutation<UpdateRiderMutation, UpdateRiderMutationVariables> {\n    document = UpdateRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRiderTransactionDocument = gql`\n    mutation CreateRiderTransaction($input: RiderTransactionInput!) {\n  createRiderTransaction(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRiderTransactionGQL extends Apollo.Mutation<CreateRiderTransactionMutation, CreateRiderTransactionMutationVariables> {\n    document = CreateRiderTransactionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RidersListDocument = gql`\n    query RidersList($filter: RiderFilter, $paging: OffsetPaging, $sorting: [RiderSort!]) {\n  riders(filter: $filter, paging: $paging, sorting: $sorting) {\n    nodes {\n      id\n      firstName\n      lastName\n      gender\n      mobileNumber\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RidersListGQL extends Apollo.Query<RidersListQuery, RidersListQueryVariables> {\n    document = RidersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CurrentConfigurationDocument = gql`\n    query CurrentConfiguration {\n  currentConfiguration {\n    purchaseCode\n    backendMapsAPIKey\n    adminPanelAPIKey\n    firebaseProjectPrivateKey\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CurrentConfigurationGQL extends Apollo.Query<CurrentConfigurationQuery, CurrentConfigurationQueryVariables> {\n    document = CurrentConfigurationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePurchaseCodeDocument = gql`\n    mutation UpdatePurchaseCode($code: String!) {\n  updatePurchaseCode(purchaseCode: $code) {\n    status\n    clients {\n      ip\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePurchaseCodeGQL extends Apollo.Mutation<UpdatePurchaseCodeMutation, UpdatePurchaseCodeMutationVariables> {\n    document = UpdatePurchaseCodeDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateMapsApiKeyDocument = gql`\n    mutation UpdateMapsAPIKey($backend: String!, $adminPanel: String!) {\n  updateMapsAPIKey(backend: $backend, adminPanel: $adminPanel) {\n    status\n    message\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateMapsApiKeyGQL extends Apollo.Mutation<UpdateMapsApiKeyMutation, UpdateMapsApiKeyMutationVariables> {\n    document = UpdateMapsApiKeyDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateFirebaseDocument = gql`\n    mutation UpdateFirebase($keyFileName: String!) {\n  updateFirebase(keyFileName: $keyFileName) {\n    status\n    message\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateFirebaseGQL extends Apollo.Mutation<UpdateFirebaseMutation, UpdateFirebaseMutationVariables> {\n    document = UpdateFirebaseDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableServerDocument = gql`\n    mutation DisableServer($ip: String!) {\n  disablePreviousServer(ip: $ip) {\n    status\n    message\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableServerGQL extends Apollo.Mutation<DisableServerMutation, DisableServerMutationVariables> {\n    document = DisableServerDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const LoginDocument = gql`\n    query Login($username: String!, $password: String!) {\n  login(userName: $username, password: $password) {\n    token\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class LoginGQL extends Apollo.Query<LoginQuery, LoginQueryVariables> {\n    document = LoginDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }","/**\n  * @license\n  * Copyright Alibaba.com All Rights Reserved.\n  *\n  * Use of this source code is governed by an MIT-style license that can be\n  * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n  */\n\n export * from './public-api';","\nimport { AfterViewInit, Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';\nimport { Chart } from '@antv/g2';\nimport { ChartCfg } from '@antv/g2/lib/interface';\nimport { inNextTick } from 'ng-zorro-antd/core/util';\n\n @Directive({\n   selector: 'div[nzG2], div[nz-g2]',\n   exportAs: 'nzG2',\n   host: {\n     '[class.ant-g2]': 'true'\n   }\n })\n export class NzG2Directive implements AfterViewInit {\n   @Input() nzChartOptions!: Partial<ChartCfg>;\n\n   @Output() readonly nzChartInitialized = new EventEmitter<Chart>();\n\n   chartInstance!: Chart;\n\n   private el: HTMLDivElement;\n\n   constructor(elementRef: ElementRef, private ngZone: NgZone) {\n     this.el = elementRef.nativeElement;\n   }\n\n   ngAfterViewInit(): void {\n     inNextTick().subscribe(() => {\n       this.createChartInstance();\n     });\n   }\n\n   private createChartInstance(): void {\n     this.ngZone.runOutsideAngular(() => {\n       this.chartInstance = new Chart({\n         container: this.el,\n         autoFit: true,\n         ...this.nzChartOptions\n       });\n       setTimeout(() => {\n         this.chartInstance.forceFit();\n       }, 350);\n      \n       this.nzChartInitialized.next(this.chartInstance);\n     });\n   }\n }","/**\n  * @license\n  * Copyright Alibaba.com All Rights Reserved.\n  *\n  * Use of this source code is governed by an MIT-style license that can be\n  * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n  */\n\n import { CommonModule } from '@angular/common';\n import { NgModule } from '@angular/core';\n\n import { NzG2Directive } from './nz-g2.directive';\n\n @NgModule({\n   imports: [CommonModule],\n   declarations: [NzG2Directive],\n   exports: [NzG2Directive]\n })\n export class NzG2Module {}","/**\n  * @license\n  * Copyright Alibaba.com All Rights Reserved.\n  *\n  * Use of this source code is governed by an MIT-style license that can be\n  * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n  */\n\n export * from './nz-g2.module';\n export * from './nz-g2.directive';","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IconsProviderModule } from '../icons-provider.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GoogleMapsModule } from '@angular/google-maps';\nimport { TagColorService } from '../@services/tag-color/tag-color.service';\nimport { PhonePipe } from '../@pipes/phone.pipe';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzEmptyModule } from 'ng-zorro-antd/empty';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzInputNumberModule } from 'ng-zorro-antd/input-number';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { NzNotificationService } from 'ng-zorro-antd/notification';\nimport { NzRadioModule } from 'ng-zorro-antd/radio';\nimport { NzSelectModule } from 'ng-zorro-antd/select';\nimport { NzAlertModule } from 'ng-zorro-antd/alert';\nimport { NzTableModule } from 'ng-zorro-antd/table';\nimport { NzDividerModule } from 'ng-zorro-antd/divider';\nimport { NzDatePickerModule } from 'ng-zorro-antd/date-picker';\nimport { NzTimePickerModule } from 'ng-zorro-antd/time-picker';\nimport { NzTabsModule } from 'ng-zorro-antd/tabs';\nimport { NzTagModule } from 'ng-zorro-antd/tag';\nimport { NzPageHeaderModule } from 'ng-zorro-antd/page-header';\nimport { NzStatisticModule } from 'ng-zorro-antd/statistic';\nimport { NzDescriptionsModule } from 'ng-zorro-antd/descriptions';\nimport { NzUploadModule } from 'ng-zorro-antd/upload';\nimport { NzTransferModule } from 'ng-zorro-antd/transfer';\nimport { NzBadgeModule } from 'ng-zorro-antd/badge';\nimport { NzCommentModule } from 'ng-zorro-antd/comment';\nimport { NzAvatarModule } from 'ng-zorro-antd/avatar';\nimport { NzTimelineModule } from 'ng-zorro-antd/timeline';\nimport { NzCardModule } from 'ng-zorro-antd/card';\nimport { NzListModule } from 'ng-zorro-antd/list';\nimport { NzPopconfirmModule } from 'ng-zorro-antd/popconfirm';\nimport { NzPopoverModule } from 'ng-zorro-antd/popover';\nimport { NzStepsModule } from 'ng-zorro-antd/steps';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\nimport { NzSwitchModule } from 'ng-zorro-antd/switch';\nimport { NzPaginationModule } from 'ng-zorro-antd/pagination';\nimport { NzRateModule } from 'ng-zorro-antd/rate';\nimport { NzResultModule } from 'ng-zorro-antd/result';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { NzAutocompleteModule } from 'ng-zorro-antd/auto-complete';\nimport { NzG2Module } from './g2';\nimport { TimeagoModule } from 'ngx-timeago';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NzAlertModule,\n        NzTableModule,\n        NzInputModule,\n        NzDropDownModule,\n        NzButtonModule,\n        NzIconModule,\n        NzFormModule,\n        NzSelectModule,\n        NzRadioModule,\n        NzDividerModule,\n        NzDatePickerModule,\n        NzTimePickerModule,\n        NzTabsModule,\n        NzTagModule,\n        NzPageHeaderModule,\n        NzStatisticModule,\n        NzDescriptionsModule,\n        NzUploadModule,\n        NzTransferModule,\n        NzBadgeModule,\n        NzCommentModule,\n        NzAvatarModule,\n        NzEmptyModule,\n        NzTimelineModule,\n        NzCardModule,\n        NzListModule,\n        NzToolTipModule,\n        NzPopconfirmModule,\n        NzPopoverModule,\n        NzStepsModule,\n        NzInputNumberModule,\n        NzCheckboxModule,\n        IconsProviderModule,\n        HttpClientModule,\n        NzLayoutModule,\n        NzGridModule,\n        GoogleMapsModule,\n        NzSwitchModule,\n        NzPaginationModule,\n        NzRateModule,\n        NzResultModule,\n        TranslateModule,\n        NzG2Module,\n        TimeagoModule,\n        NzAutocompleteModule,\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NzAlertModule,\n        NzTableModule,\n        NzInputModule,\n        NzDropDownModule,\n        NzButtonModule,\n        NzIconModule,\n        NzFormModule,\n        NzSelectModule,\n        NzRadioModule,\n        NzDividerModule,\n        NzDatePickerModule,\n        NzTimePickerModule,\n        NzTabsModule,\n        NzTagModule,\n        NzPageHeaderModule,\n        NzStatisticModule,\n        NzDescriptionsModule,\n        NzUploadModule,\n        NzTransferModule,\n        NzBadgeModule,\n        NzCommentModule,\n        NzAvatarModule,\n        NzEmptyModule,\n        NzTimelineModule,\n        NzCardModule,\n        NzListModule,\n        NzPopconfirmModule,\n        NzPopoverModule,\n        NzStepsModule,\n        NzInputNumberModule,\n        NzCheckboxModule,\n        IconsProviderModule,\n        HttpClientModule,\n        NzLayoutModule,\n        NzGridModule,\n        GoogleMapsModule,\n        NzSwitchModule,\n        PhonePipe,\n        NzPaginationModule,\n        NzToolTipModule,\n        NzRateModule,\n        NzResultModule,\n        TranslateModule,\n        NzG2Module,\n        TimeagoModule,\n        NzAutocompleteModule\n    ],\n    declarations: [PhonePipe],\n    providers: [NzNotificationService, NzMessageService, NzModalService, TagColorService]\n})\nexport class SharedModule { }","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class LoginGuard implements CanActivate {\n  constructor(private router: Router) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const token = localStorage.getItem(\"somi_admin_token\");\n    if (token != null) {\n      return true;\n    } else {\n      this.router.navigate([\"login\"], {});\n      return false;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'phone' })\nexport class PhonePipe implements PipeTransform {\n    transform(value: any, ...args: any[]) {\n        var value = value.toString().trim().replace(/^\\+/, '');\n\n        // if (value.match(/[^0-9]/)) {\n        //     return value;\n        // }\n\n        var country, city, number;\n\n        switch (value.length) {\n            case 10: // +1PPP####### -> C (PPP) ###-####\n                country = 1;\n                city = value.slice(0, 3);\n                number = value.slice(3);\n                break;\n\n            case 11: // +CPPP####### -> CCC (PP) ###-####\n                country = value[0];\n                city = value.slice(1, 4);\n                number = value.slice(4);\n                break;\n\n            case 12: // +CCCPP####### -> CCC (PP) ###-####\n                country = value.slice(0, 3);\n                city = value.slice(3, 5);\n                number = value.slice(5);\n                break;\n\n            default:\n                return value;\n        }\n\n        /*if (country == 1) {\n            country = \"\";\n        }*/\n\n        number = number.slice(0, 3) + '-' + number.slice(3);\n        return `+${country} (${city}) ${number}`;\n    }\n}","import { Injectable } from \"@angular/core\";\nimport {\n  ComplaintStatus,\n  DriverStatus,\n  OrderStatus,\n  RiderStatus,\n  TransactionStatus,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { NzStatusColor } from \"ng-zorro-antd/core/color\";\n\n@Injectable()\nexport class TagColorService {\n  getTransactionStatusStatusColor(status: TransactionStatus): NzStatusColor {\n    switch (status) {\n      case TransactionStatus.Processing:\n        return \"processing\";\n      case TransactionStatus.Canceled:\n        return \"warning\";\n      case TransactionStatus.Done:\n        return \"success\";\n      case TransactionStatus.Rejected:\n        return \"error\";\n    }\n  }\n\n  orderStatus(value: OrderStatus): NzStatusColor {\n    switch (value) {\n      case OrderStatus.Expired:\n        return \"default\";\n\n      case OrderStatus.RiderCanceled:\n      case OrderStatus.DriverCanceled:\n      case OrderStatus.NotFound:\n      case OrderStatus.NoCloseFound:\n        return \"error\";\n\n      case OrderStatus.Booked:\n        return \"warning\";\n\n      case OrderStatus.Finished:\n        return \"success\";\n\n      default:\n        return \"processing\";\n    }\n  }\n\n  boolean(value: boolean): NzStatusColor {\n    return value ? \"success\" : \"error\";\n  }\n  driver(value: DriverStatus): NzStatusColor {\n    switch (value) {\n      case DriverStatus.Blocked:\n      case DriverStatus.HardReject:\n        return \"error\";\n\n      case DriverStatus.Online:\n        return \"processing\";\n\n      case DriverStatus.InService:\n        return \"success\";\n\n      case DriverStatus.WaitingDocuments:\n      case DriverStatus.SoftReject:\n      case DriverStatus.Offline:\n        return \"default\";\n\n      case DriverStatus.PendingApproval:\n        return \"warning\";\n    }\n  }\n\n  rider(value: RiderStatus): NzStatusColor {\n    switch (value) {\n      case RiderStatus.Disabled:\n        return \"error\";\n\n      case RiderStatus.Enabled:\n        return \"success\";\n    }\n  }\n\n  complaintStatus(status: ComplaintStatus): NzStatusColor {\n    switch (status) {\n      case ComplaintStatus.Resolved:\n        return \"success\";\n\n      case ComplaintStatus.Submitted:\n        return \"warning\";\n\n      case ComplaintStatus.UnderInvestigation:\n        return \"processing\";\n    }\n  }\n\n  // requestBadge(value: RequestStatus) {\n  //   switch (value) {\n  //     case (RequestStatus.RiderCanceled):\n  //     case (RequestStatus.DriverCanceled):\n  //     case (RequestStatus.NotFound):\n  //     case (RequestStatus.NoCloseFound):\n  //     case (RequestStatus.Expired):\n  //       return 'error';\n\n  //     case (RequestStatus.Booked):\n  //     case (RequestStatus.Started):\n  //     case (RequestStatus.WaitingForPostPay):\n  //     case (RequestStatus.WaitingForReview):\n  //       return 'processing';\n\n  //     case (RequestStatus.Finished):\n  //       return 'success';\n\n  //     default:\n  //       return 'default';\n  //   }\n\n  // }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginGuard } from './@guards/login.guard';\n\nconst routes: Routes = [\n  { path: 'login', loadChildren: () => import('./login/login.module').then(m => m.LoginModule) },\n  { path: 'config', loadChildren: () => import('./config/config.module').then(m => m.ConfigModule) },\n  { path: '', loadChildren: () => import('./cms/cms.module').then(m => m.CMSModule), canActivate: [LoginGuard] },\n  \n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import es from \"@angular/common/locales/es\";\nimport { registerLocaleData } from \"@angular/common\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport {\n  ar_EG,\n  de_DE,\n  en_US,\n  es_ES,\n  fr_FR,\n  hy_AM,\n  ja_JP,\n  ko_KR,\n  NzI18nService,\n  pt_PT,\n  ru_RU,\n  zh_CN,\n} from \"ng-zorro-antd/i18n\";\nimport { CurrentConfigurationGQL } from \"@ridy/admin-panel/generated/graphql\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Router } from \"@angular/router\";\nimport { CurrentConfigService } from \"./cms/current-config.service\";\n\n@Component({\n  selector: \"app-root\",\n  template: \"<router-outlet></router-outlet>\",\n})\nexport class AppComponent implements OnInit {\n  isDarkMode = false;\n  isCollapsed = false;\n\n  constructor(\n    public translate: TranslateService,\n    private i18n: NzI18nService,\n    private currentConfigService: CurrentConfigService,\n    private router: Router\n  ) {\n    translate.setDefaultLang(\"en\");\n    if (localStorage.getItem(\"lang\") != null) {\n      translate.use(localStorage.getItem(\"lang\") ?? \"en\");\n      switch (localStorage.getItem(\"lang\")) {\n        case \"en\":\n          this.i18n.setLocale(en_US);\n          break;\n        case \"es\":\n          this.i18n.setLocale(es_ES);\n          registerLocaleData(es);\n          break;\n        case \"fr\":\n          this.i18n.setLocale(fr_FR);\n          break;\n        case \"de\":\n          this.i18n.setLocale(de_DE);\n          break;\n        case \"ar\":\n          this.i18n.setLocale(ar_EG);\n          break;\n        case \"hy\":\n          this.i18n.setLocale(hy_AM);\n          break;\n        case \"ko\":\n          this.i18n.setLocale(ko_KR);\n          break;\n        case \"ru\":\n          this.i18n.setLocale(ru_RU);\n          break;\n        case \"zh\":\n          this.i18n.setLocale(zh_CN);\n          break;\n        case \"ja\":\n          this.i18n.setLocale(ja_JP);\n          break;\n        case \"pt\":\n          this.i18n.setLocale(pt_PT);\n          break;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    if (\n      window.matchMedia &&\n      window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ) {\n      //this.changeTheme();\n    }\n    this.loadConfiguration();\n  }\n\n  async loadConfiguration() {\n    const currentConfig = await this.currentConfigService.getConfig();\n    if (currentConfig.currentConfiguration.adminPanelAPIKey != null) {\n      await this.loadScript(\n        `https://maps.googleapis.com/maps/api/js?key=${currentConfig.currentConfiguration.adminPanelAPIKey}&libraries=drawing,places`\n      );\n    } else if (\n      currentConfig.currentConfiguration.firebaseProjectPrivateKey == null\n    ) {\n      this.router.navigateByUrl(\"config\");\n    }\n  }\n\n  loadScript(name: string) {\n    return new Promise<void>((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = name;\n      document.getElementsByTagName(\"head\")[0].appendChild(script);\n      resolve();\n    });\n  }\n\n  changeTheme(): void {\n    // this.isDarkMode = !this.isDarkMode;\n    // if (this.isDarkMode) {\n    //   const head = document.head || document.getElementsByTagName('head')[0];\n    //   const style = document.createElement('link');\n    //   style.type = 'text/css';\n    //   style.rel = 'stylesheet';\n    //   style.id = 'dark-theme';\n    //   style.href = '/theme.dark.css';\n    //   head.appendChild(style);\n    // } else {\n    //   const dom = document.getElementById('dark-theme');\n    //   if (dom) {\n    //     dom.remove();\n    //   }\n    // }\n  }\n}\n","import { BrowserModule, Title } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {TranslateModule, TranslateLoader, TranslateService} from '@ngx-translate/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { SharedModule } from './@components/shared.module';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { en_US, NZ_I18N } from 'ng-zorro-antd/i18n';\nimport { GraphQLModule } from './graphql.module';\nimport { TimeagoModule } from 'ngx-timeago';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { UserOutline, ContainerOutline, CustomerServiceOutline, GlobalOutline, BulbOutline, NotificationOutline, BankOutline, CarOutline, FundOutline, ControlOutline, PlusOutline, DashboardOutline, MenuFoldOutline, LogoutOutline, MenuUnfoldOutline, ArrowLeftOutline, DeleteOutline, PictureTwoTone, ExportOutline, InboxOutline, DownloadOutline, LockOutline, EyeInvisibleOutline, FieldTimeOutline, ScheduleOutline, FolderOpenOutline } from '@ant-design/icons-angular/icons';\nimport { IconDefinition } from '@ant-design/icons-angular';\nimport { ApolloModule } from 'apollo-angular';\n\nconst icons: IconDefinition[] = [ UserOutline, ContainerOutline, CustomerServiceOutline, GlobalOutline, BulbOutline, NotificationOutline, BankOutline, CarOutline, FundOutline, ControlOutline, PlusOutline, DashboardOutline, MenuFoldOutline, MenuUnfoldOutline, LogoutOutline, ArrowLeftOutline, DeleteOutline, PictureTwoTone, ExportOutline, InboxOutline, DownloadOutline, LockOutline, EyeInvisibleOutline, FieldTimeOutline, ScheduleOutline, FolderOpenOutline ];\nregisterLocaleData(en);\n\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ApolloModule,\n    SharedModule,\n    HttpClientModule,\n    GraphQLModule,\n    NzIconModule.forRoot(icons),\n    BrowserAnimationsModule,\n    TranslateModule.forRoot({\n      defaultLanguage: 'en',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n      }\n    ),\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n    TimeagoModule.forRoot()\n  ],\n  providers: [\n    { provide: NZ_I18N, useValue: en_US }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor(private title: Title, private translator: TranslateService) {\n    translator.get('branding.page.title').subscribe(x => {\n      title.setTitle(x);\n    })\n  }\n }\n","import { Injectable } from \"@angular/core\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  CurrentConfigurationGQL,\n  CurrentConfigurationQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { firstValueFrom } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CurrentConfigService {\n  currentConfig?: CurrentConfigurationQuery;\n\n  constructor(private currentConfigGql: CurrentConfigurationGQL) {}\n\n  async getConfig(): Promise<CurrentConfigurationQuery> {\n    if (this.currentConfig != null) {\n      return this.currentConfig;\n    }\n    this.currentConfig = (\n      await firstValueFrom(this.currentConfigGql.fetch({}))\n    ).data;\n    return this.currentConfig;\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { APOLLO_OPTIONS } from \"apollo-angular\";\nimport {\n  ApolloCache,\n  ApolloClientOptions,\n  ApolloLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n  split,\n} from \"@apollo/client/core\";\nimport { HttpLink } from \"apollo-angular/http\";\nimport { DefaultOptions } from \"@apollo/client/core\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { environment } from \"@ridy/admin-panel/src/environments/environment\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\n\nexport function createApollo(\n  httpLink: HttpLink\n): ApolloClientOptions<NormalizedCacheObject> {\n  const http = httpLink.create({\n    uri: `${environment.root}graphql`,\n  });\n  const wsLink = new WebSocketLink({\n    uri: environment.wsEndpoint,\n    options: {\n      reconnect: true,\n      connectionParams: {\n        authToken: localStorage.getItem(\"somi_admin_token\"),\n      },\n    },\n  });\n  const basic = setContext(() => ({\n    headers: {\n      Accept: \"charset=utf-8\",\n    },\n  }));\n  const auth = setContext(() => {\n    return {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"somi_admin_token\")}`,\n      },\n    };\n  });\n  const defaultOptions: DefaultOptions = {\n    watchQuery: {\n      fetchPolicy: \"no-cache\",\n      //errorPolicy: 'ignore',\n    },\n    query: {\n      fetchPolicy: \"no-cache\",\n      //errorPolicy: 'all',\n    },\n  };\n  const link = ApolloLink.from([basic, auth, http]);\n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === \"OperationDefinition\" &&\n        definition.operation === \"subscription\"\n      );\n    },\n    wsLink,\n    link\n  );\n\n  return {\n    cache: new InMemoryCache({\n      addTypename: false,\n    }),\n    link: splitLink,\n    defaultOptions,\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","import { NgModule } from '@angular/core';\nimport { NZ_ICONS } from 'ng-zorro-antd/icon';\n\nimport {\n  MenuFoldOutline,\n  MenuUnfoldOutline,\n  FormOutline,\n  DashboardOutline\n} from '@ant-design/icons-angular/icons';\n\nconst icons = [MenuFoldOutline, MenuUnfoldOutline, DashboardOutline, FormOutline];\n\n@NgModule({\n  providers: [\n    { provide: NZ_ICONS, useValue: icons }\n  ]\n})\nexport class IconsProviderModule {\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  root: \"http://api.somi.co.za:4001/\",\n  wsEndpoint: \"ws://api.somi.co.za:4001/graphql\",\n  // root: 'https://demo-admin.somi.co.za:4001/',\n  // wsEndpoint: 'wss://demo-admin.somi.co.za:4001/graphql',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}