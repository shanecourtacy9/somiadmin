{"version":3,"file":"src_app_cms_drivers_driver-profile_driver-profile_module_ts.js","mappings":"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","sources":["./src/app/cms/drivers/driver-profile/driver-profile-details/driver-profile-details.component.ts","./src/app/cms/drivers/driver-profile/driver-profile-details/driver-profile-details.component.html","./src/app/cms/drivers/driver-profile/driver-profile-documents/driver-profile-documents.component.ts","./src/app/cms/drivers/driver-profile/driver-profile-documents/driver-profile-documents.component.html","./src/app/cms/drivers/driver-profile/driver-profile-feedbacks/driver-profile-feedbacks.component.ts","./src/app/cms/drivers/driver-profile/driver-profile-feedbacks/driver-profile-feedbacks.component.html","./src/app/cms/drivers/driver-profile/driver-profile-feedbacks/driver-profile-feedbacks.resolver.ts","./src/app/cms/drivers/driver-profile/driver-profile-financial/driver-profile-financial.component.ts","./src/app/cms/drivers/driver-profile/driver-profile-financial/driver-profile-financial.component.html","./src/app/cms/drivers/driver-profile/driver-profile-financial/driver-profile-financial.resolver.ts","./src/app/cms/drivers/driver-profile/driver-profile-orders/driver-profile-orders.component.ts","./src/app/cms/drivers/driver-profile/driver-profile-orders/driver-profile-orders.component.html","./src/app/cms/drivers/driver-profile/driver-profile-orders/driver-profile-orders.resolver.ts","./src/app/cms/drivers/driver-profile/driver-profile-routing.module.ts","./src/app/cms/drivers/driver-profile/driver-profile.component.ts","./src/app/cms/drivers/driver-profile/driver-profile.component.html","./src/app/cms/drivers/driver-profile/driver-profile.module.ts","./src/app/cms/drivers/driver-profile/driver-profile.resolver.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  Gender,\n  UpdateDriverProfileGQL,\n  ViewDriverQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { RouterHelperService } from \"@ridy/admin-panel/src/app/@services/router-helper.service\";\nimport { environment } from \"@ridy/admin-panel/src/environments/environment\";\nimport { camelCase } from \"camel-case\";\nimport { NzMessageService } from \"ng-zorro-antd/message\";\nimport { NzUploadFile } from \"ng-zorro-antd/upload\";\nimport { firstValueFrom, map, Observable, Observer, Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-driver-profile-details\",\n  templateUrl: \"./driver-profile-details.component.html\",\n  styles: [\"nz-input-number {@apply w-full}\"],\n})\nexport class DriverProfileDetailsComponent implements OnInit, OnDestroy {\n  form = this.fb.group({\n    id: [null, Validators.required],\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    mobileNumber: [null, Validators.required],\n    gender: [null],\n    email: [null],\n    fleetId: [null],\n    carId: [null],\n    carColorId: [null],\n    carProductionYear: [null],\n    carPlate: [null],\n    accountNumber: [null],\n    bankName: [null],\n    bankRoutingNumber: [null],\n    bankSwift: [null],\n    address: [null],\n    mediaId: [null],\n    enabledServices: [null, Validators.required],\n  });\n  root: string = environment.root;\n  subscription?: Subscription;\n  query?: Observable<ApolloQueryResult<ViewDriverQuery>>;\n  genders = Object.values(Gender);\n  public gender = Gender;\n  public camelCase = camelCase;\n  jwt = localStorage.getItem(\"somi_admin_token\");\n  loadingUpload = false;\n  avatarUrl?: string;\n\n  beforeUpload = (file: NzUploadFile, _fileList: NzUploadFile[]) =>\n    new Observable((observer: Observer<boolean>) => {\n      const isJpgOrPng =\n        file.type === \"image/jpeg\" || file.type === \"image/png\";\n      if (!isJpgOrPng) {\n        this.msg.error(\"You can only upload JPG file!\");\n        observer.complete();\n        return;\n      }\n      const isLt2M = (file.size ?? 0) / 1024 / 1024 < 2;\n      if (!isLt2M) {\n        this.msg.error(\"Image must smaller than 2MB!\");\n        observer.complete();\n        return;\n      }\n      observer.next(isJpgOrPng && isLt2M);\n      observer.complete();\n    });\n\n  constructor(\n    private route: ActivatedRoute,\n    private msg: NzMessageService,\n    private updateGQL: UpdateDriverProfileGQL,\n    private routerHelper: RouterHelperService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.parent?.data.pipe(map((data) => data.driver));\n    this.subscription = this.route.parent?.data.subscribe((data) => {\n      data.driver.data.driver.enabledServices =\n        data.driver.data.driver.enabledServices.map(\n          (_service: { id: string }) => _service.id\n        );\n      this.form.patchValue(data.driver.data.driver);\n      this.avatarUrl = data.driver.data.driver.media?.address;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription?.unsubscribe();\n  }\n\n  async onSubmit() {\n    const { id, mobileNumber, enabledServices, ...update } = this.form.value;\n    await firstValueFrom(\n      this.updateGQL.mutate({ id, update, serviceIds: enabledServices })\n    );\n    this.routerHelper.refresh(this.route);\n  }\n\n  handleServiceCheckChange(checked: boolean, service: { id: string }) {\n    if (checked) {\n      if (this.form.value.enabledServices.indexOf(service.id) < 0) {\n        this.form.value.enabledServices.push(service.id);\n        this.form.patchValue({\n          enabledServices: this.form.value.enabledServices,\n        });\n      }\n    } else {\n      this.form.patchValue({\n        enabledServices: this.form.value.enabledServices.filter(\n          (_service: string) => _service != service.id.toString()\n        ),\n      });\n    }\n  }\n\n  handleUploadChange(event: { file: NzUploadFile }) {\n    switch (event.file.status) {\n      case \"uploading\":\n        //this.loading = true;\n        break;\n      case \"done\":\n        // Get this url from response in real world.\n        this.form.patchValue({ mediaId: event.file.response.id });\n        this.avatarUrl = event.file.response.address;\n        break;\n      case \"error\":\n        this.msg.error(\"Network error\");\n        //this.loading = false;\n        break;\n    }\n  }\n}\n","<form\n  nz-form\n  [formGroup]=\"form\"\n  nzLayout=\"vertical\"\n  (ngSubmit)=\"onSubmit()\"\n  *ngIf=\"(query | async)?.data as data\"\n>\n  <input formControlName=\"id\" type=\"hidden\" hidden />\n  <input formControlName=\"mediaId\" type=\"hidden\" hidden />\n  <input formControlName=\"enabledServices\" type=\"hidden\" hidden />\n  <div class=\"lg:grid lg:grid-cols-4 lg:gap-2\">\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"firstName\">First Name</nz-form-label>\n      <nz-form-control>\n        <input nz-input required formControlName=\"firstName\" id=\"firstName\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"lastName\">Last Name</nz-form-label>\n      <nz-form-control>\n        <input nz-input required formControlName=\"lastName\" id=\"lastName\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"gender\">Gender</nz-form-label>\n      <nz-select formControlName=\"gender\" id=\"gender\">\n        <nz-option\n          *ngFor=\"let g of genders\"\n          [nzLabel]=\"'enum.gender.' + camelCase(g) | translate\"\n          [nzValue]=\"g\"\n        >\n        </nz-option>\n      </nz-select>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"mobileNumber\"\n        >Mobile Number</nz-form-label\n      >\n      <nz-form-control>\n        <nz-input-number\n          required\n          formControlName=\"mobileNumber\"\n          id=\"mobileNumber\"\n        ></nz-input-number>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"email\">E-Mail</nz-form-label>\n      <nz-form-control>\n        <input nz-input formControlName=\"email\" id=\"email\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"fleet\">Fleet</nz-form-label>\n      <nz-form-control>\n        <nz-select id=\"fleet\" formControlName=\"fleetId\">\n          <nz-option [nzValue]=\"null\" nzLabel=\"\"></nz-option>\n          <nz-option\n            *ngFor=\"let fleet of data.fleets.nodes\"\n            [nzValue]=\"fleet.id\"\n            [nzLabel]=\"fleet.name\"\n          ></nz-option>\n        </nz-select>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"carId\">Car Model</nz-form-label>\n      <nz-form-control>\n        <nz-select id=\"carId\" formControlName=\"carId\">\n          <nz-option\n            *ngFor=\"let car of data.carModels.nodes\"\n            [nzValue]=\"car.id\"\n            [nzLabel]=\"car.name\"\n          ></nz-option>\n        </nz-select>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"carColorId\">Car Color</nz-form-label>\n      <nz-form-control>\n        <nz-select id=\"carColorId\" formControlName=\"carColorId\">\n          <nz-option\n            *ngFor=\"let carColor of data.carColors\"\n            [nzValue]=\"carColor.id\"\n            [nzLabel]=\"carColor.name\"\n          ></nz-option>\n        </nz-select>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"carProductionYear\"\n        >Car Production Year</nz-form-label\n      >\n      <nz-form-control>\n        <nz-input-number\n          formControlName=\"carProductionYear\"\n          id=\"carProductionYear\"\n        ></nz-input-number>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"carPlate\">Car Plate Number</nz-form-label>\n      <nz-form-control>\n        <input nz-input formControlName=\"carPlate\" id=\"carPlate\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"accountNumber\">Account Number</nz-form-label>\n      <nz-form-control>\n        <input nz-input formControlName=\"accountNumber\" id=\"accountNumber\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"bankName\">Bank Name</nz-form-label>\n      <nz-form-control>\n        <input nz-input formControlName=\"bankName\" id=\"bankName\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"bankRoutingNumber\"\n        >Bank Routing Number</nz-form-label\n      >\n      <nz-form-control>\n        <input\n          nz-input\n          formControlName=\"bankRoutingNumber\"\n          id=\"bankRoutingNumber\"\n        />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"bankSwift\">Bank Swift</nz-form-label>\n      <nz-form-control>\n        <input nz-input formControlName=\"bankSwift\" id=\"bankSwift\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"address\">Address</nz-form-label>\n      <nz-form-control>\n        <input nz-input formControlName=\"address\" id=\"address\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item class=\"lg:col-span-4\">\n      <nz-form-label nzRequired>\n        {{ \"profile.services\" | translate }}\n      </nz-form-label>\n      <nz-form-control>\n        <nz-tag\n          *ngFor=\"let service of data.services\"\n          nzMode=\"checkable\"\n          [nzChecked]=\"form.value.enabledServices.indexOf(service.id) > -1\"\n          (nzCheckedChange)=\"handleServiceCheckChange($event, service)\"\n        >\n          {{ service.name }}\n        </nz-tag>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label>Image</nz-form-label>\n      <nz-form-control>\n        <nz-upload\n          [nzAction]=\"root + 'upload'\"\n          [nzHeaders]=\"{ Authorization: 'Bearer ' + jwt }\"\n          (nzChange)=\"handleUploadChange($event)\"\n          [nzBeforeUpload]=\"beforeUpload\"\n          nzListType=\"picture-card\"\n          [nzShowUploadList]=\"false\"\n        >\n          <ng-container *ngIf=\"!avatarUrl\">\n            <i\n              class=\"upload-icon\"\n              nz-icon\n              [nzType]=\"loadingUpload ? 'loading' : 'plus'\"\n            ></i>\n            <div class=\"ant-upload-text\">\n              {{ \"profile.upload\" | translate }}\n            </div>\n          </ng-container>\n          <img *ngIf=\"avatarUrl\" [src]=\"root + avatarUrl\" style=\"width: 100%\" />\n        </nz-upload>\n      </nz-form-control>\n    </nz-form-item>\n  </div>\n  <!-- <formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\">\n    </formly-form>\n    <h3>{{ 'profile.services' | translate }}</h3>\n    <nz-transfer [nzTitles]=\"['All', 'Enabled']\" [nzDataSource]=\"services\">\n    </nz-transfer>\n    <br>\n    <br>\n    <h3>{{ 'profile.photo' | translate }}</h3>\n    <nz-upload [nzAction]=\"root + 'operator/upload'\" [nzHeaders]=\"{type: 'driver image'}\" (nzChange)=\"uploaded($event)\"\n      nzListType=\"picture-card\" [(nzFileList)]=\"fileList\" [nzShowButton]=\"fileList.length < 1\"\n      [nzShowUploadList]=\"showUploadList\">\n      <i nz-icon nzType=\"plus\"></i>\n      <div class=\"ant-upload-text\">{{ 'profile.upload' | translate }}</div>\n    </nz-upload>\n    <br> -->\n  <button nz-button nzType=\"default\" type=\"submit\" [disabled]=\"!form.valid\">\n    {{ \"profile.save\" | translate }}\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport { ViewDriverQuery } from \"@ridy/admin-panel/generated/graphql\";\nimport { environment } from \"@ridy/admin-panel/src/environments/environment\";\nimport { map, Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-driver-profile-documents\",\n  templateUrl: \"./driver-profile-documents.component.html\",\n})\nexport class DriverProfileDocumentsComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<ViewDriverQuery>>;\n  root = environment.root;\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.query = this.route.parent?.data.pipe(map((data) => data.driver));\n  }\n}\n","<div *ngIf=\"(query | async)?.data?.driver?.documents as documents\">\n  <div *ngFor=\"let document of documents\">\n    <a href=\"{{root + document.address}}\" target=\"_blank\"><img src=\"{{root + document.address}}\" style=\"width: 90%; margin: 10px;\"></a>\n  </div>\n</div>\n\n  \n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport { DriverFeedbacksQuery } from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { map, Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-driver-profile-feedbacks\",\n  templateUrl: \"./driver-profile-feedbacks.component.html\",\n})\nexport class DriverProfileFeedbacksComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<DriverFeedbacksQuery>>;\n\n  constructor(\n    public tagColor: TagColorService,\n    private route: ActivatedRoute,\n    public tableService: TableService\n  ) {}\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.feedbacks));\n  }\n}\n","<nz-table #table nzShowSizeChanger [nzFrontPagination]=\"false\" *ngIf=\"(query | async)?.data?.feedbacks as feedbacks\" [nzData]=\"feedbacks.nodes\" (nzQueryParams)=\"tableService.onTableQueryParamsChange\" nzBordered>\n  <thead>\n    <tr>\n      <th nzShowSort nzColumnKey=\"reviewTimestamp\">{{ 'profile.dateTime' | translate }}</th>\n      <th nzShowSort nzColumnKey=\"score\">{{ 'profile.rating' | translate }}</th>\n      <th class=\"hidden md:table-cell\">{{ 'profile.review' | translate }}</th>\n      <th class=\"hidden lg:table-cell\">Parameters</th>\n      <th>{{ 'profile.actions' | translate }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td [nz-tooltip]=\"data.reviewTimestamp | date:'short'\">{{ data.reviewTimestamp | timeago }}</td>\n      <td>{{ data.score }}%</td>\n      <td class=\"hidden md:table-cell\">{{ data.description }}</td>\n      <td class=\"hidden lg:table-cell\">\n        <nz-tag *ngFor=\"let parameter of data.parameters\" [nzColor]=\"tagColor.boolean(parameter.isGood)\">{{parameter.title}}</nz-tag>\n      </td>\n      <td>\n        <a *ngIf=\"data.requestId !== null\" [routerLink]=\"'/requests/view/' + data.requestId\">{{ 'table.viewRequest' | translate }}</a>\n      </td>\n    </tr>\n  </tbody>\n</nz-table>","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  DriverFeedbacksGQL,\n  DriverFeedbacksQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class DriverProfileFeedbacksResolver\n  implements Resolve<ApolloQueryResult<DriverFeedbacksQuery>>\n{\n  constructor(\n    private gql: DriverFeedbacksGQL,\n    private tableService: TableService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<DriverFeedbacksQuery>> {\n    const paging = this.tableService.deserializeQueryParams(route.queryParams);\n    return this.gql.fetch({\n      id: route.parent?.params.id,\n      paging: paging.paging,\n    });\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  CreateDriverTransactionGQL,\n  DriverDeductTransactionType,\n  DriverFinancialsQuery,\n  DriverRechargeTransactionType,\n  RiderRechargeTransactionType,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { RouterHelperService } from \"@ridy/admin-panel/src/app/@services/router-helper.service\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { CURRENCY_LIST } from \"@ridy/admin-panel/src/app/currencies\";\nimport { NzMessageService } from \"ng-zorro-antd/message\";\nimport { firstValueFrom, map, Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-driver-profile-financial\",\n  templateUrl: \"./driver-profile-financial.component.html\",\n})\nexport class DriverProfileFinancialComponent implements OnInit {\n  formTransaction = this.fb.group({\n    action: [null, Validators.required],\n    rechargeType: [null],\n    deductType: [null],\n    amount: [0, Validators.required],\n    currency: [null, Validators.required],\n    description: [null],\n    refrenceNumber: [null],\n  });\n  query?: Observable<ApolloQueryResult<DriverFinancialsQuery>>;\n  deductTypes = Object.values(DriverDeductTransactionType);\n  rechargeTypes = Object.values(DriverRechargeTransactionType);\n\n  constructor(\n    private route: ActivatedRoute,\n    public tableService: TableService,\n    public tagColor: TagColorService,\n    private fb: FormBuilder,\n    private createTransactionGQL: CreateDriverTransactionGQL,\n    private routerHelper: RouterHelperService,\n    private msg: NzMessageService\n  ) {}\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.financials));\n  }\n\n  async onSubmitTransaction() {\n    if (\n      this.formTransaction.value.action == \"Recharge\" &&\n      this.formTransaction.value.rechargeType == null\n    ) {\n      this.msg.error(\"Please select the transaction type.\");\n      return;\n    }\n    if (\n      this.formTransaction.value.action == \"Deduct\" &&\n      this.formTransaction.value.deductType == null\n    ) {\n      this.msg.error(\"Please select the transaction type.\");\n      return;\n    }\n    this.formTransaction.value.driverId = this.route.parent?.snapshot.params.id;\n    try {\n      await firstValueFrom(\n        this.createTransactionGQL.mutate({ input: this.formTransaction.value })\n      );\n      this.msg.success(\"Transaction Submitted.\");\n      this.routerHelper.refresh(this.route);\n      this.formTransaction.patchValue({});\n    } catch (error: any) {\n      this.msg.error(error.message);\n    }\n  }\n\n  getUniquieCurrencies(currencies: { currency: string }[] | undefined) {\n    if (currencies == undefined) return [];\n    return [...new Set(currencies)];\n  }\n}\n","<div fxLayout=\"row\" fxLayoutGap=\"4px\" class=\"dt-actionbar\">\n  <!--<button nz-button nzType=\"default\"><i nz-icon nzType=\"plus\"></i>Add</button>-->\n</div>\n<nz-table\n  #table\n  nzTitle=\"Transactions Records\"\n  nzShowSizeChanger\n  [nzFrontPagination]=\"false\"\n  *ngIf=\"(query | async)?.data?.driver?.transactions as transactions\"\n  [nzData]=\"transactions.nodes\"\n  [nzTotal]=\"transactions.totalCount\"\n  (nzQueryParams)=\"tableService.onTableQueryParamsChange($event)\"\n  nzBordered\n>\n  <thead>\n    <tr>\n      <th [nzSortFn]=\"true\" nzColumnKey=\"createdAt\">\n        {{ \"profile.dateTime\" | translate }}\n      </th>\n      <th>\n        {{ \"profile.transactionType\" | translate }}\n      </th>\n      <th>\n        {{ \"profile.amount\" | translate }}\n      </th>\n      <th class=\"hidden lg:table-cell\">\n        {{ \"profile.documentNumber\" | translate }}\n      </th>\n      <th class=\"hidden xl:table-cell\">\n        {{ \"profile.details\" | translate }}\n      </th>\n      <th>{{ \"profile.actions\" | translate }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td [nz-tooltip]=\"data.createdAt | date: 'short'\">\n        {{ data.createdAt | timeago }}\n      </td>\n      <td>\n        {{\n          data.action === \"Deduct\"\n            ? (\"enum.transactionType.\" + data.deductType | translate)\n            : (\"enum.transactionType.\" + data.rechargeType | translate)\n        }}\n        <nz-tag\n          *ngIf=\"data.status != 'Done'\"\n          [nzColor]=\"tagColor.getTransactionStatusStatusColor(data.status)\"\n          >{{ \"enum.transactionStatus.\" + data.status | translate }}</nz-tag\n        >\n      </td>\n      <td\n        [ngClass]=\"\n          data.action === 'Recharge' ? 'text-green-500' : 'text-red-500'\n        \"\n      >\n        {{ data.action === \"Recharge\" ? \"+\" : \"\"\n        }}{{ data.amount | currency: data.currency }}\n      </td>\n      <td class=\"hidden lg:table-cell\">{{ data.refrenceNumber }}</td>\n      <td class=\"hidden xl:table-cell\">{{ data.description }}</td>\n      <td>\n        <a\n          *ngIf=\"data.operatorId !== null\"\n          [routerLink]=\"'/management/users/view/' + data.operatorId\"\n          >{{ \"table.viewOperator\" | translate }}</a\n        >\n        <a\n          *ngIf=\"data.paymentGatewayId !== null\"\n          [routerLink]=\"\n            '/management/payment-gateways/view/' + data.paymentGatewayId\n          \"\n          >{{ \"table.viewGateway\" | translate }}</a\n        >\n        <a\n          *ngIf=\"data.requestId !== null\"\n          [routerLink]=\"'/requests/view/' + data.requestId\"\n          >{{ \"table.viewRequest\" | translate }}</a\n        >\n      </td>\n    </tr>\n  </tbody>\n</nz-table>\n<nz-table\n  #walletTable\n  *ngIf=\"(query | async)?.data?.driver?.wallets as driverWallets\"\n  nzTitle=\"Wallet Summary\"\n  [nzFrontPagination]\n  [nzData]=\"driverWallets\"\n  [nzTotal]=\"driverWallets.length\"\n  nzBordered\n  class=\"mt-2\"\n>\n  <thead>\n    <tr>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of walletTable.data\">\n      <td>{{ item.balance | currency: item.currency }}</td>\n    </tr>\n  </tbody>\n</nz-table>\n<nz-card nzTitle=\"{{ 'profile.insertTransaction' | translate }}\" class=\"mt-2\">\n  <form\n    nz-form\n    [formGroup]=\"formTransaction\"\n    (ngSubmit)=\"onSubmitTransaction()\"\n  >\n    <div class=\"lg:grid lg:grid-cols-2 lg:gap-2\">\n      <nz-form-item>\n        <nz-form-label nzRequired>Type</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"action\" nzRequired>\n            <nz-option nzLabel=\"Deduct\" nzValue=\"Deduct\"></nz-option>\n            <nz-option nzLabel=\"Recharge\" nzValue=\"Recharge\"></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <div *ngIf=\"formTransaction.value.action === null\"></div>\n      <nz-form-item *ngIf=\"formTransaction.value.action === 'Recharge'\">\n        <nz-form-label>Recharge Type</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"rechargeType\">\n            <nz-option\n              *ngFor=\"let type of rechargeTypes\"\n              [nzLabel]=\"'enum.transactionType.' + type | translate\"\n              [nzValue]=\"type\"\n            ></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item *ngIf=\"formTransaction.value.action === 'Deduct'\">\n        <nz-form-label>Deduct Type</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"deductType\">\n            <nz-option\n              *ngFor=\"let type of deductTypes\"\n              [nzLabel]=\"'enum.transactionType.' + type | translate\"\n              [nzValue]=\"type\"\n            ></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzRequired nzFor=\"amount\">Amount</nz-form-label>\n        <nz-form-control>\n          <nz-input-number\n            formControlName=\"amount\"\n            id=\"amount\"\n            class=\"w-full\"\n            required\n          ></nz-input-number>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzRequired>Currency</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"currency\" id=\"currency\" required>\n            <nz-option\n              *ngFor=\"\n                let currency of getUniquieCurrencies(\n                  (query | async)?.data?.regions?.nodes\n                )\n              \"\n              [nzLabel]=\"currency.currency\"\n              [nzValue]=\"currency.currency\"\n            ></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzFor=\"refrenceNumber\">Document Number</nz-form-label>\n        <nz-form-control>\n          <input\n            nz-input\n            formControlName=\"refrenceNumber\"\n            id=\"refrenceNumber\"\n          />\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzFor=\"description\">Description</nz-form-label>\n        <nz-form-control>\n          <input nz-input formControlName=\"description\" id=\"description\" />\n        </nz-form-control>\n      </nz-form-item>\n    </div>\n    <button\n      class=\"float-right mt-2\"\n      nz-button\n      nzType=\"default\"\n      type=\"submit\"\n      [disabled]=\"!formTransaction.valid\"\n    >\n      {{ \"profile.submit\" | translate }}\n    </button>\n  </form>\n</nz-card>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  DriverFinancialsGQL,\n  DriverFinancialsQuery,\n  DriverTransactionFilter,\n  DriverTransactionSortFields,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class DriverProfileFinancialsResolver\n  implements Resolve<ApolloQueryResult<DriverFinancialsQuery>>\n{\n  constructor(\n    private gql: DriverFinancialsGQL,\n    private tableService: TableService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<DriverFinancialsQuery>> {\n    const paging = this.tableService.deserializeQueryParams<\n      DriverTransactionSortFields,\n      DriverTransactionFilter\n    >(route.queryParams);\n    return this.gql.fetch({ id: route.parent?.params.id, ...paging });\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  DriverOrdersQuery,\n  OrderStatus,\n  RiderOrdersQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { GetRowsDto } from \"@ridy/admin-panel/src/app/@models/get.rows.dto\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-driver-profile-orders\",\n  templateUrl: \"./driver-profile-orders.component.html\",\n})\nexport class DriverProfileOrdersComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<DriverOrdersQuery>>;\n  statuses = Object.keys(OrderStatus).map((key) => ({ text: key, value: key }));\n\n  constructor(\n    private route: ActivatedRoute,\n    public tagColor: TagColorService,\n    public tableService: TableService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.orders));\n  }\n}\n","<nz-table #table nzShowSizeChanger class=\"mt-4\" [nzFrontPagination]=\"false\" *ngIf=\"(query | async)?.data?.driver?.orders?.nodes as orders\" [nzData]=\"orders\" (nzQueryParams)=\"tableService.onTableQueryParamsChange($event)\" nzBordered>\n  <thead>\n    <tr>\n      <th [nzSortFn]=\"true\" nzColumnKey=\"createdOn\">\n        {{ 'profile.dateTime' | translate }}\n      </th>\n      <th class=\"hidden lg:table-cell\">\n        {{ 'profile.locations' | translate }}\n      </th>\n      <th>\n        {{ 'profile.cost' | translate }}\n      </th>\n      <th>\n        {{ 'profile.status' | translate }}\n      </th>\n      <th>{{ 'profile.actions' | translate }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td [nz-tooltip]=\"data.createdOn | date:'short'\">{{ data.createdOn | timeago }}</td>\n      <td class=\"hidden lg:table-cell\">{{ data.addresses[0] }}</td>\n      <td>{{ data.costAfterCoupon | currency: data.currency }}</td>\n      <td>\n        <nz-tag [nzColor]=\"tagColor.orderStatus(data.status)\">{{('enum.request.' + data.status) | translate }}</nz-tag>\n      </td>\n      <td>\n        <a [routerLink]=\"'/requests/view/' + data.id\">{{ 'profile.view' | translate }}</a>\n      </td>\n    </tr>\n  </tbody>\n</nz-table>","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  DriverOrdersGQL,\n  DriverOrdersQuery,\n  OrderFilter,\n  OrderSortFields,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class DriverProfileOrdersResolver\n  implements Resolve<ApolloQueryResult<DriverOrdersQuery>>\n{\n  constructor(\n    private gql: DriverOrdersGQL,\n    private tableService: TableService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<DriverOrdersQuery>> {\n    const paging = this.tableService.deserializeQueryParams<\n      OrderSortFields,\n      OrderFilter\n    >(route.queryParams);\n    return this.gql.fetch({ driverId: route.parent?.params.id, ...paging });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { DriverProfileDetailsComponent } from './driver-profile-details/driver-profile-details.component';\nimport { DriverProfileDocumentsComponent } from './driver-profile-documents/driver-profile-documents.component';\nimport { DriverProfileFeedbacksComponent } from './driver-profile-feedbacks/driver-profile-feedbacks.component';\nimport { DriverProfileFeedbacksResolver } from './driver-profile-feedbacks/driver-profile-feedbacks.resolver';\nimport { DriverProfileFinancialComponent } from './driver-profile-financial/driver-profile-financial.component';\nimport { DriverProfileFinancialsResolver } from './driver-profile-financial/driver-profile-financial.resolver';\nimport { DriverProfileOrdersComponent } from './driver-profile-orders/driver-profile-orders.component';\nimport { DriverProfileOrdersResolver } from './driver-profile-orders/driver-profile-orders.resolver';\nimport { DriverProfileComponent } from './driver-profile.component';\nimport { DriverProfileResolver } from './driver-profile.resolver';\n\nconst routes: Routes = [\n  {\n    path: '', component: DriverProfileComponent, resolve: { driver: DriverProfileResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange', children: [\n      { path: '', redirectTo: 'details' },\n      { path: 'details', component: DriverProfileDetailsComponent },\n      { path: 'orders', component: DriverProfileOrdersComponent, resolve: { orders: DriverProfileOrdersResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n      { path: 'financial', component: DriverProfileFinancialComponent, resolve: { financials: DriverProfileFinancialsResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n      { path: 'reviews', component: DriverProfileFeedbacksComponent, resolve: {feedbacks: DriverProfileFeedbacksResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n      { path: 'documents', component: DriverProfileDocumentsComponent }\n\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    DriverProfileResolver,\n    DriverProfileFinancialsResolver,\n    DriverProfileFeedbacksResolver,\n    DriverProfileOrdersResolver\n  ]\n})\nexport class DriverProfileRoutingModule { }\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  DriverStatus,\n  UpdateDriverStatusGQL,\n  ViewDriverQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { environment } from \"@ridy/admin-panel/src/environments/environment\";\nimport { NzMessageService } from \"ng-zorro-antd/message\";\nimport { firstValueFrom, map, Observable } from \"rxjs\";\nimport { camelCase } from \"camel-case\";\nimport { RouterHelperService } from \"../../../@services/router-helper.service\";\n\n@Component({\n  selector: \"app-driver-profile\",\n  templateUrl: \"./driver-profile.component.html\",\n})\nexport class DriverProfileComponent implements OnInit {\n  public driverStatus = DriverStatus;\n  query?: Observable<ApolloQueryResult<ViewDriverQuery>>;\n  root = environment.root;\n  toCamelCase = camelCase;\n\n  constructor(\n    private route: ActivatedRoute,\n    public tagColor: TagColorService,\n    private message: NzMessageService,\n    private updateGQL: UpdateDriverStatusGQL,\n    private routerHelper: RouterHelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.driver));\n  }\n\n  async changeStatus(status: DriverStatus) {\n    const id = this.route.snapshot.params.id ?? 0;\n    await firstValueFrom(this.updateGQL.mutate({ id, status }));\n    this.routerHelper.refresh(this.route);\n  }\n}\n","<nz-card>\n  <nz-page-header *ngIf=\"(query | async)?.data?.driver as driver\">\n    <nz-page-header-title>\n      <nz-avatar nzIcon=\"user\" [nzSrc]=\"driver.media?.address ? (root + driver.media?.address) : undefined\"></nz-avatar>{{driver.firstName}} {{driver.lastName}}\n    </nz-page-header-title>\n    <nz-page-header-tags>\n      <nz-tag [nzColor]=\"tagColor.driver(driver.status)\">{{('enum.driver.status.' + toCamelCase(driver.status)) | translate}}</nz-tag>\n    </nz-page-header-tags>\n    <nz-page-header-extra>\n      <button nz-button nz-dropdown [nzDropdownMenu]=\"menu4\">\n        {{'driver.profile.changeStatus' | translate}}\n        <i nz-icon nzType=\"down\"></i>\n      </button>\n      <nz-dropdown-menu #menu4=\"nzDropdownMenu\">\n        <ul nz-menu>\n          <li nz-menu-item (click)='changeStatus(driverStatus.PendingApproval)'>{{'enum.driver.status.pendingApproval' | translate}}</li>\n          <li nz-menu-item (click)=\"changeStatus(driverStatus.Offline)\">{{'enum.driver.status.approved' | translate}} </li>\n          <li nz-menu-item (click)=\"changeStatus(driverStatus.Blocked)\">{{'enum.driver.status.blocked' | translate}}</li>\n          <li nz-menu-item (click)=\"changeStatus(driverStatus.SoftReject)\">{{'enum.driver.status.softReject' | translate}}</li>\n          <li nz-menu-item (click)=\"changeStatus(driverStatus.HardReject)\">{{'enum.driver.status.hardReject' | translate}}</li>\n          <li nz-menu-item (click)=\"changeStatus(driverStatus.Offline)\">{{'enum.driver.status.offline' | translate}}</li>\n          <li nz-menu-item (click)=\"changeStatus(driverStatus.WaitingDocuments)\">{{'enum.driver.status.waitingDocuments' | translate}}</li>\n          <li nz-menu-item hidden (click)=\"changeStatus(driverStatus.InService)\">{{'enum.driver.status.inService' | translate}}</li>\n          <li nz-menu-item hidden (click)=\"changeStatus(driverStatus.Online)\">{{'enum.driver.status.online' | translate}}</li>\n        </ul>\n      </nz-dropdown-menu>\n    </nz-page-header-extra>\n    <nz-page-header-content>\n      <nz-descriptions>\n        <nz-descriptions-item [nzTitle]=\"'profile.registeredOn' | translate\">{{driver.registrationTimestamp | timeago}}</nz-descriptions-item>\n        <nz-descriptions-item [nzTitle]=\"'driver.profile.lastSeenAt' | translate\" *ngIf=\"driver.status !== 'Online'\">{{driver.lastSeenTimestamp != null ? (driver.lastSeenTimestamp | timeago) : '-'}}</nz-descriptions-item>\n        <nz-descriptions-item [nzTitle]=\"'driver.profile.rating' | translate\">{{(driver.rating !== null ? (driver.rating + '%' + '(' + driver.reviewCount  + ' reviews)') : 'N/A')}}</nz-descriptions-item>\n      </nz-descriptions>\n      \n    </nz-page-header-content>\n    <nz-page-header-footer>\n      <nz-tabset [nzLinkExact]=\"false\" nzLinkRouter class=\"mb-2\">\n        <nz-tab>\n          <a *nzTabLink nz-tab-link routerLink=\"details\">{{'driver.profile.details' | translate}}</a>\n        </nz-tab>\n        <nz-tab>\n          <a *nzTabLink nz-tab-link routerLink=\"orders\">{{'driver.profile.orders' | translate}}</a>\n        </nz-tab>\n        <nz-tab>\n          <a *nzTabLink nz-tab-link routerLink=\"financial\">{{'driver.profile.financials' | translate}}</a>\n        </nz-tab>\n        <nz-tab>\n          <a *nzTabLink nz-tab-link routerLink=\"reviews\">{{'driver.profile.reviews' | translate}}</a>\n        </nz-tab>\n        <nz-tab>\n          <a *nzTabLink nz-tab-link routerLink=\"documents\">{{'driver.profile.documents' | translate}}</a>\n        </nz-tab>\n      </nz-tabset>\n      <router-outlet></router-outlet>\n    </nz-page-header-footer>\n  </nz-page-header>\n</nz-card>","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { SharedModule } from \"@ridy/admin-panel/src/app/@components/shared.module\";\n\nimport { DriverProfileDetailsComponent } from \"./driver-profile-details/driver-profile-details.component\";\nimport { DriverProfileDocumentsComponent } from \"./driver-profile-documents/driver-profile-documents.component\";\nimport { DriverProfileFeedbacksComponent } from \"./driver-profile-feedbacks/driver-profile-feedbacks.component\";\nimport { DriverProfileFinancialComponent } from \"./driver-profile-financial/driver-profile-financial.component\";\nimport { DriverProfileOrdersComponent } from \"./driver-profile-orders/driver-profile-orders.component\";\nimport { DriverProfileRoutingModule } from \"./driver-profile-routing.module\";\nimport { DriverProfileComponent } from \"./driver-profile.component\";\n\n@NgModule({\n  declarations: [\n    DriverProfileComponent,\n    DriverProfileDetailsComponent,\n    DriverProfileFinancialComponent,\n    DriverProfileFeedbacksComponent,\n    DriverProfileDocumentsComponent,\n    DriverProfileOrdersComponent,\n  ],\n  imports: [DriverProfileRoutingModule, SharedModule],\n})\nexport class DriverProfileModule {}\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  ViewDriverGQL,\n  ViewDriverQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class DriverProfileResolver\n  implements Resolve<ApolloQueryResult<ViewDriverQuery>>\n{\n  constructor(private gql: ViewDriverGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<ViewDriverQuery>> {\n    return this.gql.fetch({ id: route.params.id });\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}