{"version":3,"file":"src_app_cms_management_management-users_management-users_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;AACuD;AACsB;AACF;AAEJ;AACF;;;AAGrE,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,gFAAkB,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,8EAAiB,EAAE,EAAE,qBAAqB,EAAE,2BAA2B,EAAE;IAC1I,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,6MAAsC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE;IAC5G,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,sFAAoB,EAAE,OAAO,EAAE,EAAC,QAAQ,EAAE,oFAAmB,EAAC,EAAE;IAC1F,iHAAiH;IACjH,2GAA2G;CAC5G,CAAC;AAUK,MAAM,4BAA4B;;wGAA5B,4BAA4B;yHAA5B,4BAA4B;8HAL5B;QACT,8EAAiB;QACjB,oFAAmB;KACpB,YALQ,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAMX,4BAA4B,oFAN7B,yDAAY;;;;;;;;;;;;;;;;;;;AChByD;AACV;AACY;;AAM5E,MAAM,qBAAqB;;0FAArB,qBAAqB;kHAArB,qBAAqB;sHAFvB,CAAC,0FAA4B,EAAE,4FAAY,CAAC;mIAE1C,qBAAqB,mBAHjB,gFAAkB,aACvB,0FAA4B,EAAE,4FAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRc;AACnB;AAKJ;AAC+B;AACrB;AAE2B;;;;;;;;;;;;;;;;;ICcxE,2EAIa;;;IAFX,+EAAmB;;;IAwBjB,2EAIa;;;IAFX,kHAAmD;;;IAHvD,gFAAoE;IAClE,4IAIa;IACf,4DAAY;;;IAJS,0DAAe;IAAf,wFAAe;;;;IAiB1C,6EAKC;IADC,2SAAS,mBAAY,IAAC;IAEtB,qEACF;IAAA,4DAAS;;;IAJP,yFAAyB;;;ADtD1B,MAAM,oBAAoB;IAa/B,YACU,EAAe,EACf,SAA4B,EAC5B,YAAiC,EACjC,KAAqB;QAHrB,OAAE,GAAF,EAAE,CAAa;QACf,cAAS,GAAT,SAAS,CAAmB;QAC5B,iBAAY,GAAZ,YAAY,CAAqB;QACjC,UAAK,GAAL,KAAK,CAAgB;QAf/B,SAAI,GAAc,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC9B,SAAS,EAAE,CAAC,IAAI,CAAC;YACjB,QAAQ,EAAE,CAAC,IAAI,CAAC;YAChB,MAAM,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACnC,iBAAiB,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YAC9C,WAAW,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACxC,QAAQ,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACrC,QAAQ,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;SACtC,CAAC,CAAC;QACH,iBAAY,GAAG,sFAAiB,CAAC;IAO9B,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,yCAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClE,CAAC;IAEK,UAAU;;YACd,MAAM,KAAoD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAnE,EAAE,WAAW,EAAE,iBAAiB,OAAmC,EAA9B,UAAU,qDAA/C,oCAAiD,CAAkB,CAAC;YAC1E,MAAM,oDAAc,CAClB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBACpB,KAAK,kBACH,YAAY,EAAE,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,WAAW,EAAE,IAC5D,UAAU,CACd;aACF,CAAC,CACH,CAAC;YACF,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;KAAA;;wFAnCU,oBAAoB;kHAApB,oBAAoB;QClBjC,+EAMiB;QACjB,6EAAmD;QAChB,gJAAY,gBAAY,IAAC;QACxD,+EAAc;QACgC,qEAAU;QAAA,4DAAgB;QACtE,qFAAgE;QAC9D,sEAAsE;QACxE,4DAAkB;QAEpB,+EAAc;QAC+B,qEAAS;QAAA,4DAAgB;QACpE,sFAA+D;QAC7D,uEAAoE;QACtE,4DAAkB;QAEpB,gFAAc;QAC6B,gEAAI;QAAA,4DAAgB;QAC7D,uFAAmD;QAE/C,+HAIa;;QACf,4DAAY;QAGhB,gFAAc;QAC+B,qEAAS;QAAA,4DAAgB;QACpE,uFAA+D;QAC7D,wEAAoE;QACtE,4DAAkB;QAEpB,gFAAc;QAC+B,oEAAQ;QAAA,4DAAgB;QACnE,uFAA8D;QAC5D,wEAAoE;QACtE,4DAAkB;QAEpB,gFAAc;QACkC,wEAAY;QAAA,4DAAgB;QAC1E,mFAAiB;QAEb,+MAQc;QACd,wEAAiE;QACnE,4DAAiB;QAGrB,gFAAc;QACiB,kEAAM;QAAA,4DAAgB;QACnD,uFAA4D;QAC1D,wEAAqD;QACvD,4DAAkB;QAEpB,+MASc;QAChB,4DAAO;;;;;QA7EP,0EAAiB;QAMV,0DAA2B;QAA3B,iJAA2B;QACpB,0DAAkB;QAAlB,+EAAkB;QAkBL,2DAAuC;QAAvC,sOAAuC;QAsB5C,2DAAqC;QAArC,8EAAqC;;;;;;;;;;;;;;;;;;AC3CpC;AAKoB;;;AAItC,MAAM,mBAAmB;IAG9B,YAAoB,GAAmB;QAAnB,QAAG,GAAH,GAAG,CAAgB;IAAG,CAAC;IAE3C,OAAO,CACL,KAA6B,EAC7B,KAA0B;QAE1B,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;;sFAVU,mBAAmB;oHAAnB,mBAAmB,WAAnB,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbyB;AAGwB;AACiB;AAC3D;;;;;;;;;;;;;;ICwB/B,qEAAoC;IAC9B,uDAAwC;IAAA,4DAAK;IACjD,qEAAI;IAAA,uDAAmB;IAAA,4DAAK;IAC5B,qEAAI;IACkC,uDAElC;;IAAA,4DAAI;;;IALJ,0DAAwC;IAAxC,kHAAwC;IACxC,0DAAmB;IAAnB,iFAAmB;IAElB,0DAAgC;IAAhC,4FAAgC;IAAC,0DAElC;IAFkC,iJAElC;;;;IAxBV,iFASC;IAFC,6TAAiB,oDAA6C,IAAC;IAG/D,wEAAO;IAEC,uDAAgC;;IAAA,4DAAK;IACzC,qEAAI;IAAA,uDAAoC;;IAAA,4DAAK;IAC7C,sEAAI;IAAA,wDAAmC;;IAAA,4DAAK;IAGhD,yEAAO;IACL,yHAQK;IACP,4DAAQ;;;;IAxBR,oFAA2B;IASnB,0DAAgC;IAAhC,gJAAgC;IAChC,0DAAoC;IAApC,oJAAoC;IACpC,0DAAmC;IAAnC,qJAAmC;IAIpB,0DAAa;IAAb,6EAAa;;ADlBnC,MAAM,kBAAkB;IAG7B,YACU,KAAqB,EACrB,MAAc,EACf,QAAyB,EACzB,YAA0B;QAHzB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACf,aAAQ,GAAR,QAAQ,CAAiB;QACzB,iBAAY,GAAZ,YAAY,CAAc;IAChC,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,yCAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACnE,CAAC;;oFAZU,kBAAkB;gHAAlB,kBAAkB;QCZ/B,oFAKC;QAGK,kEAA6B;QAAA,uDAC/B;;QAAA,4DAAS;QAEX,yFAAwB;QACtB,0HA4BW;;QACb,4DAAyB;;;QAxCzB,0EAAiB;QAOgB,0DAC/B;QAD+B,yJAC/B;QAOG,0DAAuC;QAAvC,8NAAuC;;;;;;;;;;;;;;;;;;;ACXrB;AAOoB;AACoC;;;;AAI1E,MAAM,iBAAiB;IAG5B,YAAoB,MAAoB,EAAU,GAAiB;QAA/C,WAAM,GAAN,MAAM,CAAc;QAAU,QAAG,GAAH,GAAG,CAAc;IAAG,CAAC;IAEvE,OAAO,CACL,KAA6B,EAC7B,KAA0B;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAG/C,KAAK,CAAC,WAAW,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;;kFAdU,iBAAiB;kHAAjB,iBAAiB,WAAjB,iBAAiB","sources":["./src/app/cms/management/management-users/management-users-routing.module.ts","./src/app/cms/management/management-users/management-users.module.ts","./src/app/cms/management/management-users/operator-new/operator-new.component.ts","./src/app/cms/management/management-users/operator-new/operator-new.component.html","./src/app/cms/management/management-users/operator-new/operator-new.resolver.ts","./src/app/cms/management/management-users/users-list/users-list.component.ts","./src/app/cms/management/management-users/users-list/users-list.component.html","./src/app/cms/management/management-users/users-list/users-list.resolver.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { OperatorNewComponent } from './operator-new/operator-new.component';\nimport { OperatorNewResolver } from './operator-new/operator-new.resolver';\n\nimport { UsersListComponent } from './users-list/users-list.component';\nimport { UsersListResolver } from './users-list/users-list.resolver';\n\n\nconst routes: Routes = [\n  { path: '', component: UsersListComponent, resolve: { operators: UsersListResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n  { path: 'view/:id', loadChildren: () => import('./user-view/user-view.module').then(m => m.UserViewModule) },\n  { path: 'new', component: OperatorNewComponent, resolve: {operator: OperatorNewResolver} }\n  //{ path: 'view/:id', component: UserViewComponent, resolve: { item: ItemResolver }, data: {table: 'Operator'} },\n  //{ path: 'new', component: UserViewComponent, resolve: { item: ItemResolver }, data: {table: 'Operator'} }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    UsersListResolver,\n    OperatorNewResolver\n  ]\n})\nexport class ManagementUsersRoutingModule { }\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { ManagementUsersRoutingModule } from \"./management-users-routing.module\";\nimport { UsersListComponent } from \"./users-list/users-list.component\";\nimport { SharedModule } from \"@ridy/admin-panel/src/app/@components/shared.module\";\n\n@NgModule({\n  declarations: [UsersListComponent],\n  imports: [ManagementUsersRoutingModule, SharedModule],\n})\nexport class ManagementUsersModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  CreateOperatorGQL,\n  NewOperatorQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { COUNTRY_CODE_LIST } from \"@ridy/admin-panel/src/app/country-codes\";\nimport { firstValueFrom, map, Observable } from \"rxjs\";\n\nimport { RouterHelperService } from \"../../../../@services/router-helper.service\";\n\n@Component({\n  selector: \"app-operator-new\",\n  templateUrl: \"./operator-new.component.html\",\n  styles: [],\n})\nexport class OperatorNewComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<NewOperatorQuery>>;\n  form: FormGroup = this.fb.group({\n    firstName: [null],\n    lastName: [null],\n    roleId: [null, Validators.required],\n    phoneNumberPrefix: [\"+1\", Validators.required],\n    phoneNumber: [null, Validators.required],\n    userName: [null, Validators.required],\n    password: [null, Validators.required],\n  });\n  countryCodes = COUNTRY_CODE_LIST;\n\n  constructor(\n    private fb: FormBuilder,\n    private createGQL: CreateOperatorGQL,\n    private routerHelper: RouterHelperService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.operator));\n  }\n\n  async submitForm() {\n    const { phoneNumber, phoneNumberPrefix, ..._formValue } = this.form.value;\n    await firstValueFrom(\n      this.createGQL.mutate({\n        input: {\n          mobileNumber: `${phoneNumberPrefix.substring(1)}${phoneNumber}`,\n          ..._formValue,\n        },\n      })\n    );\n    this.routerHelper.goToParent(this.route);\n  }\n}\n","<nz-page-header\n  [nzGhost]=\"false\"\n  nzBackIcon\n  nzTitle=\"New Operator\"\n  nzSubtitle=\"Input Operator's details below.\"\n>\n</nz-page-header>\n<nz-card [nzActions]=\"[tmplActions]\" style=\"mt-16\">\n  <form nz-form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"firstName\">First Name</nz-form-label>\n      <nz-form-control nzErrorTip=\"The input is not valid First Name\">\n        <input nz-input required formControlName=\"firstName\" id=\"firstName\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"lastName\">Last Name</nz-form-label>\n      <nz-form-control nzErrorTip=\"The input is not valid Last Name\">\n        <input nz-input required formControlName=\"lastName\" id=\"lastName\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"roleId\">Role</nz-form-label>\n      <nz-form-control nzErrorTip=\"Role is not selected\">\n        <nz-select required formControlName=\"roleId\">\n          <nz-option\n            *ngFor=\"let role of (query | async)?.data?.operatorRoles\"\n            [nzValue]=\"role.id\"\n            [nzLabel]=\"role.title\"\n          ></nz-option>\n        </nz-select>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"userName\">User Name</nz-form-label>\n      <nz-form-control nzErrorTip=\"The input is not valid User Name\">\n        <input nz-input required formControlName=\"userName\" id=\"userName\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzRequired nzFor=\"password\">Password</nz-form-label>\n      <nz-form-control nzErrorTip=\"The input is not valid Passowrd\">\n        <input nz-input required formControlName=\"password\" id=\"password\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"phoneNumber\" nzRequired>Phone Number</nz-form-label>\n      <nz-form-control>\n        <nz-input-group [nzAddOnBefore]=\"addOnBeforeTemplate\">\n          <ng-template #addOnBeforeTemplate>\n            <nz-select formControlName=\"phoneNumberPrefix\" class=\"phone-select\">\n              <nz-option\n                *ngFor=\"let code of countryCodes\"\n                [nzLabel]=\"code.name + ' (' + code.dial_code + ')'\"\n                [nzValue]=\"code.dial_code\"\n              ></nz-option>\n            </nz-select>\n          </ng-template>\n          <input formControlName=\"phoneNumber\" id=\"phoneNumber\" nz-input />\n        </nz-input-group>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-label nzFor=\"email\">E-mail</nz-form-label>\n      <nz-form-control nzErrorTip=\"The input is not valid E-mail\">\n        <input nz-input formControlName=\"email\" id=\"email\" />\n      </nz-form-control>\n    </nz-form-item>\n    <ng-template #tmplActions>\n      <button\n        nz-button\n        nzType=\"default\"\n        [disabled]=\"form.invalid\"\n        (click)=\"submitForm()\"\n      >\n        Register\n      </button>\n    </ng-template>\n  </form>\n</nz-card>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  NewOperatorGQL,\n  NewOperatorQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class OperatorNewResolver\n  implements Resolve<ApolloQueryResult<NewOperatorQuery>>\n{\n  constructor(private gql: NewOperatorGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<NewOperatorQuery>> {\n    return this.gql.fetch({});\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport { UsersListQuery } from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { map, Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-users-list\",\n  templateUrl: \"./users-list.component.html\",\n})\nexport class UsersListComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<UsersListQuery>>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    public tagColor: TagColorService,\n    public tableService: TableService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.operators));\n  }\n}\n","<nz-page-header\n  [nzGhost]=\"false\"\n  nzBackIcon\n  nzTitle=\"Operators\"\n  nzSubtitle=\"Users of Admin panel (Operators and admins)\"\n>\n  <nz-page-header-extra>\n    <button nz-button nzType=\"default\" routerLink=\"new\">\n      <i nz-icon nzType=\"plus\"></i>{{ \"profile.add\" | translate }}\n    </button>\n  </nz-page-header-extra>\n  <nz-page-header-content>\n    <nz-table\n      #table\n      nzShowSizeChanger\n      [nzFrontPagination]=\"false\"\n      *ngIf=\"(query | async)?.data?.operators as operators\"\n      [nzData]=\"operators.nodes\"\n      [nzTotal]=\"operators.totalCount\"\n      (nzQueryParams)=\"tableService.onTableQueryParamsChange($event)\"\n      nzBordered\n    >\n      <thead>\n        <tr>\n          <th>{{ \"profile.name\" | translate }}</th>\n          <th>{{ \"profile.userName\" | translate }}</th>\n          <th>{{ \"profile.actions\" | translate }}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let data of table.data\">\n          <td>{{ data.firstName }} {{ data.lastName }}</td>\n          <td>{{ data.userName }}</td>\n          <td>\n            <a [routerLink]=\"'view/' + data.id\">{{\n              \"table.details\" | translate\n            }}</a>\n          </td>\n        </tr>\n      </tbody>\n    </nz-table>\n  </nz-page-header-content>\n</nz-page-header>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  OperatorFilter,\n  OperatorSortFields,\n  UsersListGQL,\n  UsersListQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class UsersListResolver\n  implements Resolve<ApolloQueryResult<UsersListQuery>>\n{\n  constructor(private paging: TableService, private gql: UsersListGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<UsersListQuery>> {\n    const params = this.paging.deserializeQueryParams<\n      OperatorSortFields,\n      OperatorFilter\n    >(route.queryParams);\n    return this.gql.fetch(params);\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}