{"version":3,"file":"src_app_cms_riders_rider-view_rider-view_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AACiD;AAGgC;AAE5C;;;;;;;;;ICWjC,qEAAoC;IAC9B,uDAAgB;IAAA,4DAAK;IACzB,wEAAiC;IAAA,uDAAkB;IAAA,4DAAK;IACxD,qEAAI;IAAG,2WAAS,gCAAsB,IAAC;IAAC,8EAAmB;IAAA,4DAAI;;;IAF3D,0DAAgB;IAAhB,8EAAgB;IACa,0DAAkB;IAAlB,gFAAkB;;;;IAnBzD,iFAEqE;IAAnE,gXAAuD;IACvD,wEAAO;IAGD,uDACF;;IAAA,4DAAK;IACL,wEAAiC;IAC/B,uDACF;;IAAA,4DAAK;IACL,sEAAI;IACF,wDACF;;IAAA,4DAAK;IAGT,yEAAO;IACL,kIAIK;IACP,4DAAQ;;;;IAtByB,oFAA2B;IAMtD,0DACF;IADE,4JACF;IAEE,0DACF;IADE,8JACF;IAEE,0DACF;IADE,iKACF;IAImB,0DAAa;IAAb,6EAAa;;ADL/B,MAAM,2BAA2B;IAGtC,YACU,KAAqB,EACtB,YAA0B;QADzB,UAAK,GAAL,KAAK,CAAgB;QACtB,iBAAY,GAAZ,YAAY,CAAc;IAChC,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,OAAO,CAAC,QAAsC;QAC5C,IAAI,GAAG,GAAG,6BAA6B,GAAG,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;QAC5E,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;;sGAfU,2BAA2B;yHAA3B,2BAA2B;QCZxC,mIAuBW;;;;QAtBR,mOAA4C;;;;;;;;;;;;;;;;;;;ACItB;AAKoB;AACoC;;;;AAI1E,MAAM,2BAA2B;IAGtC,YACU,GAAsB,EACtB,YAA0B;QAD1B,QAAG,GAAH,GAAG,CAAmB;QACtB,iBAAY,GAAZ,YAAY,CAAc;IACjC,CAAC;IAEJ,OAAO,CACL,KAA6B,EAC7B,KAA0B;;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC3E,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;YACpB,OAAO,EAAE,WAAK,CAAC,MAAM,0CAAE,MAAM,CAAC,EAAE;YAChC,MAAM,EAAE,MAAM,CAAC,MAAM;SACtB,CAAC,CAAC;IACL,CAAC;;sGAjBU,2BAA2B;4HAA3B,2BAA2B,WAA3B,2BAA2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdiB;AACR;AAOJ;AACmD;AACf;AACiB;AACzC;AACP;AACb;;;;;;;;;;;;;;;;;;;;;;;;;IC2B7B,6EAIG;IAAA,uDAAyD;;IAAA,4DAC3D;;;;IAHC,qIAAiE;IAEhE,0DAAyD;IAAzD,4KAAyD;;;IAc5D,wEAGG;IAAA,uDAAsC;;IAAA,4DACxC;;;IAFC,sHAA0D;IACzD,0DAAsC;IAAtC,sJAAsC;;;IAEzC,wEAKG;IAAA,uDAAqC;;IAAA,4DACvC;;;IAJC,uIAEC;IACA,0DAAqC;IAArC,qJAAqC;;;IAExC,wEAGG;IAAA,uDAAqC;;IAAA,4DACvC;;;IAFC,6GAAiD;IAChD,0DAAqC;IAArC,qJAAqC;;;IA3C5C,qEAAoC;;IAEhC,uDACF;;IAAA,4DAAK;IACL,qEAAI;IACF,uDAKA;;;IAAA,gJAKC;IACH,4DAAK;IACL,0EAIC;IACC,wDAEF;;IAAA,4DAAK;IACL,0EAAiC;IAAA,wDAAyB;IAAA,4DAAK;IAC/D,0EAAiC;IAAA,wDAAsB;IAAA,4DAAK;IAC5D,sEAAI;IACF,wIAIC;IACD,wIAMC;IACD,wIAIC;IACH,4DAAK;;;IA5CD,0DAA6C;IAA7C,oKAA6C;IAC/C,0DACF;IADE,+JACF;IAEE,0DAKA;IALA,2UAKA;IACG,0DAA2B;IAA3B,0FAA2B;IAO9B,0DAEC;IAFD,sIAEC;IAED,0DAEF;IAFE,6NAEF;IACiC,0DAAyB;IAAzB,uFAAyB;IACzB,0DAAsB;IAAtB,oFAAsB;IAGlD,0DAA8B;IAA9B,6FAA8B;IAK9B,0DAAoC;IAApC,mGAAoC;IAOpC,0DAA6B;IAA7B,4FAA6B;;;;IAzExC,mFAUC;IAFC,yUAAiB,qDAA6C,IAAC;IAG/D,wEAAO;IAGD,uDACF;;IAAA,4DAAK;IACL,qEAAI;IACF,uDACF;;IAAA,4DAAK;IACL,sEAAI;IACF,wDACF;;IAAA,4DAAK;IACL,0EAAiC;IAC/B,wDACF;;IAAA,4DAAK;IACL,0EAAiC;IAC/B,wDACF;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAAmC;;IAAA,4DAAK;IAGhD,yEAAO;IACL,sIA8CK;IACP,4DAAQ;;;;IA3ER,oFAA2B;IASnB,0DAAiB;IAAjB,0EAAiB;IACnB,0DACF;IADE,gKACF;IAEE,0DACF;IADE,uKACF;IAEE,0DACF;IADE,+JACF;IAEE,0DACF;IADE,uKACF;IAEE,0DACF;IADE,gKACF;IACI,0DAAmC;IAAnC,qJAAmC;IAIpB,0DAAa;IAAb,6EAAa;;;IAgElC,qEAA0C;IACpC,uDAA4C;;IAAA,4DAAK;;;IAAjD,0DAA4C;IAA5C,qKAA4C;;;IAhBtD,mFAQC;IAGS,iEAAM;IAAA,4DAAK;IAGnB,wEAAO;IACL,kIAEK;IACP,4DAAQ;;;;IAbR,oFAAuB;IAUA,0DAAmB;IAAnB,8EAAmB;;;IAqBtC,iEAAyD;;;IAKnD,2EAIa;;;;IAFX,wKAAsD;;;IAN9D,+EAAkE;IACjD,wEAAa;IAAA,4DAAgB;IAC5C,kFAAiB;IAEb,qJAIa;IACf,4DAAY;;;IAJS,0DAAgB;IAAhB,yFAAgB;;;IAWnC,2EAIa;;;;IAFX,wKAAsD;;;IAN9D,+EAAgE;IAC/C,sEAAW;IAAA,4DAAgB;IAC1C,kFAAiB;IAEb,qJAIa;IACf,4DAAY;;;IAJS,0DAAc;IAAd,uFAAc;;;IAsBjC,2EAQa;;;IAFX,0FAA6B;;AD9IpC,MAAM,4BAA4B;IAcvC,YACU,KAAqB,EACtB,YAA0B,EAC1B,QAAyB,EACxB,EAAe,EACf,oBAA+C,EAC/C,YAAiC,EACjC,GAAqB;QANrB,UAAK,GAAL,KAAK,CAAgB;QACtB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,aAAQ,GAAR,QAAQ,CAAiB;QACxB,OAAE,GAAF,EAAE,CAAa;QACf,yBAAoB,GAApB,oBAAoB,CAA2B;QAC/C,iBAAY,GAAZ,YAAY,CAAqB;QACjC,QAAG,GAAH,GAAG,CAAkB;QApB/B,oBAAe,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC9B,MAAM,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACnC,YAAY,EAAE,CAAC,IAAI,CAAC;YACpB,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,MAAM,EAAE,CAAC,CAAC,EAAE,+DAAmB,CAAC;YAChC,QAAQ,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACrC,WAAW,EAAE,CAAC,IAAI,CAAC;YACnB,cAAc,EAAE,CAAC,IAAI,CAAC;SACvB,CAAC,CAAC;QAEH,gBAAW,GAAG,MAAM,CAAC,IAAI,CAAC,2FAA0B,CAAC,CAAC;QACtD,kBAAa,GAAG,MAAM,CAAC,IAAI,CAAC,6FAA4B,CAAC,CAAC;IAUvD,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACpE,CAAC;IAEK,mBAAmB;;;YACvB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,GAAG,UAAI,CAAC,KAAK,CAAC,MAAM,0CAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3E,IACE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,IAAI,UAAU;gBAC/C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,EAC/C;gBACA,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;gBACtD,OAAO;aACR;YACD,IACE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,IAAI,QAAQ;gBAC7C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,IAAI,IAAI,EAC7C;gBACA,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;gBACtD,OAAO;aACR;YACD,IAAI;gBACF,MAAM,oDAAc,CAClB,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CACxE,CAAC;gBACF,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBAC3C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;aACrC;YAAC,OAAO,KAAU,EAAE;gBACnB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC/B;;KACF;IAED,oBAAoB,CAAC,UAA8C;QACjE,IAAI,UAAU,IAAI,SAAS;YAAE,OAAO,EAAE,CAAC;QACvC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IAClC,CAAC;;wGA3DU,4BAA4B;0HAA5B,4BAA4B;QCrBzC,oIAgFW;;QACX,kIAmBW;;QACX,6EAAiE;;QAC/D,0EAIC;QADC,wJAAY,yBAAqB,IAAC;QAElC,yEAA6C;QAEf,gEAAI;QAAA,4DAAgB;QAC9C,mFAAiB;QAEb,2EAAyD;QAE3D,4DAAY;QAGhB,0HAAyD;QACzD,4IAWe;QACf,4IAWe;QACf,gFAAc;QAC6B,kEAAM;QAAA,4DAAgB;QAC/D,mFAAiB;QACf,kFAKmB;QACrB,4DAAkB;QAEpB,gFAAc;QACc,oEAAQ;QAAA,4DAAgB;QAClD,mFAAiB;QAEb,uIAQa;;QACf,4DAAY;QAGhB,gFAAc;QAC0B,2EAAe;QAAA,4DAAgB;QACrE,mFAAiB;QACf,wEAIE;QACJ,4DAAkB;QAEpB,gFAAc;QACuB,uEAAW;QAAA,4DAAgB;QAC9D,mFAAiB;QACf,wEAAiE;QACnE,4DAAkB;QAGtB,8EAMC;QACC,wDACF;;QAAA,4DAAS;;;;;QA7LV,4QAAiD;QA8EjD,0DAAmD;QAAnD,yTAAmD;QAkB7C,0DAAuD;QAAvD,6KAAuD;QAG5D,0DAA6B;QAA7B,0FAA6B;QAarB,0DAA2C;QAA3C,2GAA2C;QAClC,0DAAiD;QAAjD,iHAAiD;QAYjD,0DAA+C;QAA/C,+GAA+C;QA6BtB,2DAI9C;QAJ8C,uSAI9C;QA4BM,2DAAmC;QAAnC,gGAAmC;QAEnC,0DACF;QADE,+JACF;;;;;;;;;;;;;;;;;;;AC7LqB;AAQoB;AACoC;;;;AAI1E,MAAM,2BAA2B;IAGtC,YACU,GAAmB,EACnB,YAA0B;QAD1B,QAAG,GAAH,GAAG,CAAgB;QACnB,iBAAY,GAAZ,YAAY,CAAc;IACjC,CAAC;IAEJ,OAAO,CACL,KAA6B,EAC7B,KAA0B;;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAGrD,KAAK,CAAC,WAAW,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAG,OAAO,EAAE,WAAK,CAAC,MAAM,0CAAE,MAAM,CAAC,EAAE,IAAK,MAAM,EAAG,CAAC;IACzE,CAAC;;sGAjBU,2BAA2B;4HAA3B,2BAA2B,WAA3B,2BAA2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBiB;AACA;AACY;AAC2B;;;;;;;;;;;;;AAOzF,MAAM,sBAAsB;IAWjC,YACU,KAAqB,EACrB,MAAc,EACd,EAAe,EACf,cAA8B,EAC9B,YAAiC;QAJjC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,OAAE,GAAF,EAAE,CAAa;QACf,mBAAc,GAAd,cAAc,CAAgB;QAC9B,iBAAY,GAAZ,YAAY,CAAqB;QAf3C,SAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACnB,EAAE,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YAC/B,SAAS,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACtC,QAAQ,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACrC,YAAY,EAAE,CAAC,IAAI,EAAE,+DAAmB,CAAC;YACzC,MAAM,EAAE,CAAC,IAAI,CAAC;YACd,KAAK,EAAE,CAAC,IAAI,CAAC;SACd,CAAC,CAAC;IASA,CAAC;IAEJ,WAAW;;QACT,UAAI,CAAC,WAAW,0CAAE,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,QAAQ;;QACN,IAAI,CAAC,WAAW,GAAG,UAAI,CAAC,KAAK,CAAC,MAAM,0CAAE,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAC5D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAC5C,CAAC;IACJ,CAAC;IAEK,QAAQ;;;YACZ,MAAM,EAAE,GAAG,UAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,0CAAE,MAAM,CAAC,EAAE,CAAC;YACjD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YAC5D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;KACvC;;4FAjCU,sBAAsB;oHAAtB,sBAAsB;QCXnC,0EAMC;QAFC,kJAAY,cAAU,IAAC;QAGvB,sEAAmD;QACnD,+EAAc;QACgC,qEAAU;QAAA,4DAAgB;QACtE,qFAAgE;QAC9D,sEAA6D;QAC/D,4DAAkB;QAEpB,+EAAc;QAC+B,oEAAS;QAAA,4DAAgB;QACpE,sFAA+D;QAC7D,uEAA2D;QAC7D,4DAAkB;QAEpB,gFAAc;QACmC,yEAAa;QAAA,4DAAgB;QAC5E,sFAAmE;QACjE,wEAAmE;QACrE,4DAAkB;QAEpB,gFAAc;QACkB,kEAAM;QAAA,4DAAgB;QACpD,mFAAiB;QAEb,4EAAqD;QAEvD,4DAAY;QAGhB,gFAAc;QAC4B,kEAAM;QAAA,4DAAgB;QAC9D,mFAAiB;QACf,wEAAqD;QACvD,4DAAkB;QAGtB,8EAMC;QADC,+IAAS,cAAU,IAAC;QAEpB,mEACF;QAAA,4DAAS;;QAhDP,gFAAuB;QA4CvB,2DAAyB;QAAzB,sFAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CsB;AAKJ;AAEoC;AACiB;AAE7D;;;;;;;;;;;;ICUjC,qEAAoC;;IACe,uDAA8B;;IAAA,4DAAK;IACpF,wEAAiC;IAAA,uDAAuB;IAAA,4DAAK;IAC7D,qEAAI;IAAA,uDAAoD;;IAAA,4DAAK;IAC7D,sEAAI;IACoD,wDAAgD;;IAAA,4DAAS;IAEjH,sEAAI;IAC4C,wDAAgC;;IAAA,4DAAI;;;;IAPhF,0DAA4C;IAA5C,mKAA4C;IAAC,0DAA8B;IAA9B,oJAA8B;IAC9C,0DAAuB;IAAvB,qFAAuB;IACpD,0DAAoD;IAApD,4KAAoD;IAE9C,0DAA6C;IAA7C,gHAA6C;IAAC,0DAAgD;IAAhD,oKAAgD;IAGnG,0DAA0C;IAA1C,sGAA0C;IAAC,0DAAgC;IAAhC,kJAAgC;;;;IA5BtF,iFAC2E;IAA3E,mUAAiB,oDAA6C,IAAC;IAC7D,wEAAO;IAGD,uDACF;;IAAA,4DAAK;IACL,wEAAiC;IAC/B,uDACF;;IAAA,4DAAK;IACL,sEAAI;IACF,wDACF;;IAAA,4DAAK;IACL,sEAAI;IACF,wDACF;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAAmC;;IAAA,4DAAK;IAGhD,yEAAO;IACL,iIAUK;IACP,4DAAQ;;;;IA/BsC,oFAA2B;IAIjE,0DAAiB;IAAjB,0EAAiB;IACnB,0DACF;IADE,gKACF;IAEE,0DACF;IADE,iKACF;IAEE,0DACF;IADE,6JACF;IAEE,0DACF;IADE,+JACF;IACI,0DAAmC;IAAnC,qJAAmC;IAIpB,0DAAa;IAAb,6EAAa;;ADJ/B,MAAM,wBAAwB;IAInC,YACU,KAAqB,EACtB,QAAyB,EACzB,YAA0B;QAFzB,UAAK,GAAL,KAAK,CAAgB;QACtB,aAAQ,GAAR,QAAQ,CAAiB;QACzB,iBAAY,GAAZ,YAAY,CAAc;QALnC,aAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,4EAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAM3E,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAChE,CAAC;;gGAZU,wBAAwB;sHAAxB,wBAAwB;QChBrC,gIAgCW;;;;QAhCkE,qQAA2C;;;;;;;;;;;;;;;;;;;ACI/F;AAOoB;AACoC;;;;AAI1E,MAAM,uBAAuB;IAGlC,YACU,GAAmB,EACnB,YAA0B;QAD1B,QAAG,GAAH,GAAG,CAAgB;QACnB,iBAAY,GAAZ,YAAY,CAAc;IACjC,CAAC;IAEJ,OAAO,CACL,KAA6B,EAC7B,KAA0B;;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAGrD,KAAK,CAAC,WAAW,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAG,OAAO,EAAE,WAAK,CAAC,MAAM,0CAAE,MAAM,CAAC,EAAE,IAAK,MAAM,EAAG,CAAC;IACzE,CAAC;;8FAjBU,uBAAuB;wHAAvB,uBAAuB,WAAvB,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;AChBmB;AAE6C;AACD;AACI;AACF;AAChB;AACM;AACF;AAC7B;AACF;;;AAE1D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,qEAAkB,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,mEAAiB,EAAE,EAAC,qBAAqB,EAAE,cAAc,EAAE,QAAQ,EAAE;YAChI,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE;YACnC,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,8FAAsB,EAAE;YACtD,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,gHAA4B,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,8GAA2B,EAAE,EAAE,qBAAqB,EAAE,2BAA2B,EAAE;YACzK,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,oGAAwB,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,kGAAuB,EAAE,EAAE,qBAAqB,EAAE,2BAA2B,EAAE;YACzJ,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,6GAA2B,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,4GAA2B,EAAE,EAAE;SACnH,EAAC;CACH,CAAC;AAYK,MAAM,sBAAsB;;4FAAtB,sBAAsB;mHAAtB,sBAAsB;wHAPtB;QACT,mEAAiB;QACjB,8GAA2B;QAC3B,kGAAuB;QACvB,4GAA2B;KAC5B,YAPQ,CAAC,mEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,0DAAY;mIAQX,sBAAsB,qFARvB,0DAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxB0E;AACzC;AACoB;AAMhC;AACR;;;;;;;;;;;;;;;;;;;;;;ICM7B,yEAAsF;IAAlC,wSAAS,oBAAa,SAAS,CAAC,IAAC;IAAC,uDAA6C;;IAAA,4DAAK;;IAAlD,0DAA6C;IAA7C,6JAA6C;;;;IACnI,yEAAuF;IAAlC,ySAAS,qBAAa,SAAS,CAAC,IAAC;IAAC,uDAA6C;;IAAA,4DAAK;;IAAlD,0DAA6C;IAA7C,6JAA6C;;;IAgBpI,wEAA+C;IAAA,uDAAsC;;IAAA,4DAAI;;IAA1C,0DAAsC;IAAtC,sJAAsC;;;IAGrF,wEAAkD;IAAA,uDAA4C;;IAAA,4DAAI;;IAAhD,0DAA4C;IAA5C,4JAA4C;;;IAG9F,wEAA8C;IAAA,uDAAqC;;IAAA,4DAAI;;IAAzC,0DAAqC;IAArC,qJAAqC;;;IAGnF,wEAAiD;IAAA,uDAAwC;;IAAA,4DAAI;;IAA5C,0DAAwC;IAAxC,wJAAwC;;;IA1CjG,0EAAuD;IAGlD,0EAAuF;IAAA,uDACpE;IAAA,4DACrB;IACD,iFAEsB;IACtB,uFAAsB;IAElB,uDACA;;IAAA,mEAA6B;IAC/B,4DAAS;IACT,6FAA0C;IAEtC,wHAAwI;IACxI,wHAAyI;IAC3I,4DAAK;IAGT,0FAAwB;;IAEsE,wDAA8B;;IAAA,4DAAuB;IAC3I,2FAAyE;;IAAA,wDAA+C;;IAAA,4DAAuB;IAC/I,2FAAiE;;IAC/D,0EAA2G;IAC7G,4DAAuB;IAG/B,yFAAuB;IAGjB,uHAAyF;IAC3F,4DAAS;IACT,0EAAQ;IACN,uHAAkG;IACpG,4DAAS;IACT,0EAAQ;IACN,uHAAuF;IACzF,4DAAS;IACT,0EAAQ;IACN,uHAA6F;IAC/F,4DAAS;IAEX,4EAA+B;IACjC,4DAAwB;;;;;IA3CI,0DAAiD;IAAjD,qJAAiD;IAAa,0DACpE;IADoE,oHACpE;IAMU,0DAAwB;IAAxB,+EAAwB;IACpD,0DACA;IADA,2KACA;IAIoB,0DAAgC;IAAhC,+FAAgC;IAChC,0DAAiC;IAAjC,gGAAiC;IAM3B,0DAAkD;IAAlD,yKAAkD;IAAC,qEAAY;IAAC,0DAA8B;IAA9B,yJAA8B;IAC9F,0DAAkD;IAAlD,yKAAkD;IAAC,0DAA+C;IAA/C,2KAA+C;IAClG,0DAA0C;IAA1C,mKAA0C;IACpD,0DAA6D;IAA7D,yHAA6D;IAKvD,0DAAqB;IAArB,8EAAqB;;ADd1C,MAAM,kBAAkB;IAI7B,YACU,KAAqB,EACtB,QAAyB,EACxB,cAA8B,EAC9B,MAAc;QAHd,UAAK,GAAL,KAAK,CAAgB;QACtB,aAAQ,GAAR,QAAQ,CAAiB;QACxB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QAEtB,IAAI,CAAC,WAAW,GAAG,uFAAW,CAAC;IACjC,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEK,YAAY,CAAC,MAAc;;YAC/B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBACzB,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACjC,MAAM,EAAE,EAAE,MAAM,EAAE,MAAqB,EAAE;aAC1C,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE;gBACvB,UAAU,EAAE,IAAI,CAAC,KAAK;gBACtB,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE;gBAC9C,mBAAmB,EAAE,OAAO;aAC7B,CAAC,CAAC;QACL,CAAC;KAAA;;oFA1BU,kBAAkB;gHAAlB,kBAAkB;QCjB/B,wHAgDU;;;;QAhDA,0NAAmC;;;;;;;;;;;;;;;;;;;;;;;;ACCsC;AACiB;AAEG;AAClB;AACM;AACtB;AACT;;AAYrD,MAAM,eAAe;;8EAAf,eAAe;4GAAf,eAAe;gHAFjB,CAAC,8EAAsB,EAAE,4FAAY,CAAC;mIAEpC,eAAe,mBARxB,qEAAkB;QAClB,8FAAsB;QACtB,gHAA4B;QAC5B,oGAAwB;QACxB,6GAA2B,aAEnB,8EAAsB,EAAE,4FAAY;;;;;;;;;;;;;;;;;ACbvB;AAKoB;;;AAItC,MAAM,iBAAiB;IAG5B,YAAoB,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;IAAG,CAAC;IAEzC,OAAO,CACL,KAA6B,EAC7B,KAA0B;QAE1B,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;IACjD,CAAC;;kFAVU,iBAAiB;kHAAjB,iBAAiB,WAAjB,iBAAiB","sources":["./src/app/cms/riders/rider-view/rider-view-addresses/rider-view-addresses.component.ts","./src/app/cms/riders/rider-view/rider-view-addresses/rider-view-addresses.component.html","./src/app/cms/riders/rider-view/rider-view-addresses/rider-view-addresses.resolver.ts","./src/app/cms/riders/rider-view/rider-view-financials/rider-view-financials.component.ts","./src/app/cms/riders/rider-view/rider-view-financials/rider-view-financials.component.html","./src/app/cms/riders/rider-view/rider-view-financials/rider-view-financials.resolver.ts","./src/app/cms/riders/rider-view/rider-view-info/rider-view-info.component.ts","./src/app/cms/riders/rider-view/rider-view-info/rider-view-info.component.html","./src/app/cms/riders/rider-view/rider-view-orders/rider-view-orders.component.ts","./src/app/cms/riders/rider-view/rider-view-orders/rider-view-orders.component.html","./src/app/cms/riders/rider-view/rider-view-orders/rider-view-orders.resolver.ts","./src/app/cms/riders/rider-view/rider-view-routing.module.ts","./src/app/cms/riders/rider-view/rider-view.component.ts","./src/app/cms/riders/rider-view/rider-view.component.html","./src/app/cms/riders/rider-view/rider-view.module.ts","./src/app/cms/riders/rider-view/rider-view.resolver.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport { RiderAddressesQuery } from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-rider-view-addresses\",\n  templateUrl: \"./rider-view-addresses.component.html\",\n})\nexport class RiderViewAddressesComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<RiderAddressesQuery>>;\n\n  constructor(\n    private route: ActivatedRoute,\n    public tableService: TableService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.addresses));\n  }\n\n  openMap(location: { lat: number; lng: number }) {\n    var url = \"https://maps.google.com/?q=\" + location.lat + \",\" + location.lng;\n    window.open(url);\n  }\n}\n","<nz-table #table nzShowSizeChanger [nzFrontPagination]=\"false\"\n  *ngIf=\"(query | async)?.data?.riderAddresses as addresses\" [nzData]=\"addresses.nodes\"\n  (nzQueryParams)=\"tableService.onTableQueryParamsChange\" nzBordered>\n  <thead>\n    <tr>\n      <th>\n        {{ 'profile.title' | translate }}\n      </th>\n      <th class=\"hidden md:table-cell\">\n        {{ 'profile.address' | translate }}\n      </th>\n      <th>\n        {{ 'profile.location' | translate }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td>{{ data.title }}</td>\n      <td class=\"hidden md:table-cell\">{{ data.details }}</td>\n      <td><a (click)=\"openMap(data.location)\">Open In Google Maps</a></td>\n    </tr>\n  </tbody>\n</nz-table>","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  RiderAddressesGQL,\n  RiderAddressesQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class RiderViewAddresssesResolver\n  implements Resolve<ApolloQueryResult<RiderAddressesQuery>>\n{\n  constructor(\n    private gql: RiderAddressesGQL,\n    private tableService: TableService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<RiderAddressesQuery>> {\n    const paging = this.tableService.deserializeQueryParams(route.queryParams);\n    return this.gql.fetch({\n      riderId: route.parent?.params.id,\n      paging: paging.paging,\n    });\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  CreateRiderTransactionGQL,\n  RiderDeductTransactionType,\n  RiderRechargeTransactionType,\n  RiderWalletQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { RouterHelperService } from \"@ridy/admin-panel/src/app/@services/router-helper.service\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { NzMessageService } from \"ng-zorro-antd/message\";\nimport { firstValueFrom, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-rider-view-financials\",\n  templateUrl: \"./rider-view-financials.component.html\",\n})\nexport class RiderViewFinancialsComponent implements OnInit {\n  formTransaction = this.fb.group({\n    action: [null, Validators.required],\n    rechargeType: [null],\n    deductType: [null],\n    amount: [0, Validators.required],\n    currency: [null, Validators.required],\n    description: [null],\n    refrenceNumber: [null],\n  });\n  query?: Observable<ApolloQueryResult<RiderWalletQuery>>;\n  deductTypes = Object.keys(RiderDeductTransactionType);\n  rechargeTypes = Object.keys(RiderRechargeTransactionType);\n\n  constructor(\n    private route: ActivatedRoute,\n    public tableService: TableService,\n    public tagColor: TagColorService,\n    private fb: FormBuilder,\n    private createTransactionGQL: CreateRiderTransactionGQL,\n    private routerHelper: RouterHelperService,\n    private msg: NzMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.financials));\n  }\n\n  async onSubmitTransaction() {\n    this.formTransaction.value.riderId = this.route.parent?.snapshot.params.id;\n    if (\n      this.formTransaction.value.action == \"Recharge\" &&\n      this.formTransaction.value.rechargeType == null\n    ) {\n      this.msg.error(\"Please select the transaction type.\");\n      return;\n    }\n    if (\n      this.formTransaction.value.action == \"Deduct\" &&\n      this.formTransaction.value.deductType == null\n    ) {\n      this.msg.error(\"Please select the transaction type.\");\n      return;\n    }\n    try {\n      await firstValueFrom(\n        this.createTransactionGQL.mutate({ input: this.formTransaction.value })\n      );\n      this.msg.success(\"Transaction Submitted.\");\n      this.routerHelper.refresh(this.route);\n      this.formTransaction.patchValue({});\n    } catch (error: any) {\n      this.msg.error(error.message);\n    }\n  }\n\n  getUniquieCurrencies(currencies: { currency: string }[] | undefined) {\n    if (currencies == undefined) return [];\n    return [...new Set(currencies)];\n  }\n}\n","<nz-table\n  #table\n  nzTitle=\"Transactions Records\"\n  nzShowSizeChanger\n  [nzFrontPagination]=\"false\"\n  *ngIf=\"(query | async)?.data?.rider?.transactions as transactions\"\n  [nzData]=\"transactions.nodes\"\n  [nzTotal]=\"transactions.totalCount\"\n  (nzQueryParams)=\"tableService.onTableQueryParamsChange($event)\"\n  nzBordered\n>\n  <thead>\n    <tr>\n      <th [nzSortFn]=\"true\" nzColumnKey=\"createdAt\">\n        {{ \"profile.dateTime\" | translate }}\n      </th>\n      <th>\n        {{ \"profile.transactionType\" | translate }}\n      </th>\n      <th>\n        {{ \"profile.amount\" | translate }}\n      </th>\n      <th class=\"hidden lg:table-cell\">\n        {{ \"profile.documentNumber\" | translate }}\n      </th>\n      <th class=\"hidden xl:table-cell\">\n        {{ \"profile.details\" | translate }}\n      </th>\n      <th>{{ \"profile.actions\" | translate }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td [nz-tooltip]=\"data.createdAt | date: 'short'\">\n        {{ data.createdAt | timeago }}\n      </td>\n      <td>\n        {{\n          data.action === \"Deduct\"\n            ? (\"enum.transactionType.\" + data.deductType | translate)\n            : (\"enum.transactionType.\" + data.rechargeType | translate)\n        }}\n        <nz-tag\n          *ngIf=\"data.status != 'Done'\"\n          [nzColor]=\"tagColor.getTransactionStatusStatusColor(data.status)\"\n          class=\"ml-1\"\n          >{{ \"enum.transactionStatus.\" + data.status | translate }}</nz-tag\n        >\n      </td>\n      <td\n        [ngClass]=\"\n          data.action === 'Recharge' ? 'text-green-500' : 'text-red-500'\n        \"\n      >\n        {{ data.action === \"Recharge\" ? \"+\" : \"\"\n        }}{{ data.amount | currency: data.currency }}\n      </td>\n      <td class=\"hidden lg:table-cell\">{{ data.refrenceNumber }}</td>\n      <td class=\"hidden xl:table-cell\">{{ data.description }}</td>\n      <td>\n        <a\n          *ngIf=\"data.operatorId !== null\"\n          [routerLink]=\"'/management/users/view/' + data.operatorId\"\n          >{{ \"table.viewOperator\" | translate }}</a\n        >\n        <a\n          *ngIf=\"data.paymentGatewayId !== null\"\n          [routerLink]=\"\n            '/management/payment-gateways/view/' + data.paymentGatewayId\n          \"\n          >{{ \"table.viewGateway\" | translate }}</a\n        >\n        <a\n          *ngIf=\"data.requestId !== null\"\n          [routerLink]=\"'/requests/view/' + data.requestId\"\n          >{{ \"table.viewRequest\" | translate }}</a\n        >\n      </td>\n    </tr>\n  </tbody>\n</nz-table>\n<nz-table\n  #walletTable\n  *ngIf=\"(query | async)?.data?.rider?.wallets?.nodes as riderWallets\"\n  nzTitle=\"Wallet Summary\"\n  [nzFrontPagination]\n  [nzData]=\"riderWallets\"\n  [nzTotal]=\"riderWallets.length\"\n  nzBordered\n>\n  <thead>\n    <tr>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of walletTable.data\">\n      <td>{{ item.balance | currency: item.currency }}</td>\n    </tr>\n  </tbody>\n</nz-table>\n<nz-card nzTitle=\"{{ 'profile.insertTransaction' | translate }}\">\n  <form\n    nz-form\n    [formGroup]=\"formTransaction\"\n    (ngSubmit)=\"onSubmitTransaction()\"\n  >\n    <div class=\"lg:grid lg:grid-cols-2 lg:gap-2\">\n      <nz-form-item>\n        <nz-form-label nzRequired>Type</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"action\" nzRequired>\n            <nz-option nzLabel=\"Deduct\" nzValue=\"Deduct\"></nz-option>\n            <nz-option nzLabel=\"Recharge\" nzValue=\"Recharge\"></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <div *ngIf=\"formTransaction.value.action === null\"></div>\n      <nz-form-item *ngIf=\"formTransaction.value.action === 'Recharge'\">\n        <nz-form-label>Recharge Type</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"rechargeType\">\n            <nz-option\n              *ngFor=\"let type of rechargeTypes\"\n              [nzLabel]=\"'enum.transactionType.' + type | translate\"\n              [nzValue]=\"type\"\n            ></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item *ngIf=\"formTransaction.value.action === 'Deduct'\">\n        <nz-form-label>Deduct Type</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"deductType\">\n            <nz-option\n              *ngFor=\"let type of deductTypes\"\n              [nzLabel]=\"'enum.transactionType.' + type | translate\"\n              [nzValue]=\"type\"\n            ></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzRequired nzFor=\"amount\">Amount</nz-form-label>\n        <nz-form-control>\n          <nz-input-number\n            formControlName=\"amount\"\n            id=\"amount\"\n            required\n            class=\"w-full\"\n          ></nz-input-number>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzRequired>Currency</nz-form-label>\n        <nz-form-control>\n          <nz-select formControlName=\"currency\" id=\"currency\" required>\n            <nz-option\n              *ngFor=\"\n                let currency of getUniquieCurrencies(\n                  (query | async)?.data?.regions?.nodes\n                )\n              \"\n              [nzLabel]=\"currency.currency\"\n              [nzValue]=\"currency.currency\"\n            ></nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzFor=\"refrenceNumber\">Document Number</nz-form-label>\n        <nz-form-control>\n          <input\n            nz-input\n            formControlName=\"refrenceNumber\"\n            id=\"refrenceNumber\"\n          />\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label nzFor=\"description\">Description</nz-form-label>\n        <nz-form-control>\n          <input nz-input formControlName=\"description\" id=\"description\" />\n        </nz-form-control>\n      </nz-form-item>\n    </div>\n    <button\n      class=\"float-right mt-2\"\n      nz-button\n      nzType=\"default\"\n      type=\"submit\"\n      [disabled]=\"!formTransaction.valid\"\n    >\n      {{ \"profile.submit\" | translate }}\n    </button>\n  </form>\n</nz-card>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  RiderTransactionFilter,\n  RiderTransactionSort,\n  RiderTransactionSortFields,\n  RiderWalletGQL,\n  RiderWalletQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class RiderViewFinancialsResolver\n  implements Resolve<ApolloQueryResult<RiderWalletQuery>>\n{\n  constructor(\n    private gql: RiderWalletGQL,\n    private tableService: TableService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<RiderWalletQuery>> {\n    const paging = this.tableService.deserializeQueryParams<\n      RiderTransactionSortFields,\n      RiderTransactionFilter\n    >(route.queryParams);\n    return this.gql.fetch({ riderId: route.parent?.params.id, ...paging });\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { UpdateRiderGQL } from \"@ridy/admin-panel/generated/graphql\";\nimport { RouterHelperService } from \"@ridy/admin-panel/src/app/@services/router-helper.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-rider-view-info\",\n  templateUrl: \"./rider-view-info.component.html\",\n})\nexport class RiderViewInfoComponent implements OnInit, OnDestroy {\n  form = this.fb.group({\n    id: [null, Validators.required],\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    mobileNumber: [null, Validators.required],\n    gender: [null],\n    email: [null],\n  });\n  valObserver?: Subscription;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private fb: FormBuilder,\n    private updateRiderGQL: UpdateRiderGQL,\n    private routerHelper: RouterHelperService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.valObserver?.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.valObserver = this.route.parent?.data.subscribe((data) =>\n      this.form.patchValue(data.rider.data.rider)\n    );\n  }\n\n  async onSubmit() {\n    const id = this.route.snapshot.parent?.params.id;\n    this.updateRiderGQL.mutate({ id, update: this.form.value });\n    this.routerHelper.refresh(this.route);\n  }\n}\n","<form\n  nz-form\n  [nzLayout]=\"'vertical'\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"onSubmit()\"\n  class=\"lg:grid lg:grid-cols-3 lg:gap-2\"\n>\n  <input formControlName=\"id\" type=\"hidden\" hidden />\n  <nz-form-item>\n    <nz-form-label nzRequired nzFor=\"firstName\">First Name</nz-form-label>\n    <nz-form-control nzErrorTip=\"The input is not valid First Name\">\n      <input nz-input formControlName=\"firstName\" id=\"firstName\" />\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-label nzRequired nzFor=\"lastName\">Last Name</nz-form-label>\n    <nz-form-control nzErrorTip=\"The input is not valid Last Name\">\n      <input nz-input formControlName=\"lastName\" id=\"lastName\" />\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-label nzFor=\"mobileNumber\" nzRequired>Mobile Number</nz-form-label>\n    <nz-form-control nzErrorTip=\"The input is not valid Mobile Number\">\n      <input nz-input formControlName=\"mobileNumber\" id=\"mobileNumber\" />\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-label nzFor=\"gender\">Gender</nz-form-label>\n    <nz-form-control>\n      <nz-select formControlName=\"gender\">\n        <nz-option nzLabel=\"Male\" nzValue=\"Male\"></nz-option>\n        <nz-option nzLabel=\"Female\" nzValue=\"Female\"></nz-option>\n      </nz-select>\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-label nzFor=\"email\" nzRequired>E-mail</nz-form-label>\n    <nz-form-control>\n      <input nz-input formControlName=\"email\" id=\"email\" />\n    </nz-form-control>\n  </nz-form-item>\n</form>\n<button\n  class=\"float-right\"\n  nz-button\n  nzType=\"default\"\n  [disabled]=\"form.invalid\"\n  (click)=\"onSubmit()\"\n>\n  Save\n</button>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  OrderStatus,\n  RiderOrdersQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { GetRowsDto } from \"@ridy/admin-panel/src/app/@models/get.rows.dto\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-rider-view-orders\",\n  templateUrl: \"./rider-view-orders.component.html\",\n})\nexport class RiderViewOrdersComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<RiderOrdersQuery>>;\n  statuses = Object.keys(OrderStatus).map((key) => ({ text: key, value: key }));\n\n  constructor(\n    private route: ActivatedRoute,\n    public tagColor: TagColorService,\n    public tableService: TableService\n  ) {}\n\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.orders));\n  }\n}\n","\n<nz-table #table nzShowSizeChanger class=\"mt-4\" [nzFrontPagination]=\"false\" *ngIf=\"(query | async)?.data?.rider?.orders as orders\" [nzData]=\"orders.nodes\"  [nzTotal]=\"orders.totalCount\"\n(nzQueryParams)=\"tableService.onTableQueryParamsChange($event)\" nzBordered>\n  <thead>\n    <tr>\n      <th [nzSortFn]=\"true\" nzColumnKey=\"createdOn\">\n        {{ 'profile.dateTime' | translate }}\n      </th>\n      <th class=\"hidden lg:table-cell\">\n        {{ 'profile.locations' | translate }}\n      </th>\n      <th>\n        {{ 'profile.cost' | translate }}\n      </th>\n      <th>\n        {{ 'profile.status' | translate }}\n      </th>\n      <th>{{ 'profile.actions' | translate }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td [nz-tooltip]=\"data.createdOn | date:'short'\">{{ data.createdOn | timeago }}</td>\n      <td class=\"hidden lg:table-cell\">{{ data.addresses[0] }}</td>\n      <td>{{ data.costAfterCoupon | currency: data.currency }}</td>\n      <td>\n        <nz-tag [nzColor]=\"tagColor.orderStatus(data.status)\">{{('enum.request.' + data.status) | translate }}</nz-tag>\n      </td>\n      <td>\n        <a [routerLink]=\"'/requests/view/' + data.id\">{{ 'profile.view' | translate }}</a>\n      </td>\n    </tr>\n  </tbody>\n</nz-table>","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  OrderFilter,\n  OrderSortFields,\n  RiderOrdersGQL,\n  RiderOrdersQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class RiderViewOrdersResolver\n  implements Resolve<ApolloQueryResult<RiderOrdersQuery>>\n{\n  constructor(\n    private gql: RiderOrdersGQL,\n    private tableService: TableService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<RiderOrdersQuery>> {\n    const paging = this.tableService.deserializeQueryParams<\n      OrderSortFields,\n      OrderFilter\n    >(route.queryParams);\n    return this.gql.fetch({ riderId: route.parent?.params.id, ...paging });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { RiderViewAddressesComponent } from './rider-view-addresses/rider-view-addresses.component';\nimport { RiderViewAddresssesResolver } from './rider-view-addresses/rider-view-addresses.resolver';\nimport { RiderViewFinancialsComponent } from './rider-view-financials/rider-view-financials.component';\nimport { RiderViewFinancialsResolver } from './rider-view-financials/rider-view-financials.resolver';\nimport { RiderViewInfoComponent } from './rider-view-info/rider-view-info.component';\nimport { RiderViewOrdersComponent } from './rider-view-orders/rider-view-orders.component';\nimport { RiderViewOrdersResolver } from './rider-view-orders/rider-view-orders.resolver';\nimport { RiderViewComponent } from './rider-view.component';\nimport { RiderViewResolver } from './rider-view.resolver';\n\nconst routes: Routes = [\n  { path: '', component: RiderViewComponent, resolve: { rider: RiderViewResolver },runGuardsAndResolvers: 'paramsChange', children: [\n    { path: '', redirectTo: 'details' },\n    { path: 'details', component: RiderViewInfoComponent },\n    { path: 'financials', component: RiderViewFinancialsComponent, resolve: { financials: RiderViewFinancialsResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n    { path: 'orders', component: RiderViewOrdersComponent, resolve: { orders: RiderViewOrdersResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n    { path: 'addresses', component: RiderViewAddressesComponent, resolve: { addresses: RiderViewAddresssesResolver } }\n  ]}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    RiderViewResolver,\n    RiderViewFinancialsResolver,\n    RiderViewOrdersResolver,\n    RiderViewAddresssesResolver\n  ]\n})\nexport class RiderViewRoutingModule { }\n","import { Component, OnInit } from \"@angular/core\";\nimport { TagColorService } from \"@ridy/admin-panel/src/app/@services/tag-color/tag-color.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { environment } from \"@ridy/admin-panel/src/environments/environment\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  RiderStatus,\n  UpdateRiderGQL,\n  ViewRiderQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-rider-view\",\n  templateUrl: \"./rider-view.component.html\",\n})\nexport class RiderViewComponent implements OnInit {\n  query?: Observable<ApolloQueryResult<ViewRiderQuery>>;\n  environment;\n\n  constructor(\n    private route: ActivatedRoute,\n    public tagColor: TagColorService,\n    private updateRiderGQL: UpdateRiderGQL,\n    private router: Router\n  ) {\n    this.environment = environment;\n  }\n  ngOnInit(): void {\n    this.query = this.route.data.pipe(map((data) => data.rider));\n  }\n\n  async changeStatus(status: string) {\n    this.updateRiderGQL.mutate({\n      id: this.route.snapshot.params.id,\n      update: { status: status as RiderStatus },\n    });\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: { refresh: new Date().getTime() },\n      queryParamsHandling: \"merge\",\n    });\n  }\n}\n","<nz-card *ngIf=\"(query | async)?.data?.rider as rider\">\n<nz-page-header>\n  <nz-page-header-title\n    ><nz-avatar nzIcon=\"user\" [nzSrc]=\"environment.root + rider.media?.address\"></nz-avatar>{{ rider.firstName }}\n    {{ rider.lastName }}</nz-page-header-title\n  >\n  <nz-page-header-tags>\n    <!--nz-tag [nzColor]=\"tagColor.rider(rider.status)\">{{ ('enum.rider.status.' + rider.status) | translate }}</nz-tag-->\n  </nz-page-header-tags>\n  <nz-page-header-extra>\n    <button nz-button nz-dropdown [nzDropdownMenu]=\"menu4\">\n      {{ 'driver.profile.changeStatus' | translate }}\n      <i nz-icon nzType=\"down\"></i>\n    </button>\n    <nz-dropdown-menu #menu4=\"nzDropdownMenu\">\n      <ul nz-menu>\n        <li nz-menu-item *ngIf=\"rider.status === 'Enabled'\" (click)=\"changeStatus('blocked')\">{{ 'enum.rider.status.blocked' | translate }}</li>\n        <li nz-menu-item *ngIf=\"rider.status === 'Disabled'\" (click)=\"changeStatus('enabled')\">{{ 'enum.rider.status.enabled' | translate }}</li>\n      </ul>\n    </nz-dropdown-menu>\n  </nz-page-header-extra>\n  <nz-page-header-content>\n        <nz-descriptions>\n          <nz-descriptions-item nzTitle=\"{{ 'profile.mobileNumber' | translate }}\" [nzSpan]=\"1\">{{rider.mobileNumber | phone}}</nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"{{ 'profile.registeredOn' | translate }}\">{{rider.registrationTimestamp | date: \"short\"}}</nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"{{'profile.status' | translate}}\">\n            <nz-badge [nzStatus]=\"rider.status === 'Enabled' ? 'success' : 'error'\" [nzText]=\"rider.status\"></nz-badge>\n          </nz-descriptions-item>\n        </nz-descriptions>\n  </nz-page-header-content>\n  <nz-page-header-footer>\n    <nz-tabset nzLinkRouter [nzLinkExact]=\"false\" class=\"mb-4\">\n      <nz-tab>\n        <a *nzTabLink nz-tab-link routerLink=\"details\">{{ 'riders.tab.details' | translate }}</a>\n      </nz-tab>\n      <nz-tab>\n        <a *nzTabLink nz-tab-link routerLink=\"financials\">{{ 'riders.tab.creditrecords' | translate }}</a>\n      </nz-tab>\n      <nz-tab>\n        <a *nzTabLink nz-tab-link routerLink=\"orders\">{{ 'riders.tab.orders' | translate }}</a>\n      </nz-tab>\n      <nz-tab>\n        <a *nzTabLink nz-tab-link routerLink=\"addresses\">{{ 'riders.tab.addresses' | translate }}</a>\n      </nz-tab>\n    </nz-tabset>\n    <router-outlet></router-outlet>\n  </nz-page-header-footer>\n</nz-page-header>\n</nz-card>","import { NgModule } from \"@angular/core\";\nimport { SharedModule } from \"@ridy/admin-panel/src/app/@components/shared.module\";\nimport { RiderViewAddressesComponent } from \"./rider-view-addresses/rider-view-addresses.component\";\n\nimport { RiderViewFinancialsComponent } from \"./rider-view-financials/rider-view-financials.component\";\nimport { RiderViewInfoComponent } from \"./rider-view-info/rider-view-info.component\";\nimport { RiderViewOrdersComponent } from \"./rider-view-orders/rider-view-orders.component\";\nimport { RiderViewRoutingModule } from \"./rider-view-routing.module\";\nimport { RiderViewComponent } from \"./rider-view.component\";\n\n@NgModule({\n  declarations: [\n    RiderViewComponent,\n    RiderViewInfoComponent,\n    RiderViewFinancialsComponent,\n    RiderViewOrdersComponent,\n    RiderViewAddressesComponent,\n  ],\n  imports: [RiderViewRoutingModule, SharedModule],\n})\nexport class RiderViewModule {}\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  ViewRiderGQL,\n  ViewRiderQuery,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class RiderViewResolver\n  implements Resolve<ApolloQueryResult<ViewRiderQuery>>\n{\n  constructor(private gql: ViewRiderGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<ViewRiderQuery>> {\n    return this.gql.fetch({ id: route.params.id });\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}