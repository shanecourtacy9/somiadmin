{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;AACyD;;;AAKlD,MAAM,mBAAmB;IAC5B,YACY,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IACvB,CAAC;IAEJ,OAAO,CAAC,KAAqB;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAChB,EAAE,EACF;YACE,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,EAAC,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAC;YAC5C,mBAAmB,EAAE,OAAO;SAC7B,CAAC,CAAC;IACX,CAAC;IAED,UAAU,CAAC,KAAqB;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAC9D,CAAC;;sFAjBQ,mBAAmB;oHAAnB,mBAAmB,WAAnB,mBAAmB,mBAFhB,MAAM;;;;;;;;;;;;;;;;;;ACCG;AAOoB;AACoC;;;;AAI1E,MAAM,kBAAkB;IAG7B,YAAoB,MAAoB,EAAU,GAAkB;QAAhD,WAAM,GAAN,MAAM,CAAc;QAAU,QAAG,GAAH,GAAG,CAAe;IAAG,CAAC;IAExE,OAAO,CACL,KAA6B,EAC7B,KAA0B;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAG/C,KAAK,CAAC,WAAW,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;;oFAdU,kBAAkB;mHAAlB,kBAAkB,WAAlB,kBAAkB;;;;;;;;;;;;;;;;;;;ACjBE;AACwD;AAClF;AACP;AACA;AACA,WAAW,gEAAmB;AAC9B;AACO;AACP;AACA;AACA,WAAW,qEAAwB;AACnC;AACO;AACP,8BAA8B;AAC9B,WAAW,uDAAU,QAAQ,+CAAQ,GAAG,+BAA+B;AACvE;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACO;AACP;AACA;AACA,iEAAiE,qBAAqB;AACtF;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;AC9CuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,8BAA8B;AAC9B,kOAAkO,iDAAS;AAC3O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;;;;;;;;;;;;;;;;;;;AC7BiC;AACA;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP,8BAA8B;AAC9B,WAAW,+CAAM,QAAQ,+CAAQ,GAAG,+CAA+C;AACnF","sources":["./src/app/@services/router-helper.service.ts","./src/app/cms/riders/riders-list/riders-list.resolver.ts","./node_modules/camel-case/dist.es2015/index.js","./node_modules/lower-case/dist.es2015/index.js","./node_modules/no-case/dist.es2015/index.js","./node_modules/pascal-case/dist.es2015/index.js"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RouterHelperService {\n    constructor(\n        private router: Router\n    ) {}\n\n    refresh(route: ActivatedRoute) {\n        this.router.navigate(\n            [],\n            {\n              relativeTo: route,\n              queryParams: {refresh: new Date().getTime()},\n              queryParamsHandling: 'merge',\n            });\n    }\n\n    goToParent(route: ActivatedRoute) {\n        this.router.navigate(['.'], { relativeTo: route.parent });\n    }\n}","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { ApolloQueryResult } from \"@apollo/client/core\";\nimport {\n  RiderFilter,\n  RidersListGQL,\n  RidersListQuery,\n  RiderSortFields,\n} from \"@ridy/admin-panel/generated/graphql\";\nimport { TableService } from \"@ridy/admin-panel/src/app/@services/table-service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class RidersListResolver\n  implements Resolve<ApolloQueryResult<RidersListQuery>>\n{\n  constructor(private paging: TableService, private gql: RidersListGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<ApolloQueryResult<RidersListQuery>> {\n    const params = this.paging.deserializeQueryParams<\n      RiderSortFields,\n      RiderFilter\n    >(route.queryParams);\n    return this.gql.fetch(params);\n  }\n}\n","import { __assign } from \"tslib\";\nimport { pascalCase, pascalCaseTransform, pascalCaseTransformMerge, } from \"pascal-case\";\nexport function camelCaseTransform(input, index) {\n    if (index === 0)\n        return input.toLowerCase();\n    return pascalCaseTransform(input, index);\n}\nexport function camelCaseTransformMerge(input, index) {\n    if (index === 0)\n        return input.toLowerCase();\n    return pascalCaseTransformMerge(input);\n}\nexport function camelCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return pascalCase(input, __assign({ transform: camelCaseTransform }, options));\n}\n","/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nvar SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    az: {\n        regexp: /\\u0130/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    lt: {\n        regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n        map: {\n            I: \"\\u0069\\u0307\",\n            J: \"\\u006A\\u0307\",\n            Į: \"\\u012F\\u0307\",\n            Ì: \"\\u0069\\u0307\\u0300\",\n            Í: \"\\u0069\\u0307\\u0301\",\n            Ĩ: \"\\u0069\\u0307\\u0303\",\n        },\n    },\n};\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str, locale) {\n    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return lowerCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));\n    return lowerCase(str);\n}\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n","import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n","import { __assign } from \"tslib\";\nimport { noCase } from \"no-case\";\nexport function pascalCaseTransform(input, index) {\n    var firstChar = input.charAt(0);\n    var lowerChars = input.substr(1).toLowerCase();\n    if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n        return \"_\" + firstChar + lowerChars;\n    }\n    return \"\" + firstChar.toUpperCase() + lowerChars;\n}\nexport function pascalCaseTransformMerge(input) {\n    return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\nexport function pascalCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return noCase(input, __assign({ delimiter: \"\", transform: pascalCaseTransform }, options));\n}\n"],"names":[],"sourceRoot":"webpack:///"}